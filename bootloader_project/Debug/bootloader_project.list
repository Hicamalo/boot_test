
bootloader_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059b0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000012b4  08005b40  08005b40  00015b40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006df4  08006df4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006df4  08006df4  00016df4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006dfc  08006dfc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006dfc  08006dfc  00016dfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006e00  08006e00  00016e00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006e04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000000a8  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000118  20000118  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cfca  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002902  00000000  00000000  0002d06a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a70  00000000  00000000  0002f970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000958  00000000  00000000  000303e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000228c9  00000000  00000000  00030d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ea19  00000000  00000000  00053601  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c567f  00000000  00000000  0006201a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00127699  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000303c  00000000  00000000  001276ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005b28 	.word	0x08005b28

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08005b28 	.word	0x08005b28

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <check_bootloader_mode>:
/**
 * \brief       Функция, которая проверяет нажатие пользовательской клавиши в течение 10 секунд.
 * \return      flag: Результат: TRUE (кнопка нажата), FALSE (кнопка не нажата).
 */
uint8_t
check_bootloader_mode(void) {
 8000584:	b580      	push	{r7, lr}
 8000586:	b084      	sub	sp, #16
 8000588:	af00      	add	r7, sp, #0
    uint8_t flag = FALSE;
 800058a:	2300      	movs	r3, #0
 800058c:	73fb      	strb	r3, [r7, #15]
    GPIO_PinState user_btn_pin_state;
    uint32_t end_tick = HAL_GetTick() + 10000;
 800058e:	f001 fcfd 	bl	8001f8c <HAL_GetTick>
 8000592:	4603      	mov	r3, r0
 8000594:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8000598:	3310      	adds	r3, #16
 800059a:	60bb      	str	r3, [r7, #8]

    printf("Нажмите кнопку User в течение 10 секунд чтобы перейти в режим загрузчика\n");
 800059c:	4810      	ldr	r0, [pc, #64]	; (80005e0 <check_bootloader_mode+0x5c>)
 800059e:	f004 fb45 	bl	8004c2c <puts>
    do {
        user_btn_pin_state = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 80005a2:	2101      	movs	r1, #1
 80005a4:	480f      	ldr	r0, [pc, #60]	; (80005e4 <check_bootloader_mode+0x60>)
 80005a6:	f002 fd2b 	bl	8003000 <HAL_GPIO_ReadPin>
 80005aa:	4603      	mov	r3, r0
 80005ac:	71fb      	strb	r3, [r7, #7]
        uint32_t current_tick = HAL_GetTick();
 80005ae:	f001 fced 	bl	8001f8c <HAL_GetTick>
 80005b2:	6038      	str	r0, [r7, #0]

        /* Проверяем нажатие кнопки User в течение 10 секунд */
        if (user_btn_pin_state == GPIO_PIN_SET) {
 80005b4:	79fb      	ldrb	r3, [r7, #7]
 80005b6:	2b01      	cmp	r3, #1
 80005b8:	d105      	bne.n	80005c6 <check_bootloader_mode+0x42>
            printf("Кнопка User была нажата, переходим в режим загрузчика\n");
 80005ba:	480b      	ldr	r0, [pc, #44]	; (80005e8 <check_bootloader_mode+0x64>)
 80005bc:	f004 fb36 	bl	8004c2c <puts>
            flag = TRUE;
 80005c0:	2301      	movs	r3, #1
 80005c2:	73fb      	strb	r3, [r7, #15]
            break;
 80005c4:	e006      	b.n	80005d4 <check_bootloader_mode+0x50>
        }
        if (current_tick > end_tick) {
 80005c6:	683a      	ldr	r2, [r7, #0]
 80005c8:	68bb      	ldr	r3, [r7, #8]
 80005ca:	429a      	cmp	r2, r3
 80005cc:	d9e9      	bls.n	80005a2 <check_bootloader_mode+0x1e>
            printf("Кнопка User не нажата, переходим к исполнению пользовательского приложения\n");
 80005ce:	4807      	ldr	r0, [pc, #28]	; (80005ec <check_bootloader_mode+0x68>)
 80005d0:	f004 fb2c 	bl	8004c2c <puts>
            break;
        }

    } while (1);

    return flag;
 80005d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80005d6:	4618      	mov	r0, r3
 80005d8:	3710      	adds	r7, #16
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	08005b40 	.word	0x08005b40
 80005e4:	40020000 	.word	0x40020000
 80005e8:	08005bc0 	.word	0x08005bc0
 80005ec:	08005c20 	.word	0x08005c20

080005f0 <bootloader_mode>:

/**
 * \brief     Эта основная функция загрузчика
 */
void
bootloader_mode(void) {
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b084      	sub	sp, #16
 80005f4:	af00      	add	r7, sp, #0
    uint32_t connection_try = 0;
 80005f6:	2300      	movs	r3, #0
 80005f8:	60fb      	str	r3, [r7, #12]

    do {
        /* Получаем настройки шифрования загрузчика */
        uint8_t get_settings_successfully = FALSE;
 80005fa:	2300      	movs	r3, #0
 80005fc:	72bb      	strb	r3, [r7, #10]
        uint8_t set_settings_by_default = FALSE;
 80005fe:	2300      	movs	r3, #0
 8000600:	727b      	strb	r3, [r7, #9]
        get_settings_successfully = check_settings();
 8000602:	f000 fc7b 	bl	8000efc <check_settings>
 8000606:	4603      	mov	r3, r0
 8000608:	72bb      	strb	r3, [r7, #10]

        if (!get_settings_successfully) {
 800060a:	7abb      	ldrb	r3, [r7, #10]
 800060c:	2b00      	cmp	r3, #0
 800060e:	d114      	bne.n	800063a <bootloader_mode+0x4a>
            printf("Ошибка получения ключей шифрования при запуске\n");
 8000610:	482b      	ldr	r0, [pc, #172]	; (80006c0 <bootloader_mode+0xd0>)
 8000612:	f004 fb0b 	bl	8004c2c <puts>
            printf("Происходит сброс до заводских настроек\n");
 8000616:	482b      	ldr	r0, [pc, #172]	; (80006c4 <bootloader_mode+0xd4>)
 8000618:	f004 fb08 	bl	8004c2c <puts>

            erase_flash(FLASH_SECTOR_NUMBER);
 800061c:	2004      	movs	r0, #4
 800061e:	f000 fbc3 	bl	8000da8 <erase_flash>
            /* Устанавливаем настройки шифрования по умолчанию */
            set_settings_by_default = set_settings(DEFAULT_ENCRYPTION_KEY);
 8000622:	4829      	ldr	r0, [pc, #164]	; (80006c8 <bootloader_mode+0xd8>)
 8000624:	f000 fca8 	bl	8000f78 <set_settings>
 8000628:	4603      	mov	r3, r0
 800062a:	727b      	strb	r3, [r7, #9]

            if (!set_settings_by_default) {
 800062c:	7a7b      	ldrb	r3, [r7, #9]
 800062e:	2b00      	cmp	r3, #0
 8000630:	d103      	bne.n	800063a <bootloader_mode+0x4a>
                printf("Ошибка установки настроек по умолчанию!");
 8000632:	4826      	ldr	r0, [pc, #152]	; (80006cc <bootloader_mode+0xdc>)
 8000634:	f004 fa74 	bl	8004b20 <iprintf>
                break;
 8000638:	e03c      	b.n	80006b4 <bootloader_mode+0xc4>
            }
        }

        cmd_t command = CMD_UNKNOWN;
 800063a:	2300      	movs	r3, #0
 800063c:	71bb      	strb	r3, [r7, #6]
        get_cmd_status_t get_cmd_result;
        uint8_t cmd_received_successfully = FALSE;
 800063e:	2300      	movs	r3, #0
 8000640:	72fb      	strb	r3, [r7, #11]

        /* Получаем пакет типа "command" */
        while (connection_try < MAX_USART_CONNECTION_TRY) {
 8000642:	e01c      	b.n	800067e <bootloader_mode+0x8e>
            get_cmd_result = usart_get_cmd(&command);
 8000644:	1dbb      	adds	r3, r7, #6
 8000646:	4618      	mov	r0, r3
 8000648:	f000 fd9e 	bl	8001188 <usart_get_cmd>
 800064c:	4603      	mov	r3, r0
 800064e:	723b      	strb	r3, [r7, #8]

            if (get_cmd_result != GET_CMD_OK) {
 8000650:	7a3b      	ldrb	r3, [r7, #8]
 8000652:	2b00      	cmp	r3, #0
 8000654:	d003      	beq.n	800065e <bootloader_mode+0x6e>
                usart_send_status(STATUS_NACK);
 8000656:	2000      	movs	r0, #0
 8000658:	f000 fd6c 	bl	8001134 <usart_send_status>
 800065c:	e00c      	b.n	8000678 <bootloader_mode+0x88>
            } else if (command == CMD_UNKNOWN) {
 800065e:	79bb      	ldrb	r3, [r7, #6]
 8000660:	2b00      	cmp	r3, #0
 8000662:	d103      	bne.n	800066c <bootloader_mode+0x7c>
                usart_send_status(STATUS_NACK);
 8000664:	2000      	movs	r0, #0
 8000666:	f000 fd65 	bl	8001134 <usart_send_status>
 800066a:	e005      	b.n	8000678 <bootloader_mode+0x88>
            } else {
                usart_send_status(STATUS_ACK);
 800066c:	2001      	movs	r0, #1
 800066e:	f000 fd61 	bl	8001134 <usart_send_status>
                cmd_received_successfully = TRUE;
 8000672:	2301      	movs	r3, #1
 8000674:	72fb      	strb	r3, [r7, #11]
                break;
 8000676:	e005      	b.n	8000684 <bootloader_mode+0x94>
            }

            connection_try++;
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	3301      	adds	r3, #1
 800067c:	60fb      	str	r3, [r7, #12]
        while (connection_try < MAX_USART_CONNECTION_TRY) {
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	2b09      	cmp	r3, #9
 8000682:	d9df      	bls.n	8000644 <bootloader_mode+0x54>
        }

        connection_try = 0;
 8000684:	2300      	movs	r3, #0
 8000686:	60fb      	str	r3, [r7, #12]

        if (!cmd_received_successfully) {
 8000688:	7afb      	ldrb	r3, [r7, #11]
 800068a:	2b00      	cmp	r3, #0
 800068c:	d103      	bne.n	8000696 <bootloader_mode+0xa6>
            printf("Ошибка при получении пакета \"command\"\n");
 800068e:	4810      	ldr	r0, [pc, #64]	; (80006d0 <bootloader_mode+0xe0>)
 8000690:	f004 facc 	bl	8004c2c <puts>
            break;
 8000694:	e00e      	b.n	80006b4 <bootloader_mode+0xc4>
        }

        /* Выполняем полученную команду */
        uint8_t execution_result = FALSE;
 8000696:	2300      	movs	r3, #0
 8000698:	71fb      	strb	r3, [r7, #7]
        execution_result = execute_command(command);
 800069a:	79bb      	ldrb	r3, [r7, #6]
 800069c:	4618      	mov	r0, r3
 800069e:	f000 fb09 	bl	8000cb4 <execute_command>
 80006a2:	4603      	mov	r3, r0
 80006a4:	71fb      	strb	r3, [r7, #7]

        if (!execution_result) {
 80006a6:	79fb      	ldrb	r3, [r7, #7]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d103      	bne.n	80006b4 <bootloader_mode+0xc4>
            printf("Ошибка выполнения команды!\n");
 80006ac:	4809      	ldr	r0, [pc, #36]	; (80006d4 <bootloader_mode+0xe4>)
 80006ae:	f004 fabd 	bl	8004c2c <puts>
            break;
 80006b2:	bf00      	nop
        }

    } while (0);

    /* Программно перезагружаем микроконтроллер */
    restart();
 80006b4:	f001 f8ca 	bl	800184c <restart>
}
 80006b8:	bf00      	nop
 80006ba:	3710      	adds	r7, #16
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	08005ca8 	.word	0x08005ca8
 80006c4:	08005d00 	.word	0x08005d00
 80006c8:	13121411 	.word	0x13121411
 80006cc:	08005d4c 	.word	0x08005d4c
 80006d0:	08005d98 	.word	0x08005d98
 80006d4:	08005dd8 	.word	0x08005dd8

080006d8 <send_uid>:
#include "bootloader/bootloader_execution.h"

/**
 * \brief     Эта функция служит для отправки UID микроконтроллера
 */
void send_uid(void) {
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
    usart_send_response((*(uint32_t *)RESPONSE_UID_1_ADDRESS));
 80006dc:	4b08      	ldr	r3, [pc, #32]	; (8000700 <send_uid+0x28>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	4618      	mov	r0, r3
 80006e2:	f000 fcc5 	bl	8001070 <usart_send_response>
    usart_send_response((*(uint32_t *)RESPONSE_UID_2_ADDRESS));
 80006e6:	4b07      	ldr	r3, [pc, #28]	; (8000704 <send_uid+0x2c>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	4618      	mov	r0, r3
 80006ec:	f000 fcc0 	bl	8001070 <usart_send_response>
    usart_send_response((*(uint32_t *)RESPONSE_UID_3_ADDRESS));
 80006f0:	4b05      	ldr	r3, [pc, #20]	; (8000708 <send_uid+0x30>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	4618      	mov	r0, r3
 80006f6:	f000 fcbb 	bl	8001070 <usart_send_response>
}
 80006fa:	bf00      	nop
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	1fff7a10 	.word	0x1fff7a10
 8000704:	1fff7a14 	.word	0x1fff7a14
 8000708:	1fff7a18 	.word	0x1fff7a18

0800070c <set_key>:
/**
 * \brief      Эта функция служит для изменения ключа шифрования прошивки.
 * \return     result: Результат изменения ключа: TRUE (ключ изменен), FALSE (произошла ошибка изменения ключа)
 */
uint8_t
set_key(void) {
 800070c:	b580      	push	{r7, lr}
 800070e:	b084      	sub	sp, #16
 8000710:	af00      	add	r7, sp, #0
    uint8_t connection_try = 0;
 8000712:	2300      	movs	r3, #0
 8000714:	73fb      	strb	r3, [r7, #15]
    uint8_t result = FALSE;
 8000716:	2300      	movs	r3, #0
 8000718:	73bb      	strb	r3, [r7, #14]

    uint32_t coded_key = 0;
 800071a:	2300      	movs	r3, #0
 800071c:	607b      	str	r3, [r7, #4]

    do {

        get_key_status_t get_key_result;
        uint8_t key_received_successfully = FALSE;
 800071e:	2300      	movs	r3, #0
 8000720:	737b      	strb	r3, [r7, #13]

        send_uid();
 8000722:	f7ff ffd9 	bl	80006d8 <send_uid>

        /* Получаем пакет типа "key" */
        while (connection_try < MAX_USART_CONNECTION_TRY) {
 8000726:	e015      	b.n	8000754 <set_key+0x48>
            get_key_result = usart_get_key(&coded_key);
 8000728:	1d3b      	adds	r3, r7, #4
 800072a:	4618      	mov	r0, r3
 800072c:	f000 fec6 	bl	80014bc <usart_get_key>
 8000730:	4603      	mov	r3, r0
 8000732:	733b      	strb	r3, [r7, #12]

            if (get_key_result != GET_KEY_OK) {
 8000734:	7b3b      	ldrb	r3, [r7, #12]
 8000736:	2b00      	cmp	r3, #0
 8000738:	d003      	beq.n	8000742 <set_key+0x36>
                usart_send_status(STATUS_NACK);
 800073a:	2000      	movs	r0, #0
 800073c:	f000 fcfa 	bl	8001134 <usart_send_status>
 8000740:	e005      	b.n	800074e <set_key+0x42>
            } else {
                usart_send_status(STATUS_ACK);
 8000742:	2001      	movs	r0, #1
 8000744:	f000 fcf6 	bl	8001134 <usart_send_status>
                key_received_successfully = TRUE;
 8000748:	2301      	movs	r3, #1
 800074a:	737b      	strb	r3, [r7, #13]
                break;
 800074c:	e005      	b.n	800075a <set_key+0x4e>
            }

            connection_try++;
 800074e:	7bfb      	ldrb	r3, [r7, #15]
 8000750:	3301      	adds	r3, #1
 8000752:	73fb      	strb	r3, [r7, #15]
        while (connection_try < MAX_USART_CONNECTION_TRY) {
 8000754:	7bfb      	ldrb	r3, [r7, #15]
 8000756:	2b09      	cmp	r3, #9
 8000758:	d9e6      	bls.n	8000728 <set_key+0x1c>
        }

        connection_try = 0;
 800075a:	2300      	movs	r3, #0
 800075c:	73fb      	strb	r3, [r7, #15]

        if (!key_received_successfully) {
 800075e:	7b7b      	ldrb	r3, [r7, #13]
 8000760:	2b00      	cmp	r3, #0
 8000762:	d103      	bne.n	800076c <set_key+0x60>
            printf("Ошибка при получении пакета \"key\"\n");
 8000764:	481f      	ldr	r0, [pc, #124]	; (80007e4 <set_key+0xd8>)
 8000766:	f004 fa61 	bl	8004c2c <puts>
            break;
 800076a:	e036      	b.n	80007da <set_key+0xce>
        }

        /* Расшифровываем ключ секретным ключом */
        uint8_t temp_arr[NUMBER_OF_BYTES_KEY_DATA];
        temp_arr[0] = (coded_key >> 24) & 0xFF;
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	0e1b      	lsrs	r3, r3, #24
 8000770:	b2db      	uxtb	r3, r3
 8000772:	703b      	strb	r3, [r7, #0]
        temp_arr[1] = (coded_key >> 16) & 0xFF;
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	0c1b      	lsrs	r3, r3, #16
 8000778:	b2db      	uxtb	r3, r3
 800077a:	707b      	strb	r3, [r7, #1]
        temp_arr[2] = (coded_key >> 8) & 0xFF;
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	0a1b      	lsrs	r3, r3, #8
 8000780:	b2db      	uxtb	r3, r3
 8000782:	70bb      	strb	r3, [r7, #2]
        temp_arr[3] = coded_key & 0xFF;
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	b2db      	uxtb	r3, r3
 8000788:	70fb      	strb	r3, [r7, #3]

        decrypt_data(secret_encryption_key, temp_arr, NUMBER_OF_BYTES_KEY_DATA);
 800078a:	4b17      	ldr	r3, [pc, #92]	; (80007e8 <set_key+0xdc>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	4639      	mov	r1, r7
 8000790:	2204      	movs	r2, #4
 8000792:	4618      	mov	r0, r3
 8000794:	f000 ff46 	bl	8001624 <decrypt_data>

        encryption_key = four_uint8t_to_one_uint32t(temp_arr);
 8000798:	463b      	mov	r3, r7
 800079a:	4618      	mov	r0, r3
 800079c:	f000 ff20 	bl	80015e0 <four_uint8t_to_one_uint32t>
 80007a0:	4603      	mov	r3, r0
 80007a2:	4a12      	ldr	r2, [pc, #72]	; (80007ec <set_key+0xe0>)
 80007a4:	6013      	str	r3, [r2, #0]

        /* Записываем навый ключ шифрования во flash */
        uint8_t set_settings_successfully = FALSE;
 80007a6:	2300      	movs	r3, #0
 80007a8:	72fb      	strb	r3, [r7, #11]
        set_settings_successfully = set_settings(encryption_key);
 80007aa:	4b10      	ldr	r3, [pc, #64]	; (80007ec <set_key+0xe0>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	4618      	mov	r0, r3
 80007b0:	f000 fbe2 	bl	8000f78 <set_settings>
 80007b4:	4603      	mov	r3, r0
 80007b6:	72fb      	strb	r3, [r7, #11]

        if (!set_settings_successfully) {
 80007b8:	7afb      	ldrb	r3, [r7, #11]
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d107      	bne.n	80007ce <set_key+0xc2>
            printf("Ошибка установки настроек!");
 80007be:	480c      	ldr	r0, [pc, #48]	; (80007f0 <set_key+0xe4>)
 80007c0:	f004 f9ae 	bl	8004b20 <iprintf>
            usart_send_response(RESPONSE_FAIL);
 80007c4:	f04f 3033 	mov.w	r0, #858993459	; 0x33333333
 80007c8:	f000 fc52 	bl	8001070 <usart_send_response>
            break;
 80007cc:	e005      	b.n	80007da <set_key+0xce>
        }

        usart_send_response(RESPONSE_OK);
 80007ce:	f04f 30ff 	mov.w	r0, #4294967295
 80007d2:	f000 fc4d 	bl	8001070 <usart_send_response>
        result = TRUE;
 80007d6:	2301      	movs	r3, #1
 80007d8:	73bb      	strb	r3, [r7, #14]
    } while (0);

    return result;
 80007da:	7bbb      	ldrb	r3, [r7, #14]
}
 80007dc:	4618      	mov	r0, r3
 80007de:	3710      	adds	r7, #16
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	08005e0c 	.word	0x08005e0c
 80007e8:	200000dc 	.word	0x200000dc
 80007ec:	200000d8 	.word	0x200000d8
 80007f0:	08005e48 	.word	0x08005e48

080007f4 <update_firmware>:
/**
 * \brief       Функция которая производит обновление прошивки.
 * \return     update_successfull: Результат обновления: TRUE (обновление прошло успешно), FALSE (произошла ошибка обновления)
 */
uint8_t
update_firmware(void) {
 80007f4:	b580      	push	{r7, lr}
 80007f6:	f6ad 0d28 	subw	sp, sp, #2088	; 0x828
 80007fa:	af00      	add	r7, sp, #0
    uint32_t connection_try = 0;
 80007fc:	2300      	movs	r3, #0
 80007fe:	f8c7 3824 	str.w	r3, [r7, #2084]	; 0x824

    uint8_t update_successfull = FALSE;
 8000802:	2300      	movs	r3, #0
 8000804:	f887 3823 	strb.w	r3, [r7, #2083]	; 0x823

    do {
        /* Получаем header с размером прошивки */
        uint32_t firmware_size = 0;
 8000808:	2300      	movs	r3, #0
 800080a:	f8c7 3800 	str.w	r3, [r7, #2048]	; 0x800
        uint32_t max_flash_size_b = NUMBER_OF_BYTES_OF_FLASH_MEMORY_SECTOR;
 800080e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000812:	f8c7 3808 	str.w	r3, [r7, #2056]	; 0x808
        get_header_status_t get_header_status;
        uint8_t get_header_successfull = FALSE;
 8000816:	2300      	movs	r3, #0
 8000818:	f887 3822 	strb.w	r3, [r7, #2082]	; 0x822

        while (connection_try < MAX_USART_CONNECTION_TRY) {
 800081c:	e041      	b.n	80008a2 <update_firmware+0xae>
            get_header_status = usart_get_header(&firmware_size);
 800081e:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 8000822:	4618      	mov	r0, r3
 8000824:	f000 fd32 	bl	800128c <usart_get_header>
 8000828:	4603      	mov	r3, r0
 800082a:	f887 3807 	strb.w	r3, [r7, #2055]	; 0x807

            if (get_header_status != GET_HEADER_OK) {
 800082e:	f897 3807 	ldrb.w	r3, [r7, #2055]	; 0x807
 8000832:	2b00      	cmp	r3, #0
 8000834:	d003      	beq.n	800083e <update_firmware+0x4a>
                usart_send_status(STATUS_NACK);
 8000836:	2000      	movs	r0, #0
 8000838:	f000 fc7c 	bl	8001134 <usart_send_status>
 800083c:	e02c      	b.n	8000898 <update_firmware+0xa4>
            } else if (firmware_size == 0) {
 800083e:	f8d7 3800 	ldr.w	r3, [r7, #2048]	; 0x800
 8000842:	2b00      	cmp	r3, #0
 8000844:	d10a      	bne.n	800085c <update_firmware+0x68>
                printf("Размер прошивки равен нулю\n");
 8000846:	4886      	ldr	r0, [pc, #536]	; (8000a60 <update_firmware+0x26c>)
 8000848:	f004 f9f0 	bl	8004c2c <puts>
                usart_send_status(STATUS_ACK);
 800084c:	2001      	movs	r0, #1
 800084e:	f000 fc71 	bl	8001134 <usart_send_status>
                usart_send_response(RESPONSE_FAIL);
 8000852:	f04f 3033 	mov.w	r0, #858993459	; 0x33333333
 8000856:	f000 fc0b 	bl	8001070 <usart_send_response>
                break;
 800085a:	e026      	b.n	80008aa <update_firmware+0xb6>
            } else if (firmware_size > max_flash_size_b) {
 800085c:	f8d7 3800 	ldr.w	r3, [r7, #2048]	; 0x800
 8000860:	f8d7 2808 	ldr.w	r2, [r7, #2056]	; 0x808
 8000864:	429a      	cmp	r2, r3
 8000866:	d20c      	bcs.n	8000882 <update_firmware+0x8e>
                printf("Размер прошивки больше %lu байт\n", max_flash_size_b);
 8000868:	f8d7 1808 	ldr.w	r1, [r7, #2056]	; 0x808
 800086c:	487d      	ldr	r0, [pc, #500]	; (8000a64 <update_firmware+0x270>)
 800086e:	f004 f957 	bl	8004b20 <iprintf>
                usart_send_status(STATUS_ACK);
 8000872:	2001      	movs	r0, #1
 8000874:	f000 fc5e 	bl	8001134 <usart_send_status>
                usart_send_response(RESPONSE_FAIL);
 8000878:	f04f 3033 	mov.w	r0, #858993459	; 0x33333333
 800087c:	f000 fbf8 	bl	8001070 <usart_send_response>
                break;
 8000880:	e013      	b.n	80008aa <update_firmware+0xb6>
            } else {
                usart_send_status(STATUS_ACK);
 8000882:	2001      	movs	r0, #1
 8000884:	f000 fc56 	bl	8001134 <usart_send_status>
                usart_send_response(RESPONSE_OK);
 8000888:	f04f 30ff 	mov.w	r0, #4294967295
 800088c:	f000 fbf0 	bl	8001070 <usart_send_response>
                get_header_successfull = TRUE;
 8000890:	2301      	movs	r3, #1
 8000892:	f887 3822 	strb.w	r3, [r7, #2082]	; 0x822
                break;
 8000896:	e008      	b.n	80008aa <update_firmware+0xb6>
            }

            connection_try++;
 8000898:	f8d7 3824 	ldr.w	r3, [r7, #2084]	; 0x824
 800089c:	3301      	adds	r3, #1
 800089e:	f8c7 3824 	str.w	r3, [r7, #2084]	; 0x824
        while (connection_try < MAX_USART_CONNECTION_TRY) {
 80008a2:	f8d7 3824 	ldr.w	r3, [r7, #2084]	; 0x824
 80008a6:	2b09      	cmp	r3, #9
 80008a8:	d9b9      	bls.n	800081e <update_firmware+0x2a>
        }

        connection_try = 0;
 80008aa:	2300      	movs	r3, #0
 80008ac:	f8c7 3824 	str.w	r3, [r7, #2084]	; 0x824

        if (!get_header_successfull) {
 80008b0:	f897 3822 	ldrb.w	r3, [r7, #2082]	; 0x822
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d103      	bne.n	80008c0 <update_firmware+0xcc>
            printf("Ошибка при получении header\n");
 80008b8:	486b      	ldr	r0, [pc, #428]	; (8000a68 <update_firmware+0x274>)
 80008ba:	f004 f9b7 	bl	8004c2c <puts>
            break;
 80008be:	e0c7      	b.n	8000a50 <update_firmware+0x25c>

        /*TODO: Сделать проверку на соответствие ключей шифрования */

        /* Получаем прошивку */
        get_data_status_t get_data_status;
        uint32_t number_of_data_blocks = 0;
 80008c0:	2300      	movs	r3, #0
 80008c2:	f8c7 381c 	str.w	r3, [r7, #2076]	; 0x81c

        uint8_t coded_data[NUMBER_OF_BYTES_DATA_DATA];
        uint8_t decoded_data[NUMBER_OF_BYTES_DATA_DATA];

        if (firmware_size % NUMBER_OF_BYTES_DATA_DATA == 0) {
 80008c6:	f8d7 3800 	ldr.w	r3, [r7, #2048]	; 0x800
 80008ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d105      	bne.n	80008de <update_firmware+0xea>
            number_of_data_blocks = firmware_size / NUMBER_OF_BYTES_DATA_DATA;
 80008d2:	f8d7 3800 	ldr.w	r3, [r7, #2048]	; 0x800
 80008d6:	0a9b      	lsrs	r3, r3, #10
 80008d8:	f8c7 381c 	str.w	r3, [r7, #2076]	; 0x81c
 80008dc:	e009      	b.n	80008f2 <update_firmware+0xfe>
        } else {
            number_of_data_blocks = firmware_size / NUMBER_OF_BYTES_DATA_DATA;
 80008de:	f8d7 3800 	ldr.w	r3, [r7, #2048]	; 0x800
 80008e2:	0a9b      	lsrs	r3, r3, #10
 80008e4:	f8c7 381c 	str.w	r3, [r7, #2076]	; 0x81c
            number_of_data_blocks++;
 80008e8:	f8d7 381c 	ldr.w	r3, [r7, #2076]	; 0x81c
 80008ec:	3301      	adds	r3, #1
 80008ee:	f8c7 381c 	str.w	r3, [r7, #2076]	; 0x81c
        }

        uint8_t all_data_blocks_received = FALSE;
 80008f2:	2300      	movs	r3, #0
 80008f4:	f887 381b 	strb.w	r3, [r7, #2075]	; 0x81b
        uint32_t address_write_to_memory = APP_FLASH_START_ADDRESS;
 80008f8:	4b5c      	ldr	r3, [pc, #368]	; (8000a6c <update_firmware+0x278>)
 80008fa:	f8c7 3814 	str.w	r3, [r7, #2068]	; 0x814

        for (uint32_t i = 0; i < number_of_data_blocks; i++) {
 80008fe:	2300      	movs	r3, #0
 8000900:	f8c7 3810 	str.w	r3, [r7, #2064]	; 0x810
 8000904:	e092      	b.n	8000a2c <update_firmware+0x238>

            uint8_t one_data_block_received = FALSE;
 8000906:	2300      	movs	r3, #0
 8000908:	f887 380f 	strb.w	r3, [r7, #2063]	; 0x80f

            while (connection_try < MAX_USART_CONNECTION_TRY) {
 800090c:	e026      	b.n	800095c <update_firmware+0x168>
                /* Получаем блок с прошивкой */
                get_data_status = usart_get_data(coded_data);
 800090e:	463b      	mov	r3, r7
 8000910:	4618      	mov	r0, r3
 8000912:	f000 fd37 	bl	8001384 <usart_get_data>
 8000916:	4603      	mov	r3, r0
 8000918:	f887 3806 	strb.w	r3, [r7, #2054]	; 0x806

                if (get_data_status != GET_DATA_OK) {
 800091c:	f897 3806 	ldrb.w	r3, [r7, #2054]	; 0x806
 8000920:	2b00      	cmp	r3, #0
 8000922:	d006      	beq.n	8000932 <update_firmware+0x13e>
                    printf("Ошибка при выполнении usart_get_data\n");
 8000924:	4852      	ldr	r0, [pc, #328]	; (8000a70 <update_firmware+0x27c>)
 8000926:	f004 f981 	bl	8004c2c <puts>
                    usart_send_status(STATUS_NACK);
 800092a:	2000      	movs	r0, #0
 800092c:	f000 fc02 	bl	8001134 <usart_send_status>
 8000930:	e00f      	b.n	8000952 <update_firmware+0x15e>
                } else {
                    printf("[%lu / %lu]\n", i + 1, number_of_data_blocks);
 8000932:	f8d7 3810 	ldr.w	r3, [r7, #2064]	; 0x810
 8000936:	3301      	adds	r3, #1
 8000938:	f8d7 281c 	ldr.w	r2, [r7, #2076]	; 0x81c
 800093c:	4619      	mov	r1, r3
 800093e:	484d      	ldr	r0, [pc, #308]	; (8000a74 <update_firmware+0x280>)
 8000940:	f004 f8ee 	bl	8004b20 <iprintf>
                    usart_send_status(STATUS_ACK);
 8000944:	2001      	movs	r0, #1
 8000946:	f000 fbf5 	bl	8001134 <usart_send_status>
                    one_data_block_received = TRUE;
 800094a:	2301      	movs	r3, #1
 800094c:	f887 380f 	strb.w	r3, [r7, #2063]	; 0x80f
                    break;
 8000950:	e008      	b.n	8000964 <update_firmware+0x170>
                }

                connection_try++;
 8000952:	f8d7 3824 	ldr.w	r3, [r7, #2084]	; 0x824
 8000956:	3301      	adds	r3, #1
 8000958:	f8c7 3824 	str.w	r3, [r7, #2084]	; 0x824
            while (connection_try < MAX_USART_CONNECTION_TRY) {
 800095c:	f8d7 3824 	ldr.w	r3, [r7, #2084]	; 0x824
 8000960:	2b09      	cmp	r3, #9
 8000962:	d9d4      	bls.n	800090e <update_firmware+0x11a>
            }

            if (!one_data_block_received) {
 8000964:	f897 380f 	ldrb.w	r3, [r7, #2063]	; 0x80f
 8000968:	2b00      	cmp	r3, #0
 800096a:	d106      	bne.n	800097a <update_firmware+0x186>
                printf("Ошибка при получении блока данных с прошивкой\n");
 800096c:	4842      	ldr	r0, [pc, #264]	; (8000a78 <update_firmware+0x284>)
 800096e:	f004 f95d 	bl	8004c2c <puts>
                all_data_blocks_received = FALSE;
 8000972:	2300      	movs	r3, #0
 8000974:	f887 381b 	strb.w	r3, [r7, #2075]	; 0x81b
                break;
 8000978:	e05f      	b.n	8000a3a <update_firmware+0x246>
            }

            one_data_block_received = FALSE;
 800097a:	2300      	movs	r3, #0
 800097c:	f887 380f 	strb.w	r3, [r7, #2063]	; 0x80f

            /* 1 раз стираем flash память, только после того, как получили первый блок */
            if (i == 0) {
 8000980:	f8d7 3810 	ldr.w	r3, [r7, #2064]	; 0x810
 8000984:	2b00      	cmp	r3, #0
 8000986:	d10d      	bne.n	80009a4 <update_firmware+0x1b0>
                uint8_t erase_successfull = erase_flash(FLASH_SECTOR_NUMBER);
 8000988:	2004      	movs	r0, #4
 800098a:	f000 fa0d 	bl	8000da8 <erase_flash>
 800098e:	4603      	mov	r3, r0
 8000990:	f887 3805 	strb.w	r3, [r7, #2053]	; 0x805

                if (!erase_successfull) {
 8000994:	f897 3805 	ldrb.w	r3, [r7, #2053]	; 0x805
 8000998:	2b00      	cmp	r3, #0
 800099a:	d103      	bne.n	80009a4 <update_firmware+0x1b0>
                    printf("Ошибка при стирании flash памяти\n");
 800099c:	4837      	ldr	r0, [pc, #220]	; (8000a7c <update_firmware+0x288>)
 800099e:	f004 f945 	bl	8004c2c <puts>
                    break;
 80009a2:	e04a      	b.n	8000a3a <update_firmware+0x246>
                }
            }

            /* Копируем зашифрованные данные для дальнейшей расшифровки */
            memcpy(decoded_data, coded_data, NUMBER_OF_BYTES_DATA_DATA);
 80009a4:	f607 0328 	addw	r3, r7, #2088	; 0x828
 80009a8:	f5a3 6285 	sub.w	r2, r3, #1064	; 0x428
 80009ac:	f607 0328 	addw	r3, r7, #2088	; 0x828
 80009b0:	f6a3 0328 	subw	r3, r3, #2088	; 0x828
 80009b4:	4610      	mov	r0, r2
 80009b6:	4619      	mov	r1, r3
 80009b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009bc:	461a      	mov	r2, r3
 80009be:	f004 f899 	bl	8004af4 <memcpy>

            /* Расшифровываем данные */
            decrypt_data(encryption_key, decoded_data, NUMBER_OF_BYTES_DATA_DATA);
 80009c2:	4b2f      	ldr	r3, [pc, #188]	; (8000a80 <update_firmware+0x28c>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	f507 6180 	add.w	r1, r7, #1024	; 0x400
 80009ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009ce:	4618      	mov	r0, r3
 80009d0:	f000 fe28 	bl	8001624 <decrypt_data>

            /* Записываем блок данных во flash */
            uint8_t write_status =
                write_data_block_to_flash(decoded_data, NUMBER_OF_BYTES_DATA_DATA, address_write_to_memory);
 80009d4:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 80009d8:	f8d7 2814 	ldr.w	r2, [r7, #2068]	; 0x814
 80009dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009e0:	4618      	mov	r0, r3
 80009e2:	f000 fa33 	bl	8000e4c <write_data_block_to_flash>
 80009e6:	4603      	mov	r3, r0
 80009e8:	f887 3804 	strb.w	r3, [r7, #2052]	; 0x804
            address_write_to_memory += NUMBER_OF_BYTES_DATA_DATA;
 80009ec:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 80009f0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80009f4:	f8c7 3814 	str.w	r3, [r7, #2068]	; 0x814

            if (!write_status) {
 80009f8:	f897 3804 	ldrb.w	r3, [r7, #2052]	; 0x804
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d103      	bne.n	8000a08 <update_firmware+0x214>
                printf("Ошибка при записи блока flash памяти\n");
 8000a00:	4820      	ldr	r0, [pc, #128]	; (8000a84 <update_firmware+0x290>)
 8000a02:	f004 f913 	bl	8004c2c <puts>
                break;
 8000a06:	e018      	b.n	8000a3a <update_firmware+0x246>
            }

            /* Последний блок передан успешно */
            if (i + 1 == number_of_data_blocks) {
 8000a08:	f8d7 3810 	ldr.w	r3, [r7, #2064]	; 0x810
 8000a0c:	3301      	adds	r3, #1
 8000a0e:	f8d7 281c 	ldr.w	r2, [r7, #2076]	; 0x81c
 8000a12:	429a      	cmp	r2, r3
 8000a14:	d105      	bne.n	8000a22 <update_firmware+0x22e>
                printf("Последний блок передан успешно\n");
 8000a16:	481c      	ldr	r0, [pc, #112]	; (8000a88 <update_firmware+0x294>)
 8000a18:	f004 f908 	bl	8004c2c <puts>
                all_data_blocks_received = TRUE;
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	f887 381b 	strb.w	r3, [r7, #2075]	; 0x81b
        for (uint32_t i = 0; i < number_of_data_blocks; i++) {
 8000a22:	f8d7 3810 	ldr.w	r3, [r7, #2064]	; 0x810
 8000a26:	3301      	adds	r3, #1
 8000a28:	f8c7 3810 	str.w	r3, [r7, #2064]	; 0x810
 8000a2c:	f8d7 2810 	ldr.w	r2, [r7, #2064]	; 0x810
 8000a30:	f8d7 381c 	ldr.w	r3, [r7, #2076]	; 0x81c
 8000a34:	429a      	cmp	r2, r3
 8000a36:	f4ff af66 	bcc.w	8000906 <update_firmware+0x112>
            }
        }

        if (!all_data_blocks_received) {
 8000a3a:	f897 381b 	ldrb.w	r3, [r7, #2075]	; 0x81b
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d103      	bne.n	8000a4a <update_firmware+0x256>
            printf("Ошибка при обновлении прошивки\n");
 8000a42:	4812      	ldr	r0, [pc, #72]	; (8000a8c <update_firmware+0x298>)
 8000a44:	f004 f8f2 	bl	8004c2c <puts>
            break;
 8000a48:	e002      	b.n	8000a50 <update_firmware+0x25c>
        }

        update_successfull = TRUE;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	f887 3823 	strb.w	r3, [r7, #2083]	; 0x823
    } while (0);

    return update_successfull;
 8000a50:	f897 3823 	ldrb.w	r3, [r7, #2083]	; 0x823
}
 8000a54:	4618      	mov	r0, r3
 8000a56:	f607 0728 	addw	r7, r7, #2088	; 0x828
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	08005e7c 	.word	0x08005e7c
 8000a64:	08005eb0 	.word	0x08005eb0
 8000a68:	08005eec 	.word	0x08005eec
 8000a6c:	08010000 	.word	0x08010000
 8000a70:	08005f1c 	.word	0x08005f1c
 8000a74:	08005f54 	.word	0x08005f54
 8000a78:	08005f64 	.word	0x08005f64
 8000a7c:	08005fbc 	.word	0x08005fbc
 8000a80:	200000d8 	.word	0x200000d8
 8000a84:	08005ff4 	.word	0x08005ff4
 8000a88:	08006034 	.word	0x08006034
 8000a8c:	08006070 	.word	0x08006070

08000a90 <flash_ob_check>:
 * \brief      Эта функция служит проверки защиты flash памяти. (Регистра с RDP байтами)
 * \return     result: Результат проверки: TRUE (Protection Level = 1 - есть защита от чтения или записи),
 *             FALSE (Protection Level = 0 - нет защиты от чтения или записи)
 */
uint8_t
flash_ob_check(void) {
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b088      	sub	sp, #32
 8000a94:	af00      	add	r7, sp, #0
    FLASH_OBProgramInitTypeDef OBconfig;
    HAL_FLASHEx_OBGetConfig(&OBconfig);
 8000a96:	463b      	mov	r3, r7
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f001 ff49 	bl	8002930 <HAL_FLASHEx_OBGetConfig>

    uint8_t result;

    if (((OBconfig.OptionType & OPTIONBYTE_RDP) != OPTIONBYTE_RDP) || OBconfig.RDPLevel != OB_RDP_LEVEL_1) {
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	f003 0302 	and.w	r3, r3, #2
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d002      	beq.n	8000aae <flash_ob_check+0x1e>
 8000aa8:	693b      	ldr	r3, [r7, #16]
 8000aaa:	2b55      	cmp	r3, #85	; 0x55
 8000aac:	d005      	beq.n	8000aba <flash_ob_check+0x2a>
        printf("Защита flash памяти выключена\n");
 8000aae:	4808      	ldr	r0, [pc, #32]	; (8000ad0 <flash_ob_check+0x40>)
 8000ab0:	f004 f8bc 	bl	8004c2c <puts>
        result = FALSE;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	77fb      	strb	r3, [r7, #31]
 8000ab8:	e004      	b.n	8000ac4 <flash_ob_check+0x34>
    } else {
        printf("Защита flash памяти включена (отключение приведет к полному стиранию flash памяти!)\n");
 8000aba:	4806      	ldr	r0, [pc, #24]	; (8000ad4 <flash_ob_check+0x44>)
 8000abc:	f004 f8b6 	bl	8004c2c <puts>
        result = TRUE;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	77fb      	strb	r3, [r7, #31]
    }

    return result;
 8000ac4:	7ffb      	ldrb	r3, [r7, #31]
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	3720      	adds	r7, #32
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	080060ac 	.word	0x080060ac
 8000ad4:	080060e0 	.word	0x080060e0

08000ad8 <flash_lock>:

/**
 * \brief     Эта функция служит для установки защиты flash памяти. (RDP Protection Level = 1)
 */
uint8_t
flash_lock(void) {
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b088      	sub	sp, #32
 8000adc:	af00      	add	r7, sp, #0

    uint8_t result = TRUE;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	77fb      	strb	r3, [r7, #31]

    FLASH_OBProgramInitTypeDef OBconfig;
    HAL_FLASHEx_OBGetConfig(&OBconfig);
 8000ae2:	463b      	mov	r3, r7
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f001 ff23 	bl	8002930 <HAL_FLASHEx_OBGetConfig>

    printf("Провожу проверку на наличие защиты flash памяти\n");
 8000aea:	481a      	ldr	r0, [pc, #104]	; (8000b54 <flash_lock+0x7c>)
 8000aec:	f004 f89e 	bl	8004c2c <puts>
    uint8_t flash_already_lock = flash_ob_check();
 8000af0:	f7ff ffce 	bl	8000a90 <flash_ob_check>
 8000af4:	4603      	mov	r3, r0
 8000af6:	77bb      	strb	r3, [r7, #30]
    if (!flash_already_lock) {
 8000af8:	7fbb      	ldrb	r3, [r7, #30]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d122      	bne.n	8000b44 <flash_lock+0x6c>
        HAL_FLASH_Unlock();
 8000afe:	f001 fc97 	bl	8002430 <HAL_FLASH_Unlock>
        HAL_FLASH_OB_Unlock();
 8000b02:	f001 fcc7 	bl	8002494 <HAL_FLASH_OB_Unlock>

        OBconfig.OptionType = OPTIONBYTE_RDP;
 8000b06:	2302      	movs	r3, #2
 8000b08:	603b      	str	r3, [r7, #0]
        /* Защита от чтения прошивки */
        OBconfig.RDPLevel = ((uint8_t)0xBB);
 8000b0a:	23bb      	movs	r3, #187	; 0xbb
 8000b0c:	613b      	str	r3, [r7, #16]

//        /* Защита от случайного изменения прошивки */
//        OBconfig.WRPState = OB_WRPSTATE_ENABLE;
//        OBconfig.WRPSector = OB_WRP_SECTOR_All;

        HAL_FLASHEx_OBProgram(&OBconfig);
 8000b0e:	463b      	mov	r3, r7
 8000b10:	4618      	mov	r0, r3
 8000b12:	f001 fe9f 	bl	8002854 <HAL_FLASHEx_OBProgram>

        if (HAL_FLASHEx_OBProgram(&OBconfig) != HAL_OK) {
 8000b16:	463b      	mov	r3, r7
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f001 fe9b 	bl	8002854 <HAL_FLASHEx_OBProgram>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <flash_lock+0x50>
            result = FALSE;
 8000b24:	2300      	movs	r3, #0
 8000b26:	77fb      	strb	r3, [r7, #31]
        }

        HAL_FLASH_OB_Lock();
 8000b28:	f001 fcd0 	bl	80024cc <HAL_FLASH_OB_Lock>
        HAL_FLASH_Lock();
 8000b2c:	f001 fca2 	bl	8002474 <HAL_FLASH_Lock>
//        /* Перезагрузка регистров option bytes */
        HAL_FLASH_OB_Launch();
 8000b30:	f001 fcdc 	bl	80024ec <HAL_FLASH_OB_Launch>

        HAL_FLASHEx_OBGetConfig(&OBconfig);
 8000b34:	463b      	mov	r3, r7
 8000b36:	4618      	mov	r0, r3
 8000b38:	f001 fefa 	bl	8002930 <HAL_FLASHEx_OBGetConfig>
        printf("Защита flash памяти успешно включена\n");
 8000b3c:	4806      	ldr	r0, [pc, #24]	; (8000b58 <flash_lock+0x80>)
 8000b3e:	f004 f875 	bl	8004c2c <puts>
 8000b42:	e002      	b.n	8000b4a <flash_lock+0x72>
    } else {
        printf("Защита flash памяти уже включена, отмена команды\n");
 8000b44:	4805      	ldr	r0, [pc, #20]	; (8000b5c <flash_lock+0x84>)
 8000b46:	f004 f871 	bl	8004c2c <puts>
    }

    return result;
 8000b4a:	7ffb      	ldrb	r3, [r7, #31]
}
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	3720      	adds	r7, #32
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	08006170 	.word	0x08006170
 8000b58:	080061c4 	.word	0x080061c4
 8000b5c:	08006204 	.word	0x08006204

08000b60 <flash_unlock>:
 * \note      После снятия защиты происходит обязательное полное стирания flash памяти,
 *            как следствие необходимо заново прошивать прошивку и загрузчик.
 *            Стирание происходит аппаратно, и его невозможно предотвратить
 */
void
flash_unlock(void) {
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b088      	sub	sp, #32
 8000b64:	af00      	add	r7, sp, #0
    FLASH_OBProgramInitTypeDef OBconfig;

    printf("Провожу проверку на наличие защиты flash памяти\n");
 8000b66:	4814      	ldr	r0, [pc, #80]	; (8000bb8 <flash_unlock+0x58>)
 8000b68:	f004 f860 	bl	8004c2c <puts>
    uint8_t flash_lock = flash_ob_check();
 8000b6c:	f7ff ff90 	bl	8000a90 <flash_ob_check>
 8000b70:	4603      	mov	r3, r0
 8000b72:	77fb      	strb	r3, [r7, #31]
    if (flash_lock) {
 8000b74:	7ffb      	ldrb	r3, [r7, #31]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d017      	beq.n	8000baa <flash_unlock+0x4a>
        printf("Отключаю защиту flash памяти\n");
 8000b7a:	4810      	ldr	r0, [pc, #64]	; (8000bbc <flash_unlock+0x5c>)
 8000b7c:	f004 f856 	bl	8004c2c <puts>

        HAL_FLASH_Unlock();
 8000b80:	f001 fc56 	bl	8002430 <HAL_FLASH_Unlock>
        HAL_FLASH_OB_Unlock();
 8000b84:	f001 fc86 	bl	8002494 <HAL_FLASH_OB_Unlock>

        OBconfig.OptionType = OPTIONBYTE_RDP | OPTIONBYTE_WRP;
 8000b88:	2303      	movs	r3, #3
 8000b8a:	603b      	str	r3, [r7, #0]

        /* Защита от чтения прошивки */
        OBconfig.RDPLevel = OB_RDP_LEVEL_0;
 8000b8c:	23aa      	movs	r3, #170	; 0xaa
 8000b8e:	613b      	str	r3, [r7, #16]

        /* Защита от случайного изменения прошивки */
        OBconfig.WRPState = OB_WRPSTATE_DISABLE;
 8000b90:	2300      	movs	r3, #0
 8000b92:	607b      	str	r3, [r7, #4]

        HAL_FLASHEx_OBProgram(&OBconfig);
 8000b94:	463b      	mov	r3, r7
 8000b96:	4618      	mov	r0, r3
 8000b98:	f001 fe5c 	bl	8002854 <HAL_FLASHEx_OBProgram>
        HAL_FLASH_OB_Lock();
 8000b9c:	f001 fc96 	bl	80024cc <HAL_FLASH_OB_Lock>
        HAL_FLASH_Lock();
 8000ba0:	f001 fc68 	bl	8002474 <HAL_FLASH_Lock>
        /* Перезагрузка регистров option bytes */
        HAL_FLASH_OB_Launch();
 8000ba4:	f001 fca2 	bl	80024ec <HAL_FLASH_OB_Launch>
    } else {
        printf("Защита flash памяти уже выключена, отмена команды\n");
    }
}
 8000ba8:	e002      	b.n	8000bb0 <flash_unlock+0x50>
        printf("Защита flash памяти уже выключена, отмена команды\n");
 8000baa:	4805      	ldr	r0, [pc, #20]	; (8000bc0 <flash_unlock+0x60>)
 8000bac:	f004 f83e 	bl	8004c2c <puts>
}
 8000bb0:	bf00      	nop
 8000bb2:	3720      	adds	r7, #32
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	08006170 	.word	0x08006170
 8000bbc:	0800625c 	.word	0x0800625c
 8000bc0:	08006290 	.word	0x08006290

08000bc4 <erase_program>:


/**
 * \brief     Эта функция служит для стирания пользовательской прошивки из flash памяти
 */
void erase_program(void) {
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
    erase_flash(FLASH_SECTOR_NUMBER);
 8000bc8:	2004      	movs	r0, #4
 8000bca:	f000 f8ed 	bl	8000da8 <erase_flash>
}
 8000bce:	bf00      	nop
 8000bd0:	bd80      	pop	{r7, pc}
	...

08000bd4 <check_key>:

uint8_t check_key(void) {
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b084      	sub	sp, #16
 8000bd8:	af00      	add	r7, sp, #0
    uint8_t connection_try = 0;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	73fb      	strb	r3, [r7, #15]
    uint8_t result = FALSE;
 8000bde:	2300      	movs	r3, #0
 8000be0:	73bb      	strb	r3, [r7, #14]

    uint32_t encrypted_test_word = 0;
 8000be2:	2300      	movs	r3, #0
 8000be4:	607b      	str	r3, [r7, #4]

    do {

        get_key_status_t get_key_result;
        uint8_t key_received_successfully = FALSE;
 8000be6:	2300      	movs	r3, #0
 8000be8:	737b      	strb	r3, [r7, #13]

        /* Получаем пакет типа "key" */
        while (connection_try < MAX_USART_CONNECTION_TRY) {
 8000bea:	e015      	b.n	8000c18 <check_key+0x44>
            get_key_result = usart_get_key(&encrypted_test_word);
 8000bec:	1d3b      	adds	r3, r7, #4
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f000 fc64 	bl	80014bc <usart_get_key>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	733b      	strb	r3, [r7, #12]

            if (get_key_result != GET_KEY_OK) {
 8000bf8:	7b3b      	ldrb	r3, [r7, #12]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d003      	beq.n	8000c06 <check_key+0x32>
                usart_send_status(STATUS_NACK);
 8000bfe:	2000      	movs	r0, #0
 8000c00:	f000 fa98 	bl	8001134 <usart_send_status>
 8000c04:	e005      	b.n	8000c12 <check_key+0x3e>
            } else {
                usart_send_status(STATUS_ACK);
 8000c06:	2001      	movs	r0, #1
 8000c08:	f000 fa94 	bl	8001134 <usart_send_status>
                key_received_successfully = TRUE;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	737b      	strb	r3, [r7, #13]
                break;
 8000c10:	e005      	b.n	8000c1e <check_key+0x4a>
            }

            connection_try++;
 8000c12:	7bfb      	ldrb	r3, [r7, #15]
 8000c14:	3301      	adds	r3, #1
 8000c16:	73fb      	strb	r3, [r7, #15]
        while (connection_try < MAX_USART_CONNECTION_TRY) {
 8000c18:	7bfb      	ldrb	r3, [r7, #15]
 8000c1a:	2b09      	cmp	r3, #9
 8000c1c:	d9e6      	bls.n	8000bec <check_key+0x18>
        }

        connection_try = 0;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	73fb      	strb	r3, [r7, #15]

        if (!key_received_successfully) {
 8000c22:	7b7b      	ldrb	r3, [r7, #13]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d103      	bne.n	8000c30 <check_key+0x5c>
            printf("Ошибка при получении пакета \"key\"\n");
 8000c28:	481d      	ldr	r0, [pc, #116]	; (8000ca0 <check_key+0xcc>)
 8000c2a:	f003 ffff 	bl	8004c2c <puts>
            break;
 8000c2e:	e031      	b.n	8000c94 <check_key+0xc0>
        }

        /* Расшифровываем тестовое слово ключом шифрования */
        uint8_t temp_arr[NUMBER_OF_BYTES_TEST_WORD];
        temp_arr[0] = (encrypted_test_word >> 24) & 0xFF;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	0e1b      	lsrs	r3, r3, #24
 8000c34:	b2db      	uxtb	r3, r3
 8000c36:	703b      	strb	r3, [r7, #0]
        temp_arr[1] = (encrypted_test_word >> 16) & 0xFF;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	0c1b      	lsrs	r3, r3, #16
 8000c3c:	b2db      	uxtb	r3, r3
 8000c3e:	707b      	strb	r3, [r7, #1]
        temp_arr[2] = (encrypted_test_word >> 8) & 0xFF;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	0a1b      	lsrs	r3, r3, #8
 8000c44:	b2db      	uxtb	r3, r3
 8000c46:	70bb      	strb	r3, [r7, #2]
        temp_arr[3] = encrypted_test_word & 0xFF;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	b2db      	uxtb	r3, r3
 8000c4c:	70fb      	strb	r3, [r7, #3]

        decrypt_data(encryption_key, temp_arr, NUMBER_OF_BYTES_TEST_WORD);
 8000c4e:	4b15      	ldr	r3, [pc, #84]	; (8000ca4 <check_key+0xd0>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4639      	mov	r1, r7
 8000c54:	2204      	movs	r2, #4
 8000c56:	4618      	mov	r0, r3
 8000c58:	f000 fce4 	bl	8001624 <decrypt_data>

        /* Делаем проверку тестового слова */
        uint8_t test_word_finded = find_word(temp_arr, test_word);
 8000c5c:	463b      	mov	r3, r7
 8000c5e:	4912      	ldr	r1, [pc, #72]	; (8000ca8 <check_key+0xd4>)
 8000c60:	4618      	mov	r0, r3
 8000c62:	f000 fd0a 	bl	800167a <find_word>
 8000c66:	4603      	mov	r3, r0
 8000c68:	72fb      	strb	r3, [r7, #11]

        if (test_word_finded) {
 8000c6a:	7afb      	ldrb	r3, [r7, #11]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d009      	beq.n	8000c84 <check_key+0xb0>
            usart_send_response(RESPONSE_OK);
 8000c70:	f04f 30ff 	mov.w	r0, #4294967295
 8000c74:	f000 f9fc 	bl	8001070 <usart_send_response>
            printf("Ключи шифрования соответствуют!\n");
 8000c78:	480c      	ldr	r0, [pc, #48]	; (8000cac <check_key+0xd8>)
 8000c7a:	f003 ffd7 	bl	8004c2c <puts>
            result = TRUE;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	73bb      	strb	r3, [r7, #14]
 8000c82:	e007      	b.n	8000c94 <check_key+0xc0>
        } else {
            usart_send_response(RESPONSE_FAIL);
 8000c84:	f04f 3033 	mov.w	r0, #858993459	; 0x33333333
 8000c88:	f000 f9f2 	bl	8001070 <usart_send_response>
            printf("Ключи шифрования НЕ соответствуют!\n");
 8000c8c:	4808      	ldr	r0, [pc, #32]	; (8000cb0 <check_key+0xdc>)
 8000c8e:	f003 ffcd 	bl	8004c2c <puts>
            break;
 8000c92:	bf00      	nop
        }

    } while (0);

    return result;
 8000c94:	7bbb      	ldrb	r3, [r7, #14]
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	3710      	adds	r7, #16
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	08005e0c 	.word	0x08005e0c
 8000ca4:	200000d8 	.word	0x200000d8
 8000ca8:	08006d2c 	.word	0x08006d2c
 8000cac:	080062e8 	.word	0x080062e8
 8000cb0:	08006324 	.word	0x08006324

08000cb4 <execute_command>:
 * \brief     Эта функция служит для выполнения выбранной команды
 * \param[in] command: Какую команду нужно выполнить
 * \return    result: Результат выполнения команды: TRUE (команда выполнена успешно), FALSE (ошибка во время выполнения команды)
 */
uint8_t
execute_command(cmd_t command) {
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b084      	sub	sp, #16
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	4603      	mov	r3, r0
 8000cbc:	71fb      	strb	r3, [r7, #7]
    uint8_t result = FALSE;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	73fb      	strb	r3, [r7, #15]

    switch (command) {
 8000cc2:	79fb      	ldrb	r3, [r7, #7]
 8000cc4:	3b01      	subs	r3, #1
 8000cc6:	2b07      	cmp	r3, #7
 8000cc8:	d852      	bhi.n	8000d70 <execute_command+0xbc>
 8000cca:	a201      	add	r2, pc, #4	; (adr r2, 8000cd0 <execute_command+0x1c>)
 8000ccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cd0:	08000cf1 	.word	0x08000cf1
 8000cd4:	08000d01 	.word	0x08000d01
 8000cd8:	08000d11 	.word	0x08000d11
 8000cdc:	08000d21 	.word	0x08000d21
 8000ce0:	08000d31 	.word	0x08000d31
 8000ce4:	08000d41 	.word	0x08000d41
 8000ce8:	08000d51 	.word	0x08000d51
 8000cec:	08000d61 	.word	0x08000d61
        case CMD_UPDATE_FIRMWARE:
            printf("Выбрана команда для обновления прошивки, выполняю...\n");
 8000cf0:	4824      	ldr	r0, [pc, #144]	; (8000d84 <execute_command+0xd0>)
 8000cf2:	f003 ff9b 	bl	8004c2c <puts>
            result = update_firmware();
 8000cf6:	f7ff fd7d 	bl	80007f4 <update_firmware>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	73fb      	strb	r3, [r7, #15]
            break;
 8000cfe:	e03b      	b.n	8000d78 <execute_command+0xc4>
        case CMD_SET_KEY:
            printf("Выбрана команда для задания пароля, выполняю...\n");
 8000d00:	4821      	ldr	r0, [pc, #132]	; (8000d88 <execute_command+0xd4>)
 8000d02:	f003 ff93 	bl	8004c2c <puts>
            result = set_key();
 8000d06:	f7ff fd01 	bl	800070c <set_key>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	73fb      	strb	r3, [r7, #15]
            break;
 8000d0e:	e033      	b.n	8000d78 <execute_command+0xc4>
        case CMD_FLASH_OB_CHECK:
            printf("Выбрана команда для проверки защиты flash памяти, выполняю...\n");
 8000d10:	481e      	ldr	r0, [pc, #120]	; (8000d8c <execute_command+0xd8>)
 8000d12:	f003 ff8b 	bl	8004c2c <puts>
            flash_ob_check();
 8000d16:	f7ff febb 	bl	8000a90 <flash_ob_check>
            result = TRUE;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	73fb      	strb	r3, [r7, #15]
            break;
 8000d1e:	e02b      	b.n	8000d78 <execute_command+0xc4>
        case CMD_FLASH_LOCK:
            printf("Выбрана команда для установки защиты flash памяти, выполняю...\n");
 8000d20:	481b      	ldr	r0, [pc, #108]	; (8000d90 <execute_command+0xdc>)
 8000d22:	f003 ff83 	bl	8004c2c <puts>
            result = flash_lock();;
 8000d26:	f7ff fed7 	bl	8000ad8 <flash_lock>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	73fb      	strb	r3, [r7, #15]
            break;
 8000d2e:	e023      	b.n	8000d78 <execute_command+0xc4>
        case CMD_FLASH_UNLOCK:
            printf("Выбрана команда для снятия защиты flash памяти, выполняю...\n");
 8000d30:	4818      	ldr	r0, [pc, #96]	; (8000d94 <execute_command+0xe0>)
 8000d32:	f003 ff7b 	bl	8004c2c <puts>
            flash_unlock();
 8000d36:	f7ff ff13 	bl	8000b60 <flash_unlock>
            result = TRUE;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	73fb      	strb	r3, [r7, #15]
            break;
 8000d3e:	e01b      	b.n	8000d78 <execute_command+0xc4>
        case CMD_GET_ID:
            printf("Выбрана команда для получения UID, выполняю...\n");
 8000d40:	4815      	ldr	r0, [pc, #84]	; (8000d98 <execute_command+0xe4>)
 8000d42:	f003 ff73 	bl	8004c2c <puts>
            send_uid();
 8000d46:	f7ff fcc7 	bl	80006d8 <send_uid>
            result = TRUE;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	73fb      	strb	r3, [r7, #15]
            break;
 8000d4e:	e013      	b.n	8000d78 <execute_command+0xc4>
        case CMD_CHECK_KEY:
            printf("Выбрана команда для проверки соответствия ключей шифрования, выполняю...\n");
 8000d50:	4812      	ldr	r0, [pc, #72]	; (8000d9c <execute_command+0xe8>)
 8000d52:	f003 ff6b 	bl	8004c2c <puts>
            result = check_key();
 8000d56:	f7ff ff3d 	bl	8000bd4 <check_key>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	73fb      	strb	r3, [r7, #15]
            break;
 8000d5e:	e00b      	b.n	8000d78 <execute_command+0xc4>
        case CMD_ERASE_PROGRAM:
            printf("Выбрана команда для стирания пользовательской прошивки из flash памяти, выполняю...\n");
 8000d60:	480f      	ldr	r0, [pc, #60]	; (8000da0 <execute_command+0xec>)
 8000d62:	f003 ff63 	bl	8004c2c <puts>
            erase_program();
 8000d66:	f7ff ff2d 	bl	8000bc4 <erase_program>
            result = TRUE;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	73fb      	strb	r3, [r7, #15]
            break;
 8000d6e:	e003      	b.n	8000d78 <execute_command+0xc4>
        default:
            printf("Неизвестная команда\n");
 8000d70:	480c      	ldr	r0, [pc, #48]	; (8000da4 <execute_command+0xf0>)
 8000d72:	f003 ff5b 	bl	8004c2c <puts>
            break;
 8000d76:	bf00      	nop
    }

    return result;
 8000d78:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3710      	adds	r7, #16
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	08006368 	.word	0x08006368
 8000d88:	080063c8 	.word	0x080063c8
 8000d8c:	08006420 	.word	0x08006420
 8000d90:	0800648c 	.word	0x0800648c
 8000d94:	080064fc 	.word	0x080064fc
 8000d98:	08006564 	.word	0x08006564
 8000d9c:	080065b8 	.word	0x080065b8
 8000da0:	08006640 	.word	0x08006640
 8000da4:	080066d8 	.word	0x080066d8

08000da8 <erase_flash>:
 * \param[in]   number_of_sector: Номер сектора flash памяти STM32F407xx для стирания.
 * \return      result: Результат стирания: TRUE (flash память сектора успешно очищена),
 *             FALSE (во время стирания flash памяти произошла ошибка).
 */
uint8_t
erase_flash(uint32_t number_of_sector) {
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b08a      	sub	sp, #40	; 0x28
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef hal_status;

    uint8_t result = FALSE;
 8000db0:	2300      	movs	r3, #0
 8000db2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    do {
        /* Разблокировка доступа к системной памяти */
        hal_status = HAL_FLASH_Unlock();
 8000db6:	f001 fb3b 	bl	8002430 <HAL_FLASH_Unlock>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

        if (hal_status != HAL_OK) {
 8000dc0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d003      	beq.n	8000dd0 <erase_flash+0x28>
            printf("Ошибка разблокировки памяти\n");
 8000dc8:	481c      	ldr	r0, [pc, #112]	; (8000e3c <erase_flash+0x94>)
 8000dca:	f003 ff2f 	bl	8004c2c <puts>
            break;
 8000dce:	e02f      	b.n	8000e30 <erase_flash+0x88>
        }

        /* Определение структуры, которая будет использоваться для стирания сектора памяти */
        FLASH_EraseInitTypeDef EraseInitStruct;
        uint32_t sector_error = 0;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	60fb      	str	r3, [r7, #12]

        /* Заполнение структуры */
        EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	613b      	str	r3, [r7, #16]
        EraseInitStruct.Sector = number_of_sector;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	61bb      	str	r3, [r7, #24]
        EraseInitStruct.NbSectors = 1;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	61fb      	str	r3, [r7, #28]
        EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8000de0:	2302      	movs	r3, #2
 8000de2:	623b      	str	r3, [r7, #32]

        /* Стирание сектора памяти */
        hal_status = HAL_FLASHEx_Erase(&EraseInitStruct, &sector_error);
 8000de4:	f107 020c 	add.w	r2, r7, #12
 8000de8:	f107 0310 	add.w	r3, r7, #16
 8000dec:	4611      	mov	r1, r2
 8000dee:	4618      	mov	r0, r3
 8000df0:	f001 fcc0 	bl	8002774 <HAL_FLASHEx_Erase>
 8000df4:	4603      	mov	r3, r0
 8000df6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

        if (hal_status != HAL_OK) {
 8000dfa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d003      	beq.n	8000e0a <erase_flash+0x62>
            printf("Ошибка стирания памяти\n");
 8000e02:	480f      	ldr	r0, [pc, #60]	; (8000e40 <erase_flash+0x98>)
 8000e04:	f003 ff12 	bl	8004c2c <puts>
            break;
 8000e08:	e012      	b.n	8000e30 <erase_flash+0x88>
        }

        /* Блокировка доступа к системной памяти */
        hal_status = HAL_FLASH_Lock();
 8000e0a:	f001 fb33 	bl	8002474 <HAL_FLASH_Lock>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

        if (hal_status != HAL_OK) {
 8000e14:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d003      	beq.n	8000e24 <erase_flash+0x7c>
            printf("Ошибка блокировки памяти\n");
 8000e1c:	4809      	ldr	r0, [pc, #36]	; (8000e44 <erase_flash+0x9c>)
 8000e1e:	f003 ff05 	bl	8004c2c <puts>
            break;
 8000e22:	e005      	b.n	8000e30 <erase_flash+0x88>
        }

        printf("Стирание памяти - успешно!\n");
 8000e24:	4808      	ldr	r0, [pc, #32]	; (8000e48 <erase_flash+0xa0>)
 8000e26:	f003 ff01 	bl	8004c2c <puts>
        result = TRUE;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    } while (0);

    return result;
 8000e30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	3728      	adds	r7, #40	; 0x28
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	08006700 	.word	0x08006700
 8000e40:	08006738 	.word	0x08006738
 8000e44:	08006764 	.word	0x08006764
 8000e48:	08006794 	.word	0x08006794

08000e4c <write_data_block_to_flash>:
 * \param[in]  data_len: Размер блока данных.
 * \param[in]  flash_address: Адрес flash памяти, в который происходит запись.
 * \return     result: Результат записи: TRUE (блок данных записан успешно), FALSE (ошибка записи)
 */
uint8_t
write_data_block_to_flash(uint8_t* data, uint32_t data_len, uint32_t flash_address) {
 8000e4c:	b5b0      	push	{r4, r5, r7, lr}
 8000e4e:	b088      	sub	sp, #32
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	60f8      	str	r0, [r7, #12]
 8000e54:	60b9      	str	r1, [r7, #8]
 8000e56:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef hal_status;
    uint8_t result = FALSE;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	77fb      	strb	r3, [r7, #31]

    do {
        if (data == NULL) {
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d103      	bne.n	8000e6a <write_data_block_to_flash+0x1e>
            printf("Пустой указатель\n");
 8000e62:	4822      	ldr	r0, [pc, #136]	; (8000eec <write_data_block_to_flash+0xa0>)
 8000e64:	f003 fee2 	bl	8004c2c <puts>
            break;
 8000e68:	e03a      	b.n	8000ee0 <write_data_block_to_flash+0x94>
        }

        /* Разблокировка доступа к системной памяти */
        hal_status = HAL_FLASH_Unlock();
 8000e6a:	f001 fae1 	bl	8002430 <HAL_FLASH_Unlock>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	75fb      	strb	r3, [r7, #23]

        if (hal_status != HAL_OK) {
 8000e72:	7dfb      	ldrb	r3, [r7, #23]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d003      	beq.n	8000e80 <write_data_block_to_flash+0x34>
            printf("Ошибка разблокировки памяти\n");
 8000e78:	481d      	ldr	r0, [pc, #116]	; (8000ef0 <write_data_block_to_flash+0xa4>)
 8000e7a:	f003 fed7 	bl	8004c2c <puts>
            break;
 8000e7e:	e02f      	b.n	8000ee0 <write_data_block_to_flash+0x94>
        }

        /* Запись блока во flash */
        for (uint32_t i = 0; i < data_len; i++) {
 8000e80:	2300      	movs	r3, #0
 8000e82:	61bb      	str	r3, [r7, #24]
 8000e84:	e01b      	b.n	8000ebe <write_data_block_to_flash+0x72>
            hal_status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, (flash_address + i), data[i]);
 8000e86:	687a      	ldr	r2, [r7, #4]
 8000e88:	69bb      	ldr	r3, [r7, #24]
 8000e8a:	18d1      	adds	r1, r2, r3
 8000e8c:	68fa      	ldr	r2, [r7, #12]
 8000e8e:	69bb      	ldr	r3, [r7, #24]
 8000e90:	4413      	add	r3, r2
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	b2db      	uxtb	r3, r3
 8000e96:	2200      	movs	r2, #0
 8000e98:	461c      	mov	r4, r3
 8000e9a:	4615      	mov	r5, r2
 8000e9c:	4622      	mov	r2, r4
 8000e9e:	462b      	mov	r3, r5
 8000ea0:	2000      	movs	r0, #0
 8000ea2:	f001 fa71 	bl	8002388 <HAL_FLASH_Program>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	75fb      	strb	r3, [r7, #23]

            if (hal_status != HAL_OK) {
 8000eaa:	7dfb      	ldrb	r3, [r7, #23]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d003      	beq.n	8000eb8 <write_data_block_to_flash+0x6c>
                printf("Ошибка при записи байта в память\n");
 8000eb0:	4810      	ldr	r0, [pc, #64]	; (8000ef4 <write_data_block_to_flash+0xa8>)
 8000eb2:	f003 febb 	bl	8004c2c <puts>
                break;
 8000eb6:	e006      	b.n	8000ec6 <write_data_block_to_flash+0x7a>
        for (uint32_t i = 0; i < data_len; i++) {
 8000eb8:	69bb      	ldr	r3, [r7, #24]
 8000eba:	3301      	adds	r3, #1
 8000ebc:	61bb      	str	r3, [r7, #24]
 8000ebe:	69ba      	ldr	r2, [r7, #24]
 8000ec0:	68bb      	ldr	r3, [r7, #8]
 8000ec2:	429a      	cmp	r2, r3
 8000ec4:	d3df      	bcc.n	8000e86 <write_data_block_to_flash+0x3a>
            }
        }

        /* Блокировка доступа к системной памяти */
        hal_status = HAL_FLASH_Lock();
 8000ec6:	f001 fad5 	bl	8002474 <HAL_FLASH_Lock>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	75fb      	strb	r3, [r7, #23]

        if (hal_status != HAL_OK) {
 8000ece:	7dfb      	ldrb	r3, [r7, #23]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d003      	beq.n	8000edc <write_data_block_to_flash+0x90>
            printf("Ошибка блокировки памяти\n");
 8000ed4:	4808      	ldr	r0, [pc, #32]	; (8000ef8 <write_data_block_to_flash+0xac>)
 8000ed6:	f003 fea9 	bl	8004c2c <puts>
            break;
 8000eda:	e001      	b.n	8000ee0 <write_data_block_to_flash+0x94>
        }

        result = TRUE;
 8000edc:	2301      	movs	r3, #1
 8000ede:	77fb      	strb	r3, [r7, #31]
    } while (0);

    return result;
 8000ee0:	7ffb      	ldrb	r3, [r7, #31]
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	3720      	adds	r7, #32
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bdb0      	pop	{r4, r5, r7, pc}
 8000eea:	bf00      	nop
 8000eec:	080067c4 	.word	0x080067c4
 8000ef0:	08006700 	.word	0x08006700
 8000ef4:	080067e4 	.word	0x080067e4
 8000ef8:	08006764 	.word	0x08006764

08000efc <check_settings>:
/**
 * \brief       Функция, которая считывает данные из flash памяти и проверяет их корректность путем вычисления CRC32.
 * \return      result: Результат выполение операции: TRUE (успех), FALSE (неудача).
 */
uint8_t
check_settings(void) {
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b088      	sub	sp, #32
 8000f00:	af00      	add	r7, sp, #0
    uint8_t result = FALSE;
 8000f02:	2300      	movs	r3, #0
 8000f04:	77fb      	strb	r3, [r7, #31]
    uint32_t settings_buffer[NUMBER_OF_SETTINGS_WORDS];
    uint32_t settings_address_offset = 0;
 8000f06:	2300      	movs	r3, #0
 8000f08:	61bb      	str	r3, [r7, #24]

    /* Считывает данные с flash памяти по 4 байта */
    for (uint32_t i = 0; i < NUMBER_OF_SETTINGS_WORDS; i++) {
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	617b      	str	r3, [r7, #20]
 8000f0e:	e011      	b.n	8000f34 <check_settings+0x38>
        settings_buffer[i] = (*(__IO uint32_t*)(MEMORY_ADDRESS_WITH_SETTINGS + settings_address_offset));
 8000f10:	69bb      	ldr	r3, [r7, #24]
 8000f12:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8000f16:	f503 4340 	add.w	r3, r3, #49152	; 0xc000
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	009b      	lsls	r3, r3, #2
 8000f20:	3320      	adds	r3, #32
 8000f22:	443b      	add	r3, r7
 8000f24:	f843 2c1c 	str.w	r2, [r3, #-28]
        settings_address_offset += FLASH_BLOCK_OFFSET;
 8000f28:	69bb      	ldr	r3, [r7, #24]
 8000f2a:	3304      	adds	r3, #4
 8000f2c:	61bb      	str	r3, [r7, #24]
    for (uint32_t i = 0; i < NUMBER_OF_SETTINGS_WORDS; i++) {
 8000f2e:	697b      	ldr	r3, [r7, #20]
 8000f30:	3301      	adds	r3, #1
 8000f32:	617b      	str	r3, [r7, #20]
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	2b02      	cmp	r3, #2
 8000f38:	d9ea      	bls.n	8000f10 <check_settings+0x14>
    }

    /* Проверяем целостность данных путем вычисления CRC32, сам CRC32 в расчет не идет */
    uint32_t calculated_crc = HAL_CRC_Calculate(&hcrc, settings_buffer, NUMBER_OF_SETTINGS_WORDS - 1);
 8000f3a:	1d3b      	adds	r3, r7, #4
 8000f3c:	2202      	movs	r2, #2
 8000f3e:	4619      	mov	r1, r3
 8000f40:	480a      	ldr	r0, [pc, #40]	; (8000f6c <check_settings+0x70>)
 8000f42:	f001 f95c 	bl	80021fe <HAL_CRC_Calculate>
 8000f46:	6138      	str	r0, [r7, #16]

    if (calculated_crc == settings_buffer[NUMBER_OF_SETTINGS_WORDS - 1]) {
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	693a      	ldr	r2, [r7, #16]
 8000f4c:	429a      	cmp	r2, r3
 8000f4e:	d107      	bne.n	8000f60 <check_settings+0x64>
        encryption_key = settings_buffer[0];
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	4a07      	ldr	r2, [pc, #28]	; (8000f70 <check_settings+0x74>)
 8000f54:	6013      	str	r3, [r2, #0]
        secret_encryption_key = settings_buffer[1];
 8000f56:	68bb      	ldr	r3, [r7, #8]
 8000f58:	4a06      	ldr	r2, [pc, #24]	; (8000f74 <check_settings+0x78>)
 8000f5a:	6013      	str	r3, [r2, #0]
        result = TRUE;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	77fb      	strb	r3, [r7, #31]
    }

    return result;
 8000f60:	7ffb      	ldrb	r3, [r7, #31]
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3720      	adds	r7, #32
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	200000d0 	.word	0x200000d0
 8000f70:	200000d8 	.word	0x200000d8
 8000f74:	200000dc 	.word	0x200000dc

08000f78 <set_settings>:
 *             "ключ шифрования прошивки" (изменяем), "ключ шифрования для смены ключа шифрования прошивки" (неизменяем), CRC32 (для проверки)
 * \param[in]  key: Ключ шифрования прошивки.
 * \return     result: Результат записи настроек: TRUE (настройки успешно записаны), FALSE (произошла ошибка записи настроек)
 */
uint8_t
set_settings(uint32_t key) {
 8000f78:	b5b0      	push	{r4, r5, r7, lr}
 8000f7a:	b08a      	sub	sp, #40	; 0x28
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef hal_status;
    uint8_t result = FALSE;
 8000f80:	2300      	movs	r3, #0
 8000f82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    uint32_t settings_buffer[NUMBER_OF_SETTINGS_WORDS];
    uint32_t settings_address_offset = 0;
 8000f86:	2300      	movs	r3, #0
 8000f88:	623b      	str	r3, [r7, #32]

    do {
        printf("Начинаю запись настроек по умолчанию во flash\n");
 8000f8a:	4832      	ldr	r0, [pc, #200]	; (8001054 <set_settings+0xdc>)
 8000f8c:	f003 fe4e 	bl	8004c2c <puts>
        /* Стираем весь сектор с настройками, только после стирания мы можем записать данные в него */
        uint8_t erase_succesfull = erase_flash(MEMORY_SECTOR_WITH_SETTINGS);
 8000f90:	2003      	movs	r0, #3
 8000f92:	f7ff ff09 	bl	8000da8 <erase_flash>
 8000f96:	4603      	mov	r3, r0
 8000f98:	76fb      	strb	r3, [r7, #27]

        if (!erase_succesfull) {
 8000f9a:	7efb      	ldrb	r3, [r7, #27]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d052      	beq.n	8001046 <set_settings+0xce>
            break;
        }

        /* Формируем буфер с настройками для записи во flash */
        settings_buffer[0] = key;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	60fb      	str	r3, [r7, #12]
        settings_buffer[1] = DEFAULT_SECRET_ENCRYPTION_KEY;
 8000fa4:	4b2c      	ldr	r3, [pc, #176]	; (8001058 <set_settings+0xe0>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	613b      	str	r3, [r7, #16]
        settings_buffer[2] = HAL_CRC_Calculate(&hcrc, settings_buffer, NUMBER_OF_SETTINGS_WORDS - 1);
 8000faa:	f107 030c 	add.w	r3, r7, #12
 8000fae:	2202      	movs	r2, #2
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	482a      	ldr	r0, [pc, #168]	; (800105c <set_settings+0xe4>)
 8000fb4:	f001 f923 	bl	80021fe <HAL_CRC_Calculate>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	617b      	str	r3, [r7, #20]

        /* Записываем во flash память настройки по умолчанию */
        hal_status = HAL_FLASH_Unlock();
 8000fbc:	f001 fa38 	bl	8002430 <HAL_FLASH_Unlock>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	76bb      	strb	r3, [r7, #26]

        if (hal_status != HAL_OK) {
 8000fc4:	7ebb      	ldrb	r3, [r7, #26]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d003      	beq.n	8000fd2 <set_settings+0x5a>
            printf("Ошибка разблокировки памяти\n");
 8000fca:	4825      	ldr	r0, [pc, #148]	; (8001060 <set_settings+0xe8>)
 8000fcc:	f003 fe2e 	bl	8004c2c <puts>
            break;
 8000fd0:	e03a      	b.n	8001048 <set_settings+0xd0>
        }

        /* Запись настроек во flash */
        for (uint32_t i = 0; i < NUMBER_OF_SETTINGS_WORDS; i++) {
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	61fb      	str	r3, [r7, #28]
 8000fd6:	e021      	b.n	800101c <set_settings+0xa4>
            hal_status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,
 8000fd8:	6a3b      	ldr	r3, [r7, #32]
 8000fda:	f103 6100 	add.w	r1, r3, #134217728	; 0x8000000
 8000fde:	f501 4140 	add.w	r1, r1, #49152	; 0xc000
                                           MEMORY_ADDRESS_WITH_SETTINGS + settings_address_offset, settings_buffer[i]);
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	009b      	lsls	r3, r3, #2
 8000fe6:	3328      	adds	r3, #40	; 0x28
 8000fe8:	443b      	add	r3, r7
 8000fea:	f853 3c1c 	ldr.w	r3, [r3, #-28]
            hal_status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,
 8000fee:	2200      	movs	r2, #0
 8000ff0:	461c      	mov	r4, r3
 8000ff2:	4615      	mov	r5, r2
 8000ff4:	4622      	mov	r2, r4
 8000ff6:	462b      	mov	r3, r5
 8000ff8:	2002      	movs	r0, #2
 8000ffa:	f001 f9c5 	bl	8002388 <HAL_FLASH_Program>
 8000ffe:	4603      	mov	r3, r0
 8001000:	76bb      	strb	r3, [r7, #26]

            if (hal_status != HAL_OK) {
 8001002:	7ebb      	ldrb	r3, [r7, #26]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d003      	beq.n	8001010 <set_settings+0x98>
                printf("Ошибка при записи слова настроек в память\n");
 8001008:	4816      	ldr	r0, [pc, #88]	; (8001064 <set_settings+0xec>)
 800100a:	f003 fe0f 	bl	8004c2c <puts>
                break;
 800100e:	e008      	b.n	8001022 <set_settings+0xaa>
            }

            settings_address_offset += FLASH_BLOCK_OFFSET;
 8001010:	6a3b      	ldr	r3, [r7, #32]
 8001012:	3304      	adds	r3, #4
 8001014:	623b      	str	r3, [r7, #32]
        for (uint32_t i = 0; i < NUMBER_OF_SETTINGS_WORDS; i++) {
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	3301      	adds	r3, #1
 800101a:	61fb      	str	r3, [r7, #28]
 800101c:	69fb      	ldr	r3, [r7, #28]
 800101e:	2b02      	cmp	r3, #2
 8001020:	d9da      	bls.n	8000fd8 <set_settings+0x60>
        }

        /* Блокировка доступа к системной памяти */
        hal_status = HAL_FLASH_Lock();
 8001022:	f001 fa27 	bl	8002474 <HAL_FLASH_Lock>
 8001026:	4603      	mov	r3, r0
 8001028:	76bb      	strb	r3, [r7, #26]

        if (hal_status != HAL_OK) {
 800102a:	7ebb      	ldrb	r3, [r7, #26]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d003      	beq.n	8001038 <set_settings+0xc0>
            printf("Ошибка блокировки памяти\n");
 8001030:	480d      	ldr	r0, [pc, #52]	; (8001068 <set_settings+0xf0>)
 8001032:	f003 fdfb 	bl	8004c2c <puts>
            break;
 8001036:	e007      	b.n	8001048 <set_settings+0xd0>
        }

        printf("Запись настроек в память - успешно!\n");
 8001038:	480c      	ldr	r0, [pc, #48]	; (800106c <set_settings+0xf4>)
 800103a:	f003 fdf7 	bl	8004c2c <puts>

        result = TRUE;
 800103e:	2301      	movs	r3, #1
 8001040:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001044:	e000      	b.n	8001048 <set_settings+0xd0>
            break;
 8001046:	bf00      	nop
    } while (0);

    return result;
 8001048:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800104c:	4618      	mov	r0, r3
 800104e:	3728      	adds	r7, #40	; 0x28
 8001050:	46bd      	mov	sp, r7
 8001052:	bdb0      	pop	{r4, r5, r7, pc}
 8001054:	08006820 	.word	0x08006820
 8001058:	1fff7a14 	.word	0x1fff7a14
 800105c:	200000d0 	.word	0x200000d0
 8001060:	08006700 	.word	0x08006700
 8001064:	08006870 	.word	0x08006870
 8001068:	08006764 	.word	0x08006764
 800106c:	080068c0 	.word	0x080068c0

08001070 <usart_send_response>:
/**
 * \brief       Функция, посылает по USART пакет типа "response".
 * \param[in]   response_data: Данные, которые необходимо послать в пакете "response".
 */
void
usart_send_response(uint32_t response_data) {
 8001070:	b580      	push	{r7, lr}
 8001072:	b088      	sub	sp, #32
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
    uint8_t response_buff_u8[RESPONSE_SIZE];
    uint32_t response_word_plus_data[(RESPONSE_SIZE / 4) - 1];
    uint32_t response_crc = 0;
 8001078:	2300      	movs	r3, #0
 800107a:	61fb      	str	r3, [r7, #28]

    /* Формируем начало посылки */
    response_buff_u8[0] = response_word[0];
 800107c:	4b29      	ldr	r3, [pc, #164]	; (8001124 <usart_send_response+0xb4>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	743b      	strb	r3, [r7, #16]
    response_buff_u8[1] = response_word[1];
 8001082:	4b28      	ldr	r3, [pc, #160]	; (8001124 <usart_send_response+0xb4>)
 8001084:	785b      	ldrb	r3, [r3, #1]
 8001086:	747b      	strb	r3, [r7, #17]
    response_buff_u8[2] = response_word[2];
 8001088:	4b26      	ldr	r3, [pc, #152]	; (8001124 <usart_send_response+0xb4>)
 800108a:	789b      	ldrb	r3, [r3, #2]
 800108c:	74bb      	strb	r3, [r7, #18]
    response_buff_u8[3] = response_word[3];
 800108e:	4b25      	ldr	r3, [pc, #148]	; (8001124 <usart_send_response+0xb4>)
 8001090:	78db      	ldrb	r3, [r3, #3]
 8001092:	74fb      	strb	r3, [r7, #19]

    /* Формируем данные посылки */
    response_buff_u8[4] = response_data & 0xFF;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	b2db      	uxtb	r3, r3
 8001098:	753b      	strb	r3, [r7, #20]
    response_buff_u8[5] = (response_data >> 8) & 0xFF;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	0a1b      	lsrs	r3, r3, #8
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	757b      	strb	r3, [r7, #21]
    response_buff_u8[6] = (response_data >> 16) & 0xFF;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	0c1b      	lsrs	r3, r3, #16
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	75bb      	strb	r3, [r7, #22]
    response_buff_u8[7] = (response_data >> 24) & 0xFF;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	0e1b      	lsrs	r3, r3, #24
 80010ae:	b2db      	uxtb	r3, r3
 80010b0:	75fb      	strb	r3, [r7, #23]

    response_word_plus_data[0] = four_uint8t_to_one_uint32t(&response_buff_u8[0]);
 80010b2:	f107 0310 	add.w	r3, r7, #16
 80010b6:	4618      	mov	r0, r3
 80010b8:	f000 fa92 	bl	80015e0 <four_uint8t_to_one_uint32t>
 80010bc:	4603      	mov	r3, r0
 80010be:	60bb      	str	r3, [r7, #8]
    response_word_plus_data[1] = four_uint8t_to_one_uint32t(&response_buff_u8[4]);
 80010c0:	f107 0310 	add.w	r3, r7, #16
 80010c4:	3304      	adds	r3, #4
 80010c6:	4618      	mov	r0, r3
 80010c8:	f000 fa8a 	bl	80015e0 <four_uint8t_to_one_uint32t>
 80010cc:	4603      	mov	r3, r0
 80010ce:	60fb      	str	r3, [r7, #12]

    response_crc = HAL_CRC_Calculate(&hcrc, response_word_plus_data, (RESPONSE_SIZE / 4) - 1);
 80010d0:	f107 0308 	add.w	r3, r7, #8
 80010d4:	2202      	movs	r2, #2
 80010d6:	4619      	mov	r1, r3
 80010d8:	4813      	ldr	r0, [pc, #76]	; (8001128 <usart_send_response+0xb8>)
 80010da:	f001 f890 	bl	80021fe <HAL_CRC_Calculate>
 80010de:	61f8      	str	r0, [r7, #28]

    /* Формируем CRC32 посылки */
    response_buff_u8[8] = response_crc & 0xFF;
 80010e0:	69fb      	ldr	r3, [r7, #28]
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	763b      	strb	r3, [r7, #24]
    response_buff_u8[9] = (response_crc >> 8) & 0xFF;
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	0a1b      	lsrs	r3, r3, #8
 80010ea:	b2db      	uxtb	r3, r3
 80010ec:	767b      	strb	r3, [r7, #25]
    response_buff_u8[10] = (response_crc >> 16) & 0xFF;
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	0c1b      	lsrs	r3, r3, #16
 80010f2:	b2db      	uxtb	r3, r3
 80010f4:	76bb      	strb	r3, [r7, #26]
    response_buff_u8[11] = (response_crc >> 24) & 0xFF;
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	0e1b      	lsrs	r3, r3, #24
 80010fa:	b2db      	uxtb	r3, r3
 80010fc:	76fb      	strb	r3, [r7, #27]

    HAL_UART_Transmit(&huart3, response_buff_u8, RESPONSE_SIZE, HAL_MAX_DELAY);
 80010fe:	f107 0110 	add.w	r1, r7, #16
 8001102:	f04f 33ff 	mov.w	r3, #4294967295
 8001106:	220c      	movs	r2, #12
 8001108:	4808      	ldr	r0, [pc, #32]	; (800112c <usart_send_response+0xbc>)
 800110a:	f002 fc50 	bl	80039ae <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart3, (uint8_t*)"\n", 1, HAL_MAX_DELAY);
 800110e:	f04f 33ff 	mov.w	r3, #4294967295
 8001112:	2201      	movs	r2, #1
 8001114:	4906      	ldr	r1, [pc, #24]	; (8001130 <usart_send_response+0xc0>)
 8001116:	4805      	ldr	r0, [pc, #20]	; (800112c <usart_send_response+0xbc>)
 8001118:	f002 fc49 	bl	80039ae <HAL_UART_Transmit>
}
 800111c:	bf00      	nop
 800111e:	3720      	adds	r7, #32
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	08006d14 	.word	0x08006d14
 8001128:	200000d0 	.word	0x200000d0
 800112c:	2000008c 	.word	0x2000008c
 8001130:	08006900 	.word	0x08006900

08001134 <usart_send_status>:
/**
 * \brief       Функция, которая отправляет по USART пакет типа "status".
 * \param[in]  status: Одно из значений типа \ref status_t.
 */
void
usart_send_status(status_t status) {
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	4603      	mov	r3, r0
 800113c:	71fb      	strb	r3, [r7, #7]
    /* Учитывая нуль терминатор - + 1 байт */
    if (status == STATUS_ACK) {
 800113e:	79fb      	ldrb	r3, [r7, #7]
 8001140:	2b01      	cmp	r3, #1
 8001142:	d107      	bne.n	8001154 <usart_send_status+0x20>
        HAL_UART_Transmit(&huart3, (uint8_t*)ack_word, NUMBER_OF_BYTES_ACK + 1, HAL_MAX_DELAY);
 8001144:	f04f 33ff 	mov.w	r3, #4294967295
 8001148:	2205      	movs	r2, #5
 800114a:	490b      	ldr	r1, [pc, #44]	; (8001178 <usart_send_status+0x44>)
 800114c:	480b      	ldr	r0, [pc, #44]	; (800117c <usart_send_status+0x48>)
 800114e:	f002 fc2e 	bl	80039ae <HAL_UART_Transmit>
 8001152:	e006      	b.n	8001162 <usart_send_status+0x2e>
    } else {
        HAL_UART_Transmit(&huart3, (uint8_t*)nack_word, NUMBER_OF_BYTES_NACK + 1, HAL_MAX_DELAY);
 8001154:	f04f 33ff 	mov.w	r3, #4294967295
 8001158:	2205      	movs	r2, #5
 800115a:	4909      	ldr	r1, [pc, #36]	; (8001180 <usart_send_status+0x4c>)
 800115c:	4807      	ldr	r0, [pc, #28]	; (800117c <usart_send_status+0x48>)
 800115e:	f002 fc26 	bl	80039ae <HAL_UART_Transmit>
    }
    HAL_UART_Transmit(&huart3, (uint8_t*)"\n", 1, HAL_MAX_DELAY);
 8001162:	f04f 33ff 	mov.w	r3, #4294967295
 8001166:	2201      	movs	r2, #1
 8001168:	4906      	ldr	r1, [pc, #24]	; (8001184 <usart_send_status+0x50>)
 800116a:	4804      	ldr	r0, [pc, #16]	; (800117c <usart_send_status+0x48>)
 800116c:	f002 fc1f 	bl	80039ae <HAL_UART_Transmit>
}
 8001170:	bf00      	nop
 8001172:	3708      	adds	r7, #8
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	08006d34 	.word	0x08006d34
 800117c:	2000008c 	.word	0x2000008c
 8001180:	08006d3c 	.word	0x08006d3c
 8001184:	08006900 	.word	0x08006900

08001188 <usart_get_cmd>:
 * \param[out]  *received_command: Указатель на полученный пакет.
 * \return     status: Статус выполнения операции, если \ref GET_CMD_OK, то пакет получен успешно,
 *             если что-то другое, произошла ошибка.
 */
get_cmd_status_t
usart_get_cmd(cmd_t* received_command) {
 8001188:	b580      	push	{r7, lr}
 800118a:	b08c      	sub	sp, #48	; 0x30
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]

    /* Буфер, в который будуд приходить сырые данные */
    uint8_t local_rx_buffer[CMD_SIZE];
    /* Индекс local_rx_buffer */
    size_t index = 0;
 8001190:	2300      	movs	r3, #0
 8001192:	62bb      	str	r3, [r7, #40]	; 0x28
    get_cmd_status_t status = GET_CMD_OK;
 8001194:	2300      	movs	r3, #0
 8001196:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    do {
        if (received_command == NULL) {
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d106      	bne.n	80011ae <usart_get_cmd+0x26>
            printf("Пустой указатель\n");
 80011a0:	4834      	ldr	r0, [pc, #208]	; (8001274 <usart_get_cmd+0xec>)
 80011a2:	f003 fd43 	bl	8004c2c <puts>
            status = GET_CMD_ERROR_EMPTY_POINTER;
 80011a6:	2304      	movs	r3, #4
 80011a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 80011ac:	e05c      	b.n	8001268 <usart_get_cmd+0xe0>
        }

        int16_t receiving_status = HAL_UART_Receive(&huart3, &local_rx_buffer[index], CMD_SIZE, HAL_MAX_DELAY);
 80011ae:	f107 020c 	add.w	r2, r7, #12
 80011b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011b4:	18d1      	adds	r1, r2, r3
 80011b6:	f04f 33ff 	mov.w	r3, #4294967295
 80011ba:	220c      	movs	r2, #12
 80011bc:	482e      	ldr	r0, [pc, #184]	; (8001278 <usart_get_cmd+0xf0>)
 80011be:	f002 fc88 	bl	8003ad2 <HAL_UART_Receive>
 80011c2:	4603      	mov	r3, r0
 80011c4:	84fb      	strh	r3, [r7, #38]	; 0x26

        if (receiving_status != HAL_OK) {
 80011c6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d006      	beq.n	80011dc <usart_get_cmd+0x54>
            printf("При использовании HAL функции для получения данных по UART возникла ошибка\n");
 80011ce:	482b      	ldr	r0, [pc, #172]	; (800127c <usart_get_cmd+0xf4>)
 80011d0:	f003 fd2c 	bl	8004c2c <puts>
            status = GET_CMD_ERROR_RECEIVING_STATUS;
 80011d4:	2301      	movs	r3, #1
 80011d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 80011da:	e045      	b.n	8001268 <usart_get_cmd+0xe0>
        }

        /* Определяем начало пакета типа "command" */
        uint8_t cmd_word_finded = find_word(&local_rx_buffer[index], command_word);
 80011dc:	f107 020c 	add.w	r2, r7, #12
 80011e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011e2:	4413      	add	r3, r2
 80011e4:	4926      	ldr	r1, [pc, #152]	; (8001280 <usart_get_cmd+0xf8>)
 80011e6:	4618      	mov	r0, r3
 80011e8:	f000 fa47 	bl	800167a <find_word>
 80011ec:	4603      	mov	r3, r0
 80011ee:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

        if (!cmd_word_finded) {
 80011f2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d106      	bne.n	8001208 <usart_get_cmd+0x80>
            printf("Переданные данные не соответствуют пакету типа \"command\"\n");
 80011fa:	4822      	ldr	r0, [pc, #136]	; (8001284 <usart_get_cmd+0xfc>)
 80011fc:	f003 fd16 	bl	8004c2c <puts>
            status = GET_CMD_ERROR_NOT_COMMAND;
 8001200:	2302      	movs	r3, #2
 8001202:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 8001206:	e02f      	b.n	8001268 <usart_get_cmd+0xe0>
        }

        index += NUMBER_OF_BYTES_COMMAND_WORD;
 8001208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800120a:	3304      	adds	r3, #4
 800120c:	62bb      	str	r3, [r7, #40]	; 0x28

        uint32_t cmd_type_bytes = four_uint8t_to_one_uint32t(&local_rx_buffer[index]);
 800120e:	f107 020c 	add.w	r2, r7, #12
 8001212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001214:	4413      	add	r3, r2
 8001216:	4618      	mov	r0, r3
 8001218:	f000 f9e2 	bl	80015e0 <four_uint8t_to_one_uint32t>
 800121c:	6238      	str	r0, [r7, #32]

        /* Определяем, какая команда пришла в пакете */
        *received_command = check_cmd_type(cmd_type_bytes);
 800121e:	6a38      	ldr	r0, [r7, #32]
 8001220:	f000 fad6 	bl	80017d0 <check_cmd_type>
 8001224:	4603      	mov	r3, r0
 8001226:	461a      	mov	r2, r3
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	701a      	strb	r2, [r3, #0]

        index += NUMBER_OF_BYTES_COMMAND_DATA;
 800122c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800122e:	3304      	adds	r3, #4
 8001230:	62bb      	str	r3, [r7, #40]	; 0x28

        uint32_t crc_bytes = four_uint8t_to_one_uint32t(&local_rx_buffer[index]);
 8001232:	f107 020c 	add.w	r2, r7, #12
 8001236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001238:	4413      	add	r3, r2
 800123a:	4618      	mov	r0, r3
 800123c:	f000 f9d0 	bl	80015e0 <four_uint8t_to_one_uint32t>
 8001240:	61f8      	str	r0, [r7, #28]

        /* Делаем проверку целостности входных данных, путем вычисления CRC.
         * CRC сумма вычисляется по байтам:
         * "начало_пакета_command" (символы Ascii) + "данные_передаваемые_в_пакете_command" */
        uint8_t crc_result =
            check_crc(local_rx_buffer, (NUMBER_OF_BYTES_COMMAND_WORD + NUMBER_OF_BYTES_COMMAND_DATA), crc_bytes);
 8001242:	f107 030c 	add.w	r3, r7, #12
 8001246:	69fa      	ldr	r2, [r7, #28]
 8001248:	2108      	movs	r1, #8
 800124a:	4618      	mov	r0, r3
 800124c:	f000 fa38 	bl	80016c0 <check_crc>
 8001250:	4603      	mov	r3, r0
 8001252:	76fb      	strb	r3, [r7, #27]

        if (!crc_result) {
 8001254:	7efb      	ldrb	r3, [r7, #27]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d106      	bne.n	8001268 <usart_get_cmd+0xe0>
            printf("Ошибка CRC, полученная и вычисленная сумма отличаются\n");
 800125a:	480b      	ldr	r0, [pc, #44]	; (8001288 <usart_get_cmd+0x100>)
 800125c:	f003 fce6 	bl	8004c2c <puts>
            status = GET_CMD_ERROR_CRC;
 8001260:	2303      	movs	r3, #3
 8001262:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 8001266:	bf00      	nop
        }

    } while (0);

    return status;
 8001268:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800126c:	4618      	mov	r0, r3
 800126e:	3730      	adds	r7, #48	; 0x30
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	08006904 	.word	0x08006904
 8001278:	2000008c 	.word	0x2000008c
 800127c:	08006924 	.word	0x08006924
 8001280:	08006d04 	.word	0x08006d04
 8001284:	080069a8 	.word	0x080069a8
 8001288:	08006a0c 	.word	0x08006a0c

0800128c <usart_get_header>:
 * \param[out]  *firmware_size: Указатель на полученный размер прошивки.
 * \return     status: Статус выполнения операции, если \ref GET_HEADER_OK, то пакет получен успешно,
 *             если что-то другое, произошла ошибка.
 */
get_header_status_t
usart_get_header(uint32_t* firmware_size) {
 800128c:	b580      	push	{r7, lr}
 800128e:	b08a      	sub	sp, #40	; 0x28
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]

    /* Буфер, в который будут приходить данные */
    uint8_t local_rx_buffer[HEADER_SIZE];
    /* Индекс local_rx_buffer */
    size_t index = 0;
 8001294:	2300      	movs	r3, #0
 8001296:	623b      	str	r3, [r7, #32]

    get_header_status_t status = GET_HEADER_OK;
 8001298:	2300      	movs	r3, #0
 800129a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    do {
        if (firmware_size == NULL) {
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d106      	bne.n	80012b2 <usart_get_header+0x26>
            printf("Пустой указатель\n");
 80012a4:	4831      	ldr	r0, [pc, #196]	; (800136c <usart_get_header+0xe0>)
 80012a6:	f003 fcc1 	bl	8004c2c <puts>
            status = GET_HEADER_ERROR_EMPTY_POINTER;
 80012aa:	2304      	movs	r3, #4
 80012ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 80012b0:	e055      	b.n	800135e <usart_get_header+0xd2>
        }

        int16_t receiving_status = HAL_UART_Receive(&huart3, &local_rx_buffer[index], HEADER_SIZE, HAL_MAX_DELAY);
 80012b2:	f107 0208 	add.w	r2, r7, #8
 80012b6:	6a3b      	ldr	r3, [r7, #32]
 80012b8:	18d1      	adds	r1, r2, r3
 80012ba:	f04f 33ff 	mov.w	r3, #4294967295
 80012be:	220c      	movs	r2, #12
 80012c0:	482b      	ldr	r0, [pc, #172]	; (8001370 <usart_get_header+0xe4>)
 80012c2:	f002 fc06 	bl	8003ad2 <HAL_UART_Receive>
 80012c6:	4603      	mov	r3, r0
 80012c8:	83fb      	strh	r3, [r7, #30]

        if (receiving_status != HAL_OK) {
 80012ca:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d006      	beq.n	80012e0 <usart_get_header+0x54>
            printf("При использовании HAL функции для получения данных по UART возникла ошибка\n");
 80012d2:	4828      	ldr	r0, [pc, #160]	; (8001374 <usart_get_header+0xe8>)
 80012d4:	f003 fcaa 	bl	8004c2c <puts>
            status = GET_HEADER_ERROR_RECEIVING_STATUS;
 80012d8:	2301      	movs	r3, #1
 80012da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 80012de:	e03e      	b.n	800135e <usart_get_header+0xd2>
        }

        /* Определяем начало пакета типа "header" */
        uint8_t header_word_finded = find_word(&local_rx_buffer[index], header_word);
 80012e0:	f107 0208 	add.w	r2, r7, #8
 80012e4:	6a3b      	ldr	r3, [r7, #32]
 80012e6:	4413      	add	r3, r2
 80012e8:	4923      	ldr	r1, [pc, #140]	; (8001378 <usart_get_header+0xec>)
 80012ea:	4618      	mov	r0, r3
 80012ec:	f000 f9c5 	bl	800167a <find_word>
 80012f0:	4603      	mov	r3, r0
 80012f2:	777b      	strb	r3, [r7, #29]

        if (!header_word_finded) {
 80012f4:	7f7b      	ldrb	r3, [r7, #29]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d106      	bne.n	8001308 <usart_get_header+0x7c>
            /* Переданные данные не соответствуют пакету типа "header" */
            printf("Переданные данные не соответствуют пакету типа \"header\"\n");
 80012fa:	4820      	ldr	r0, [pc, #128]	; (800137c <usart_get_header+0xf0>)
 80012fc:	f003 fc96 	bl	8004c2c <puts>
            status = GET_HEADER_ERROR_NOT_HEADER;
 8001300:	2302      	movs	r3, #2
 8001302:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8001306:	e02a      	b.n	800135e <usart_get_header+0xd2>
        }

        index += NUMBER_OF_BYTES_HEADER_WORD;
 8001308:	6a3b      	ldr	r3, [r7, #32]
 800130a:	3304      	adds	r3, #4
 800130c:	623b      	str	r3, [r7, #32]

        /* Получаем размер прошивки */
        *firmware_size = four_uint8t_to_one_uint32t(&local_rx_buffer[index]);
 800130e:	f107 0208 	add.w	r2, r7, #8
 8001312:	6a3b      	ldr	r3, [r7, #32]
 8001314:	4413      	add	r3, r2
 8001316:	4618      	mov	r0, r3
 8001318:	f000 f962 	bl	80015e0 <four_uint8t_to_one_uint32t>
 800131c:	4602      	mov	r2, r0
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	601a      	str	r2, [r3, #0]

        index += NUMBER_OF_BYTES_HEADER_DATA;
 8001322:	6a3b      	ldr	r3, [r7, #32]
 8001324:	3304      	adds	r3, #4
 8001326:	623b      	str	r3, [r7, #32]

        uint32_t crc_bytes = four_uint8t_to_one_uint32t(&local_rx_buffer[index]);
 8001328:	f107 0208 	add.w	r2, r7, #8
 800132c:	6a3b      	ldr	r3, [r7, #32]
 800132e:	4413      	add	r3, r2
 8001330:	4618      	mov	r0, r3
 8001332:	f000 f955 	bl	80015e0 <four_uint8t_to_one_uint32t>
 8001336:	61b8      	str	r0, [r7, #24]

        /* Делаем проверку целостности входных данных, путем вычисления CRC.
         * CRC сумма вычисляется по байтам:
        * "начало_пакета_header" (символы Ascii) + "данные_передаваемые_в_пакете_header" */
        uint8_t crc_result =
            check_crc(local_rx_buffer, (NUMBER_OF_BYTES_HEADER_WORD + NUMBER_OF_BYTES_HEADER_DATA), crc_bytes);
 8001338:	f107 0308 	add.w	r3, r7, #8
 800133c:	69ba      	ldr	r2, [r7, #24]
 800133e:	2108      	movs	r1, #8
 8001340:	4618      	mov	r0, r3
 8001342:	f000 f9bd 	bl	80016c0 <check_crc>
 8001346:	4603      	mov	r3, r0
 8001348:	75fb      	strb	r3, [r7, #23]

        if (!crc_result) {
 800134a:	7dfb      	ldrb	r3, [r7, #23]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d106      	bne.n	800135e <usart_get_header+0xd2>
            printf("Ошибка CRC, полученная и вычисленная сумма отличаются\n");
 8001350:	480b      	ldr	r0, [pc, #44]	; (8001380 <usart_get_header+0xf4>)
 8001352:	f003 fc6b 	bl	8004c2c <puts>
            status = GET_HEADER_ERROR_CRC;
 8001356:	2303      	movs	r3, #3
 8001358:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800135c:	bf00      	nop
        }

    } while (0);

    return status;
 800135e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001362:	4618      	mov	r0, r3
 8001364:	3728      	adds	r7, #40	; 0x28
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	08006904 	.word	0x08006904
 8001370:	2000008c 	.word	0x2000008c
 8001374:	08006924 	.word	0x08006924
 8001378:	08006d0c 	.word	0x08006d0c
 800137c:	08006a70 	.word	0x08006a70
 8001380:	08006a0c 	.word	0x08006a0c

08001384 <usart_get_data>:
 * \param[out]  *data_buffer: Указатель на полученный буфер с зашифрованными данными прошивки.
 * \return     status: Статус выполнения операции, если \ref GET_DATA_OK, то пакет получен успешно,
 *             если что-то другое, произошла ошибка.
 */
get_data_status_t
usart_get_data(uint8_t* data_buffer) {
 8001384:	b580      	push	{r7, lr}
 8001386:	f5ad 6d85 	sub.w	sp, sp, #1064	; 0x428
 800138a:	af00      	add	r7, sp, #0
 800138c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001390:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 8001394:	6018      	str	r0, [r3, #0]

    /* Буфер, в который будуд приходить сырые данные */
    uint8_t local_rx_buffer[DATA_SIZE];
    /* Индекс local_rx_buffer */
    size_t index = 0;
 8001396:	2300      	movs	r3, #0
 8001398:	f8c7 3420 	str.w	r3, [r7, #1056]	; 0x420
    get_data_status_t status = GET_DATA_OK;
 800139c:	2300      	movs	r3, #0
 800139e:	f887 3427 	strb.w	r3, [r7, #1063]	; 0x427

    do {
        if (data_buffer == NULL) {
 80013a2:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80013a6:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d106      	bne.n	80013be <usart_get_data+0x3a>
            printf("Пустой указатель\n");
 80013b0:	483c      	ldr	r0, [pc, #240]	; (80014a4 <usart_get_data+0x120>)
 80013b2:	f003 fc3b 	bl	8004c2c <puts>
            status = GET_DATA_ERROR_EMPTY_POINTER;
 80013b6:	2304      	movs	r3, #4
 80013b8:	f887 3427 	strb.w	r3, [r7, #1063]	; 0x427
            break;
 80013bc:	e06a      	b.n	8001494 <usart_get_data+0x110>
        }

        uint16_t receiving_status = HAL_UART_Receive(&huart3, &local_rx_buffer[index], DATA_SIZE, HAL_MAX_DELAY);
 80013be:	f107 020c 	add.w	r2, r7, #12
 80013c2:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 80013c6:	18d1      	adds	r1, r2, r3
 80013c8:	f04f 33ff 	mov.w	r3, #4294967295
 80013cc:	f44f 6281 	mov.w	r2, #1032	; 0x408
 80013d0:	4835      	ldr	r0, [pc, #212]	; (80014a8 <usart_get_data+0x124>)
 80013d2:	f002 fb7e 	bl	8003ad2 <HAL_UART_Receive>
 80013d6:	4603      	mov	r3, r0
 80013d8:	f8a7 341e 	strh.w	r3, [r7, #1054]	; 0x41e

        if (receiving_status != HAL_OK) {
 80013dc:	f8b7 341e 	ldrh.w	r3, [r7, #1054]	; 0x41e
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d006      	beq.n	80013f2 <usart_get_data+0x6e>
            printf("При использовании HAL функции для получения данных по UART возникла ошибка\n");
 80013e4:	4831      	ldr	r0, [pc, #196]	; (80014ac <usart_get_data+0x128>)
 80013e6:	f003 fc21 	bl	8004c2c <puts>
            status = GET_DATA_ERROR_RECEIVING_STATUS;
 80013ea:	2301      	movs	r3, #1
 80013ec:	f887 3427 	strb.w	r3, [r7, #1063]	; 0x427
            break;
 80013f0:	e050      	b.n	8001494 <usart_get_data+0x110>
        }

        /* Определяем начало пакета типа "data" */
        uint8_t data_word_finded = find_word(&local_rx_buffer[index], data_word);
 80013f2:	f107 020c 	add.w	r2, r7, #12
 80013f6:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 80013fa:	4413      	add	r3, r2
 80013fc:	492c      	ldr	r1, [pc, #176]	; (80014b0 <usart_get_data+0x12c>)
 80013fe:	4618      	mov	r0, r3
 8001400:	f000 f93b 	bl	800167a <find_word>
 8001404:	4603      	mov	r3, r0
 8001406:	f887 341d 	strb.w	r3, [r7, #1053]	; 0x41d

        if (!data_word_finded) {
 800140a:	f897 341d 	ldrb.w	r3, [r7, #1053]	; 0x41d
 800140e:	2b00      	cmp	r3, #0
 8001410:	d106      	bne.n	8001420 <usart_get_data+0x9c>
            printf("Переданные данные не соответствуют пакету типа \"data\"\n");
 8001412:	4828      	ldr	r0, [pc, #160]	; (80014b4 <usart_get_data+0x130>)
 8001414:	f003 fc0a 	bl	8004c2c <puts>
            status = GET_DATA_ERROR_NOT_DATA;
 8001418:	2302      	movs	r3, #2
 800141a:	f887 3427 	strb.w	r3, [r7, #1063]	; 0x427
            break;
 800141e:	e039      	b.n	8001494 <usart_get_data+0x110>
        }

        index += NUMBER_OF_BYTES_DATA_WORD;
 8001420:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 8001424:	3304      	adds	r3, #4
 8001426:	f8c7 3420 	str.w	r3, [r7, #1056]	; 0x420

        /* Получаем даннные, которые пришли */
        memcpy(data_buffer, &local_rx_buffer[index], NUMBER_OF_BYTES_DATA_DATA);
 800142a:	f107 020c 	add.w	r2, r7, #12
 800142e:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 8001432:	18d1      	adds	r1, r2, r3
 8001434:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001438:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800143c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001440:	6818      	ldr	r0, [r3, #0]
 8001442:	f003 fb57 	bl	8004af4 <memcpy>

        index += NUMBER_OF_BYTES_DATA_DATA;
 8001446:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 800144a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800144e:	f8c7 3420 	str.w	r3, [r7, #1056]	; 0x420

        uint32_t crc_bytes = four_uint8t_to_one_uint32t(&local_rx_buffer[index]);
 8001452:	f107 020c 	add.w	r2, r7, #12
 8001456:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 800145a:	4413      	add	r3, r2
 800145c:	4618      	mov	r0, r3
 800145e:	f000 f8bf 	bl	80015e0 <four_uint8t_to_one_uint32t>
 8001462:	f8c7 0418 	str.w	r0, [r7, #1048]	; 0x418

        /* Делаем проверку целостности входных данных, путем вычисления CRC.
        * CRC сумма вычисляется по байтам:
        * "начало_пакета_data" (символы Ascii) + "данные_передаваемые_в_пакете_data" */
        uint8_t crc_result =
            check_crc(local_rx_buffer, (NUMBER_OF_BYTES_DATA_WORD + NUMBER_OF_BYTES_DATA_DATA), crc_bytes);
 8001466:	f107 030c 	add.w	r3, r7, #12
 800146a:	f8d7 2418 	ldr.w	r2, [r7, #1048]	; 0x418
 800146e:	f240 4104 	movw	r1, #1028	; 0x404
 8001472:	4618      	mov	r0, r3
 8001474:	f000 f924 	bl	80016c0 <check_crc>
 8001478:	4603      	mov	r3, r0
 800147a:	f887 3417 	strb.w	r3, [r7, #1047]	; 0x417

        if (!crc_result) {
 800147e:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
 8001482:	2b00      	cmp	r3, #0
 8001484:	d106      	bne.n	8001494 <usart_get_data+0x110>
            printf("Ошибка CRC, полученная и вычисленная сумма отличаются\n");
 8001486:	480c      	ldr	r0, [pc, #48]	; (80014b8 <usart_get_data+0x134>)
 8001488:	f003 fbd0 	bl	8004c2c <puts>
            status = GET_DATA_ERROR_CRC;
 800148c:	2303      	movs	r3, #3
 800148e:	f887 3427 	strb.w	r3, [r7, #1063]	; 0x427
            break;
 8001492:	bf00      	nop
        }

    } while (0);

    return status;
 8001494:	f897 3427 	ldrb.w	r3, [r7, #1063]	; 0x427
}
 8001498:	4618      	mov	r0, r3
 800149a:	f507 6785 	add.w	r7, r7, #1064	; 0x428
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	08006904 	.word	0x08006904
 80014a8:	2000008c 	.word	0x2000008c
 80014ac:	08006924 	.word	0x08006924
 80014b0:	08006d1c 	.word	0x08006d1c
 80014b4:	08006ad4 	.word	0x08006ad4
 80014b8:	08006a0c 	.word	0x08006a0c

080014bc <usart_get_key>:
 * \param[out]  *coded_key: Указатель на полученный ключ, который зашифрован \ref DEFAULT_SECRET_ENCRYPTION_KEY.
 * \return     status: Статус выполнения операции, если \ref GET_KEY_OK, то пакет получен успешно,
 *             если что-то другое, произошла ошибка.
 */
get_key_status_t
usart_get_key(uint32_t* coded_key) {
 80014bc:	b580      	push	{r7, lr}
 80014be:	b08a      	sub	sp, #40	; 0x28
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
    /* Буфер, в который будут приходить данные */
    uint8_t local_rx_buffer[KEY_SIZE];
    /* Индекс local_rx_buffer */
    size_t index = 0;
 80014c4:	2300      	movs	r3, #0
 80014c6:	623b      	str	r3, [r7, #32]

    get_key_status_t status = GET_KEY_OK;
 80014c8:	2300      	movs	r3, #0
 80014ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    do {
        if (coded_key == NULL) {
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d106      	bne.n	80014e2 <usart_get_key+0x26>
            printf("Пустой указатель\n");
 80014d4:	4831      	ldr	r0, [pc, #196]	; (800159c <usart_get_key+0xe0>)
 80014d6:	f003 fba9 	bl	8004c2c <puts>
            status = GET_KEY_ERROR_EMPTY_POINTER;
 80014da:	2304      	movs	r3, #4
 80014dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 80014e0:	e055      	b.n	800158e <usart_get_key+0xd2>
        }

        int16_t receiving_status = HAL_UART_Receive(&huart3, &local_rx_buffer[index], KEY_SIZE, HAL_MAX_DELAY);
 80014e2:	f107 0208 	add.w	r2, r7, #8
 80014e6:	6a3b      	ldr	r3, [r7, #32]
 80014e8:	18d1      	adds	r1, r2, r3
 80014ea:	f04f 33ff 	mov.w	r3, #4294967295
 80014ee:	220c      	movs	r2, #12
 80014f0:	482b      	ldr	r0, [pc, #172]	; (80015a0 <usart_get_key+0xe4>)
 80014f2:	f002 faee 	bl	8003ad2 <HAL_UART_Receive>
 80014f6:	4603      	mov	r3, r0
 80014f8:	83fb      	strh	r3, [r7, #30]

        if (receiving_status != HAL_OK) {
 80014fa:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d006      	beq.n	8001510 <usart_get_key+0x54>
            printf("При использовании HAL функции для получения данных по UART возникла ошибка\n");
 8001502:	4828      	ldr	r0, [pc, #160]	; (80015a4 <usart_get_key+0xe8>)
 8001504:	f003 fb92 	bl	8004c2c <puts>
            status = GET_KEY_ERROR_RECEIVING_STATUS;
 8001508:	2301      	movs	r3, #1
 800150a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800150e:	e03e      	b.n	800158e <usart_get_key+0xd2>
        }

        /* Определяем начало пакета типа "ключ" */
        uint8_t key_word_finded = find_word(&local_rx_buffer[index], key_word);
 8001510:	f107 0208 	add.w	r2, r7, #8
 8001514:	6a3b      	ldr	r3, [r7, #32]
 8001516:	4413      	add	r3, r2
 8001518:	4923      	ldr	r1, [pc, #140]	; (80015a8 <usart_get_key+0xec>)
 800151a:	4618      	mov	r0, r3
 800151c:	f000 f8ad 	bl	800167a <find_word>
 8001520:	4603      	mov	r3, r0
 8001522:	777b      	strb	r3, [r7, #29]

        if (!key_word_finded) {
 8001524:	7f7b      	ldrb	r3, [r7, #29]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d106      	bne.n	8001538 <usart_get_key+0x7c>
            printf("Переданные данные не соответствуют пакету типа \"key\"\n");
 800152a:	4820      	ldr	r0, [pc, #128]	; (80015ac <usart_get_key+0xf0>)
 800152c:	f003 fb7e 	bl	8004c2c <puts>
            status = GET_KEY_ERROR_NOT_KEY;
 8001530:	2302      	movs	r3, #2
 8001532:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8001536:	e02a      	b.n	800158e <usart_get_key+0xd2>
        }

        index += NUMBER_OF_BYTES_KEY_WORD;
 8001538:	6a3b      	ldr	r3, [r7, #32]
 800153a:	3304      	adds	r3, #4
 800153c:	623b      	str	r3, [r7, #32]

        *coded_key = four_uint8t_to_one_uint32t(&local_rx_buffer[index]);
 800153e:	f107 0208 	add.w	r2, r7, #8
 8001542:	6a3b      	ldr	r3, [r7, #32]
 8001544:	4413      	add	r3, r2
 8001546:	4618      	mov	r0, r3
 8001548:	f000 f84a 	bl	80015e0 <four_uint8t_to_one_uint32t>
 800154c:	4602      	mov	r2, r0
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	601a      	str	r2, [r3, #0]

        index += NUMBER_OF_BYTES_KEY_DATA;
 8001552:	6a3b      	ldr	r3, [r7, #32]
 8001554:	3304      	adds	r3, #4
 8001556:	623b      	str	r3, [r7, #32]

        uint32_t crc_bytes = four_uint8t_to_one_uint32t(&local_rx_buffer[index]);
 8001558:	f107 0208 	add.w	r2, r7, #8
 800155c:	6a3b      	ldr	r3, [r7, #32]
 800155e:	4413      	add	r3, r2
 8001560:	4618      	mov	r0, r3
 8001562:	f000 f83d 	bl	80015e0 <four_uint8t_to_one_uint32t>
 8001566:	61b8      	str	r0, [r7, #24]

        /* Делаем проверку целостности входных данных, путем вычисления CRC.
         * CRC сумма вычисляется по байтам:
        * "начало_пакета_key" (символы Ascii) + "данные_передаваемые_в_пакете_key" */
        uint8_t crc_result =
            check_crc(local_rx_buffer, (NUMBER_OF_BYTES_KEY_WORD + NUMBER_OF_BYTES_KEY_DATA), crc_bytes);
 8001568:	f107 0308 	add.w	r3, r7, #8
 800156c:	69ba      	ldr	r2, [r7, #24]
 800156e:	2108      	movs	r1, #8
 8001570:	4618      	mov	r0, r3
 8001572:	f000 f8a5 	bl	80016c0 <check_crc>
 8001576:	4603      	mov	r3, r0
 8001578:	75fb      	strb	r3, [r7, #23]

        if (!crc_result) {
 800157a:	7dfb      	ldrb	r3, [r7, #23]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d106      	bne.n	800158e <usart_get_key+0xd2>
            printf("Ошибка CRC, полученная и вычисленная сумма отличаются\n");
 8001580:	480b      	ldr	r0, [pc, #44]	; (80015b0 <usart_get_key+0xf4>)
 8001582:	f003 fb53 	bl	8004c2c <puts>
            status = GET_KEY_ERROR_CRC;
 8001586:	2303      	movs	r3, #3
 8001588:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800158c:	bf00      	nop
        }

    } while (0);

    return status;
 800158e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001592:	4618      	mov	r0, r3
 8001594:	3728      	adds	r7, #40	; 0x28
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	08006904 	.word	0x08006904
 80015a0:	2000008c 	.word	0x2000008c
 80015a4:	08006924 	.word	0x08006924
 80015a8:	08006d24 	.word	0x08006d24
 80015ac:	08006b34 	.word	0x08006b34
 80015b0:	08006a0c 	.word	0x08006a0c

080015b4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80015b8:	f3bf 8f4f 	dsb	sy
}
 80015bc:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80015be:	4b06      	ldr	r3, [pc, #24]	; (80015d8 <__NVIC_SystemReset+0x24>)
 80015c0:	68db      	ldr	r3, [r3, #12]
 80015c2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80015c6:	4904      	ldr	r1, [pc, #16]	; (80015d8 <__NVIC_SystemReset+0x24>)
 80015c8:	4b04      	ldr	r3, [pc, #16]	; (80015dc <__NVIC_SystemReset+0x28>)
 80015ca:	4313      	orrs	r3, r2
 80015cc:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80015ce:	f3bf 8f4f 	dsb	sy
}
 80015d2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80015d4:	bf00      	nop
 80015d6:	e7fd      	b.n	80015d4 <__NVIC_SystemReset+0x20>
 80015d8:	e000ed00 	.word	0xe000ed00
 80015dc:	05fa0004 	.word	0x05fa0004

080015e0 <four_uint8t_to_one_uint32t>:
 *                  последовательности из 4 байт, которую мы хотим сделать uin32_t.
 * \param[in]       *p_bytes: Указатель на массив.
 * \return          result: Выровненное число uint32_t, или же 0, если указатель на массив пуст.
 */
uint32_t
four_uint8t_to_one_uint32t(uint8_t* p_bytes) {
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
    uint32_t result;

    /* Проверка на пустой указатель */
    if (p_bytes == NULL) {
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d106      	bne.n	80015fc <four_uint8t_to_one_uint32t+0x1c>
        printf("four_uint8t_to_one_uint32t - Пустой указатель\n");
 80015ee:	480c      	ldr	r0, [pc, #48]	; (8001620 <four_uint8t_to_one_uint32t+0x40>)
 80015f0:	f003 fb1c 	bl	8004c2c <puts>
        result = 0;
 80015f4:	2300      	movs	r3, #0
 80015f6:	60fb      	str	r3, [r7, #12]
        return result;
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	e00c      	b.n	8001616 <four_uint8t_to_one_uint32t+0x36>
        uint32_t u32;
        uint8_t u8[4];
    } temp_bytes;

    /* Выравниваем байты правильным образом */
    temp_bytes.u8[0] = *(p_bytes + 3);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	78db      	ldrb	r3, [r3, #3]
 8001600:	723b      	strb	r3, [r7, #8]
    temp_bytes.u8[1] = *(p_bytes + 2);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	789b      	ldrb	r3, [r3, #2]
 8001606:	727b      	strb	r3, [r7, #9]
    temp_bytes.u8[2] = *(p_bytes + 1);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	785b      	ldrb	r3, [r3, #1]
 800160c:	72bb      	strb	r3, [r7, #10]
    temp_bytes.u8[3] = *p_bytes;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	72fb      	strb	r3, [r7, #11]

    return temp_bytes.u32;
 8001614:	68bb      	ldr	r3, [r7, #8]
}
 8001616:	4618      	mov	r0, r3
 8001618:	3710      	adds	r7, #16
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	08006b94 	.word	0x08006b94

08001624 <decrypt_data>:
 * \param[in]  key: Ключ шифрования.
 * \param[in,out] *data: Указатель на зашифрованные данные, которые после выполнения функции расшифровываются.
 * \param[out] size: Размер зашифрованных данных.
 */
void
decrypt_data(uint32_t key, uint8_t* data, size_t size) {
 8001624:	b480      	push	{r7}
 8001626:	b087      	sub	sp, #28
 8001628:	af00      	add	r7, sp, #0
 800162a:	60f8      	str	r0, [r7, #12]
 800162c:	60b9      	str	r1, [r7, #8]
 800162e:	607a      	str	r2, [r7, #4]
    if (data != NULL) {
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d01b      	beq.n	800166e <decrypt_data+0x4a>
        for (size_t i = 0; i < size; i++) {
 8001636:	2300      	movs	r3, #0
 8001638:	617b      	str	r3, [r7, #20]
 800163a:	e014      	b.n	8001666 <decrypt_data+0x42>
            data[i] ^= (key >> (8 * (i % 4))) & 0xFF;
 800163c:	68ba      	ldr	r2, [r7, #8]
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	4413      	add	r3, r2
 8001642:	7819      	ldrb	r1, [r3, #0]
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	f003 0303 	and.w	r3, r3, #3
 800164a:	00db      	lsls	r3, r3, #3
 800164c:	68fa      	ldr	r2, [r7, #12]
 800164e:	fa22 f303 	lsr.w	r3, r2, r3
 8001652:	b2da      	uxtb	r2, r3
 8001654:	68b8      	ldr	r0, [r7, #8]
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	4403      	add	r3, r0
 800165a:	404a      	eors	r2, r1
 800165c:	b2d2      	uxtb	r2, r2
 800165e:	701a      	strb	r2, [r3, #0]
        for (size_t i = 0; i < size; i++) {
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	3301      	adds	r3, #1
 8001664:	617b      	str	r3, [r7, #20]
 8001666:	697a      	ldr	r2, [r7, #20]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	429a      	cmp	r2, r3
 800166c:	d3e6      	bcc.n	800163c <decrypt_data+0x18>
        }
    }
}
 800166e:	bf00      	nop
 8001670:	371c      	adds	r7, #28
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr

0800167a <find_word>:
 * \param[in]  *destination: Указатель на последовательность, которую хотим найти.
 * \return     result: Результат поиска: TRUE (входные данные совпадают с последовательностью),
 *             FALSE (входные данные не совпадают с последовательностью).
 */
uint8_t
find_word(uint8_t* source, const char* destination) {
 800167a:	b580      	push	{r7, lr}
 800167c:	b084      	sub	sp, #16
 800167e:	af00      	add	r7, sp, #0
 8001680:	6078      	str	r0, [r7, #4]
 8001682:	6039      	str	r1, [r7, #0]

    /* Проверка на пустой указатель */
    if (source == NULL || destination == NULL) {
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d002      	beq.n	8001690 <find_word+0x16>
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d101      	bne.n	8001694 <find_word+0x1a>
        return FALSE;
 8001690:	2300      	movs	r3, #0
 8001692:	e011      	b.n	80016b8 <find_word+0x3e>
    }

    /* Опираясь на пакетную структуру передаваемых данных, априори знаем, что первые байты пакета,
     * это всегда тип передаваемого сообщения, поэтому вести поиск дальше этих байт не имеет смысла */
    size_t destination_size = strlen(destination);
 8001694:	6838      	ldr	r0, [r7, #0]
 8001696:	f7fe fd9b 	bl	80001d0 <strlen>
 800169a:	60b8      	str	r0, [r7, #8]

    /* Выдаем ответ */
    uint8_t search_result;
    if (memcmp(source, destination, destination_size) == 0) {
 800169c:	68ba      	ldr	r2, [r7, #8]
 800169e:	6839      	ldr	r1, [r7, #0]
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	f003 fa17 	bl	8004ad4 <memcmp>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d102      	bne.n	80016b2 <find_word+0x38>
        search_result = TRUE;
 80016ac:	2301      	movs	r3, #1
 80016ae:	73fb      	strb	r3, [r7, #15]
 80016b0:	e001      	b.n	80016b6 <find_word+0x3c>
    } else {
        search_result = FALSE;
 80016b2:	2300      	movs	r3, #0
 80016b4:	73fb      	strb	r3, [r7, #15]
    }

    return search_result;
 80016b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	3710      	adds	r7, #16
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}

080016c0 <check_crc>:
 * \param[in]  data_size: Размер исходных данных.
 * \param[in]  input_crc: Полученный вместе с данными CRC32.
 * \return     result: Результат проверки: TRUE (данные переданы корректно), FALSE (возникла ошибка при передачи данных).
 */
uint8_t
check_crc(uint8_t* data, size_t data_size, uint32_t input_crc) {
 80016c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80016c4:	b08b      	sub	sp, #44	; 0x2c
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	60f8      	str	r0, [r7, #12]
 80016ca:	60b9      	str	r1, [r7, #8]
 80016cc:	607a      	str	r2, [r7, #4]
 80016ce:	466b      	mov	r3, sp
 80016d0:	461e      	mov	r6, r3

    uint8_t result = FALSE;
 80016d2:	2300      	movs	r3, #0
 80016d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    /* Проверка на пустой указатель */
    if (data == NULL) {
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d102      	bne.n	80016e4 <check_crc+0x24>
        return result;
 80016de:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80016e2:	e06c      	b.n	80017be <check_crc+0xfe>
    }

    size_t temp_data_size = data_size / sizeof(uint32_t);
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	089b      	lsrs	r3, r3, #2
 80016e8:	61fb      	str	r3, [r7, #28]
    uint32_t temp_data[temp_data_size];
 80016ea:	69f9      	ldr	r1, [r7, #28]
 80016ec:	460b      	mov	r3, r1
 80016ee:	3b01      	subs	r3, #1
 80016f0:	61bb      	str	r3, [r7, #24]
 80016f2:	2300      	movs	r3, #0
 80016f4:	4688      	mov	r8, r1
 80016f6:	4699      	mov	r9, r3
 80016f8:	f04f 0200 	mov.w	r2, #0
 80016fc:	f04f 0300 	mov.w	r3, #0
 8001700:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8001704:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8001708:	ea4f 1248 	mov.w	r2, r8, lsl #5
 800170c:	2300      	movs	r3, #0
 800170e:	460c      	mov	r4, r1
 8001710:	461d      	mov	r5, r3
 8001712:	f04f 0200 	mov.w	r2, #0
 8001716:	f04f 0300 	mov.w	r3, #0
 800171a:	016b      	lsls	r3, r5, #5
 800171c:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8001720:	0162      	lsls	r2, r4, #5
 8001722:	008b      	lsls	r3, r1, #2
 8001724:	3307      	adds	r3, #7
 8001726:	08db      	lsrs	r3, r3, #3
 8001728:	00db      	lsls	r3, r3, #3
 800172a:	ebad 0d03 	sub.w	sp, sp, r3
 800172e:	466b      	mov	r3, sp
 8001730:	3303      	adds	r3, #3
 8001732:	089b      	lsrs	r3, r3, #2
 8001734:	009b      	lsls	r3, r3, #2
 8001736:	617b      	str	r3, [r7, #20]

    /* Создаем временный массив uint32_t, чтобы использовать правильный порядок
     * байт в памяти для дальнейшего использования аппаратного вычисления CRC */
    memcpy(temp_data, data, data_size);
 8001738:	68ba      	ldr	r2, [r7, #8]
 800173a:	68f9      	ldr	r1, [r7, #12]
 800173c:	6978      	ldr	r0, [r7, #20]
 800173e:	f003 f9d9 	bl	8004af4 <memcpy>
    for (int i = 0; i < data_size / 4; i++) {
 8001742:	2300      	movs	r3, #0
 8001744:	627b      	str	r3, [r7, #36]	; 0x24
 8001746:	e022      	b.n	800178e <check_crc+0xce>
        temp_data[i] = ((temp_data[i] & 0x000000FF) << 24) | ((temp_data[i] & 0x0000FF00) << 8)
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800174c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001750:	061a      	lsls	r2, r3, #24
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001756:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800175a:	021b      	lsls	r3, r3, #8
 800175c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001760:	431a      	orrs	r2, r3
                       | ((temp_data[i] & 0x00FF0000) >> 8) | ((temp_data[i] & 0xFF000000) >> 24);
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001766:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800176a:	0a1b      	lsrs	r3, r3, #8
 800176c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8001770:	431a      	orrs	r2, r3
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001776:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800177a:	0e1b      	lsrs	r3, r3, #24
 800177c:	ea42 0103 	orr.w	r1, r2, r3
        temp_data[i] = ((temp_data[i] & 0x000000FF) << 24) | ((temp_data[i] & 0x0000FF00) << 8)
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001784:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (int i = 0; i < data_size / 4; i++) {
 8001788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800178a:	3301      	adds	r3, #1
 800178c:	627b      	str	r3, [r7, #36]	; 0x24
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	089a      	lsrs	r2, r3, #2
 8001792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001794:	429a      	cmp	r2, r3
 8001796:	d8d7      	bhi.n	8001748 <check_crc+0x88>
    }

    /* Используем аппаратные средства для вычисления CRC. В STM32F407xx нет возможности
     * настроить алгоритм вычисления CRC, используются только настройки по умолчанию, а именно:
     * Алгоритм CRC32 MPEG-2 */
    uint32_t calculated_crc = HAL_CRC_Calculate(&hcrc, temp_data, temp_data_size);
 8001798:	69fa      	ldr	r2, [r7, #28]
 800179a:	6979      	ldr	r1, [r7, #20]
 800179c:	480b      	ldr	r0, [pc, #44]	; (80017cc <check_crc+0x10c>)
 800179e:	f000 fd2e 	bl	80021fe <HAL_CRC_Calculate>
 80017a2:	6138      	str	r0, [r7, #16]

//    printf("Входные CRC байты - %08lx\n", input_crc);
//    printf("Вычисленные STM32 CRC байты - %08lx\n", calculated_crc);

    /* Выдаем ответ */
    if (input_crc == calculated_crc) {
 80017a4:	687a      	ldr	r2, [r7, #4]
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	429a      	cmp	r2, r3
 80017aa:	d103      	bne.n	80017b4 <check_crc+0xf4>
        result = TRUE;
 80017ac:	2301      	movs	r3, #1
 80017ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80017b2:	e002      	b.n	80017ba <check_crc+0xfa>
    } else {
        result = FALSE;
 80017b4:	2300      	movs	r3, #0
 80017b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    }

    return result;
 80017ba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80017be:	46b5      	mov	sp, r6
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	372c      	adds	r7, #44	; 0x2c
 80017c4:	46bd      	mov	sp, r7
 80017c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80017ca:	bf00      	nop
 80017cc:	200000d0 	.word	0x200000d0

080017d0 <check_cmd_type>:
 *              в списке поддерживаемых загрузчиком команд.
  * \param[in]  cmd_type_bytes: Байты, которые необходимо проверить на соответствие.
 * \return      type: Один из соответствующих типов команд из \ref cmd_t, если команда неизвестна, то \ref CMD_UNKNOWN.
 */
cmd_t
check_cmd_type(uint32_t cmd_type_bytes) {
 80017d0:	b480      	push	{r7}
 80017d2:	b085      	sub	sp, #20
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
    cmd_t type;

    switch (cmd_type_bytes) {
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	3b01      	subs	r3, #1
 80017dc:	2b07      	cmp	r3, #7
 80017de:	d82b      	bhi.n	8001838 <check_cmd_type+0x68>
 80017e0:	a201      	add	r2, pc, #4	; (adr r2, 80017e8 <check_cmd_type+0x18>)
 80017e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017e6:	bf00      	nop
 80017e8:	08001809 	.word	0x08001809
 80017ec:	0800180f 	.word	0x0800180f
 80017f0:	08001815 	.word	0x08001815
 80017f4:	0800181b 	.word	0x0800181b
 80017f8:	08001821 	.word	0x08001821
 80017fc:	08001827 	.word	0x08001827
 8001800:	0800182d 	.word	0x0800182d
 8001804:	08001833 	.word	0x08001833
        case CMD_UPDATE_FIRMWARE:
            type = CMD_UPDATE_FIRMWARE;
 8001808:	2301      	movs	r3, #1
 800180a:	73fb      	strb	r3, [r7, #15]
            break;
 800180c:	e017      	b.n	800183e <check_cmd_type+0x6e>
        case CMD_SET_KEY:
            type = CMD_SET_KEY;
 800180e:	2302      	movs	r3, #2
 8001810:	73fb      	strb	r3, [r7, #15]
            break;
 8001812:	e014      	b.n	800183e <check_cmd_type+0x6e>
        case CMD_FLASH_OB_CHECK:
            type = CMD_FLASH_OB_CHECK;
 8001814:	2303      	movs	r3, #3
 8001816:	73fb      	strb	r3, [r7, #15]
            break;
 8001818:	e011      	b.n	800183e <check_cmd_type+0x6e>
        case CMD_FLASH_LOCK:
            type = CMD_FLASH_LOCK;
 800181a:	2304      	movs	r3, #4
 800181c:	73fb      	strb	r3, [r7, #15]
            break;
 800181e:	e00e      	b.n	800183e <check_cmd_type+0x6e>
        case CMD_FLASH_UNLOCK:
            type = CMD_FLASH_UNLOCK;
 8001820:	2305      	movs	r3, #5
 8001822:	73fb      	strb	r3, [r7, #15]
            break;
 8001824:	e00b      	b.n	800183e <check_cmd_type+0x6e>
        case CMD_GET_ID:
            type = CMD_GET_ID;
 8001826:	2306      	movs	r3, #6
 8001828:	73fb      	strb	r3, [r7, #15]
            break;
 800182a:	e008      	b.n	800183e <check_cmd_type+0x6e>
        case CMD_CHECK_KEY:
            type = CMD_CHECK_KEY;
 800182c:	2307      	movs	r3, #7
 800182e:	73fb      	strb	r3, [r7, #15]
            break;
 8001830:	e005      	b.n	800183e <check_cmd_type+0x6e>
        case CMD_ERASE_PROGRAM:
            type = CMD_ERASE_PROGRAM;
 8001832:	2308      	movs	r3, #8
 8001834:	73fb      	strb	r3, [r7, #15]
            break;
 8001836:	e002      	b.n	800183e <check_cmd_type+0x6e>
        default:
            type = CMD_UNKNOWN;
 8001838:	2300      	movs	r3, #0
 800183a:	73fb      	strb	r3, [r7, #15]
            break;
 800183c:	bf00      	nop
    }

    return type;
 800183e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001840:	4618      	mov	r0, r3
 8001842:	3714      	adds	r7, #20
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr

0800184c <restart>:

/**
 * \brief     Эта функция производить программную перезагрузку МК через 3 секунды
 */
void
restart(void) {
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
    printf("Перезагрузка микроконтроллера через 3 секунды\n");
 8001852:	480a      	ldr	r0, [pc, #40]	; (800187c <restart+0x30>)
 8001854:	f003 f9ea 	bl	8004c2c <puts>

    uint32_t end_tick = HAL_GetTick() + 3000;
 8001858:	f000 fb98 	bl	8001f8c <HAL_GetTick>
 800185c:	4603      	mov	r3, r0
 800185e:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 8001862:	607b      	str	r3, [r7, #4]

    do {
        uint32_t current_tick = HAL_GetTick();
 8001864:	f000 fb92 	bl	8001f8c <HAL_GetTick>
 8001868:	6038      	str	r0, [r7, #0]

        if (current_tick > end_tick) {
 800186a:	683a      	ldr	r2, [r7, #0]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	429a      	cmp	r2, r3
 8001870:	d9f8      	bls.n	8001864 <restart+0x18>
            printf("Перезагрузка МК!\n");
 8001872:	4803      	ldr	r0, [pc, #12]	; (8001880 <restart+0x34>)
 8001874:	f003 f9da 	bl	8004c2c <puts>
            NVIC_SystemReset();
 8001878:	f7ff fe9c 	bl	80015b4 <__NVIC_SystemReset>
 800187c:	08006bd4 	.word	0x08006bd4
 8001880:	08006c2c 	.word	0x08006c2c

08001884 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800188a:	f000 fb19 	bl	8001ec0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800188e:	f000 f825 	bl	80018dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001892:	f000 f8cb 	bl	8001a2c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001896:	f000 f89f 	bl	80019d8 <MX_USART3_UART_Init>
  MX_CRC_Init();
 800189a:	f000 f889 	bl	80019b0 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */

  printf("Загрузчик версии: (%d.%d)\n", bl_version[0], bl_version[1]);
 800189e:	2300      	movs	r3, #0
 80018a0:	2202      	movs	r2, #2
 80018a2:	4619      	mov	r1, r3
 80018a4:	480b      	ldr	r0, [pc, #44]	; (80018d4 <main+0x50>)
 80018a6:	f003 f93b 	bl	8004b20 <iprintf>

  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET); /* Включаем зеленый светодиод */
 80018aa:	2201      	movs	r2, #1
 80018ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018b0:	4809      	ldr	r0, [pc, #36]	; (80018d8 <main+0x54>)
 80018b2:	f001 fbbd 	bl	8003030 <HAL_GPIO_WritePin>

  uint8_t bootloader_mode_flag = 0;
 80018b6:	2300      	movs	r3, #0
 80018b8:	71fb      	strb	r3, [r7, #7]

  /* Проверяем нажатие пользовательской клавиши */
  bootloader_mode_flag = check_bootloader_mode();
 80018ba:	f7fe fe63 	bl	8000584 <check_bootloader_mode>
 80018be:	4603      	mov	r3, r0
 80018c0:	71fb      	strb	r3, [r7, #7]

  if (bootloader_mode_flag) {
 80018c2:	79fb      	ldrb	r3, [r7, #7]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d001      	beq.n	80018cc <main+0x48>
      bootloader_mode();
 80018c8:	f7fe fe92 	bl	80005f0 <bootloader_mode>
  }

  /* Переходим в User application */
  go_to_application();
 80018cc:	f000 f932 	bl	8001b34 <go_to_application>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1) {
 80018d0:	e7fe      	b.n	80018d0 <main+0x4c>
 80018d2:	bf00      	nop
 80018d4:	08006c4c 	.word	0x08006c4c
 80018d8:	40020c00 	.word	0x40020c00

080018dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b094      	sub	sp, #80	; 0x50
 80018e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018e2:	f107 0320 	add.w	r3, r7, #32
 80018e6:	2230      	movs	r2, #48	; 0x30
 80018e8:	2100      	movs	r1, #0
 80018ea:	4618      	mov	r0, r3
 80018ec:	f003 f910 	bl	8004b10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018f0:	f107 030c 	add.w	r3, r7, #12
 80018f4:	2200      	movs	r2, #0
 80018f6:	601a      	str	r2, [r3, #0]
 80018f8:	605a      	str	r2, [r3, #4]
 80018fa:	609a      	str	r2, [r3, #8]
 80018fc:	60da      	str	r2, [r3, #12]
 80018fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001900:	2300      	movs	r3, #0
 8001902:	60bb      	str	r3, [r7, #8]
 8001904:	4b28      	ldr	r3, [pc, #160]	; (80019a8 <SystemClock_Config+0xcc>)
 8001906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001908:	4a27      	ldr	r2, [pc, #156]	; (80019a8 <SystemClock_Config+0xcc>)
 800190a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800190e:	6413      	str	r3, [r2, #64]	; 0x40
 8001910:	4b25      	ldr	r3, [pc, #148]	; (80019a8 <SystemClock_Config+0xcc>)
 8001912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001914:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001918:	60bb      	str	r3, [r7, #8]
 800191a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800191c:	2300      	movs	r3, #0
 800191e:	607b      	str	r3, [r7, #4]
 8001920:	4b22      	ldr	r3, [pc, #136]	; (80019ac <SystemClock_Config+0xd0>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a21      	ldr	r2, [pc, #132]	; (80019ac <SystemClock_Config+0xd0>)
 8001926:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800192a:	6013      	str	r3, [r2, #0]
 800192c:	4b1f      	ldr	r3, [pc, #124]	; (80019ac <SystemClock_Config+0xd0>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001934:	607b      	str	r3, [r7, #4]
 8001936:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001938:	2302      	movs	r3, #2
 800193a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800193c:	2301      	movs	r3, #1
 800193e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001940:	2310      	movs	r3, #16
 8001942:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001944:	2302      	movs	r3, #2
 8001946:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001948:	2300      	movs	r3, #0
 800194a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800194c:	2308      	movs	r3, #8
 800194e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001950:	23a8      	movs	r3, #168	; 0xa8
 8001952:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001954:	2302      	movs	r3, #2
 8001956:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001958:	2304      	movs	r3, #4
 800195a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800195c:	f107 0320 	add.w	r3, r7, #32
 8001960:	4618      	mov	r0, r3
 8001962:	f001 fb7f 	bl	8003064 <HAL_RCC_OscConfig>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d001      	beq.n	8001970 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800196c:	f000 f910 	bl	8001b90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001970:	230f      	movs	r3, #15
 8001972:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001974:	2302      	movs	r3, #2
 8001976:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001978:	2300      	movs	r3, #0
 800197a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800197c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001980:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001982:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001986:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001988:	f107 030c 	add.w	r3, r7, #12
 800198c:	2105      	movs	r1, #5
 800198e:	4618      	mov	r0, r3
 8001990:	f001 fde0 	bl	8003554 <HAL_RCC_ClockConfig>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800199a:	f000 f8f9 	bl	8001b90 <Error_Handler>
  }
}
 800199e:	bf00      	nop
 80019a0:	3750      	adds	r7, #80	; 0x50
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	40023800 	.word	0x40023800
 80019ac:	40007000 	.word	0x40007000

080019b0 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80019b4:	4b06      	ldr	r3, [pc, #24]	; (80019d0 <MX_CRC_Init+0x20>)
 80019b6:	4a07      	ldr	r2, [pc, #28]	; (80019d4 <MX_CRC_Init+0x24>)
 80019b8:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80019ba:	4805      	ldr	r0, [pc, #20]	; (80019d0 <MX_CRC_Init+0x20>)
 80019bc:	f000 fc03 	bl	80021c6 <HAL_CRC_Init>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80019c6:	f000 f8e3 	bl	8001b90 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80019ca:	bf00      	nop
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	200000d0 	.word	0x200000d0
 80019d4:	40023000 	.word	0x40023000

080019d8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80019dc:	4b11      	ldr	r3, [pc, #68]	; (8001a24 <MX_USART3_UART_Init+0x4c>)
 80019de:	4a12      	ldr	r2, [pc, #72]	; (8001a28 <MX_USART3_UART_Init+0x50>)
 80019e0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80019e2:	4b10      	ldr	r3, [pc, #64]	; (8001a24 <MX_USART3_UART_Init+0x4c>)
 80019e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019e8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80019ea:	4b0e      	ldr	r3, [pc, #56]	; (8001a24 <MX_USART3_UART_Init+0x4c>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80019f0:	4b0c      	ldr	r3, [pc, #48]	; (8001a24 <MX_USART3_UART_Init+0x4c>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80019f6:	4b0b      	ldr	r3, [pc, #44]	; (8001a24 <MX_USART3_UART_Init+0x4c>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80019fc:	4b09      	ldr	r3, [pc, #36]	; (8001a24 <MX_USART3_UART_Init+0x4c>)
 80019fe:	220c      	movs	r2, #12
 8001a00:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a02:	4b08      	ldr	r3, [pc, #32]	; (8001a24 <MX_USART3_UART_Init+0x4c>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a08:	4b06      	ldr	r3, [pc, #24]	; (8001a24 <MX_USART3_UART_Init+0x4c>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001a0e:	4805      	ldr	r0, [pc, #20]	; (8001a24 <MX_USART3_UART_Init+0x4c>)
 8001a10:	f001 ff80 	bl	8003914 <HAL_UART_Init>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d001      	beq.n	8001a1e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001a1a:	f000 f8b9 	bl	8001b90 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001a1e:	bf00      	nop
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	2000008c 	.word	0x2000008c
 8001a28:	40004800 	.word	0x40004800

08001a2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b08a      	sub	sp, #40	; 0x28
 8001a30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a32:	f107 0314 	add.w	r3, r7, #20
 8001a36:	2200      	movs	r2, #0
 8001a38:	601a      	str	r2, [r3, #0]
 8001a3a:	605a      	str	r2, [r3, #4]
 8001a3c:	609a      	str	r2, [r3, #8]
 8001a3e:	60da      	str	r2, [r3, #12]
 8001a40:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a42:	2300      	movs	r3, #0
 8001a44:	613b      	str	r3, [r7, #16]
 8001a46:	4b2d      	ldr	r3, [pc, #180]	; (8001afc <MX_GPIO_Init+0xd0>)
 8001a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4a:	4a2c      	ldr	r2, [pc, #176]	; (8001afc <MX_GPIO_Init+0xd0>)
 8001a4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a50:	6313      	str	r3, [r2, #48]	; 0x30
 8001a52:	4b2a      	ldr	r3, [pc, #168]	; (8001afc <MX_GPIO_Init+0xd0>)
 8001a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a5a:	613b      	str	r3, [r7, #16]
 8001a5c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a5e:	2300      	movs	r3, #0
 8001a60:	60fb      	str	r3, [r7, #12]
 8001a62:	4b26      	ldr	r3, [pc, #152]	; (8001afc <MX_GPIO_Init+0xd0>)
 8001a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a66:	4a25      	ldr	r2, [pc, #148]	; (8001afc <MX_GPIO_Init+0xd0>)
 8001a68:	f043 0301 	orr.w	r3, r3, #1
 8001a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a6e:	4b23      	ldr	r3, [pc, #140]	; (8001afc <MX_GPIO_Init+0xd0>)
 8001a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a72:	f003 0301 	and.w	r3, r3, #1
 8001a76:	60fb      	str	r3, [r7, #12]
 8001a78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	60bb      	str	r3, [r7, #8]
 8001a7e:	4b1f      	ldr	r3, [pc, #124]	; (8001afc <MX_GPIO_Init+0xd0>)
 8001a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a82:	4a1e      	ldr	r2, [pc, #120]	; (8001afc <MX_GPIO_Init+0xd0>)
 8001a84:	f043 0302 	orr.w	r3, r3, #2
 8001a88:	6313      	str	r3, [r2, #48]	; 0x30
 8001a8a:	4b1c      	ldr	r3, [pc, #112]	; (8001afc <MX_GPIO_Init+0xd0>)
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8e:	f003 0302 	and.w	r3, r3, #2
 8001a92:	60bb      	str	r3, [r7, #8]
 8001a94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a96:	2300      	movs	r3, #0
 8001a98:	607b      	str	r3, [r7, #4]
 8001a9a:	4b18      	ldr	r3, [pc, #96]	; (8001afc <MX_GPIO_Init+0xd0>)
 8001a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9e:	4a17      	ldr	r2, [pc, #92]	; (8001afc <MX_GPIO_Init+0xd0>)
 8001aa0:	f043 0308 	orr.w	r3, r3, #8
 8001aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8001aa6:	4b15      	ldr	r3, [pc, #84]	; (8001afc <MX_GPIO_Init+0xd0>)
 8001aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aaa:	f003 0308 	and.w	r3, r3, #8
 8001aae:	607b      	str	r3, [r7, #4]
 8001ab0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, green_Pin|blue_Pin, GPIO_PIN_RESET);
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	f44f 4110 	mov.w	r1, #36864	; 0x9000
 8001ab8:	4811      	ldr	r0, [pc, #68]	; (8001b00 <MX_GPIO_Init+0xd4>)
 8001aba:	f001 fab9 	bl	8003030 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aca:	f107 0314 	add.w	r3, r7, #20
 8001ace:	4619      	mov	r1, r3
 8001ad0:	480c      	ldr	r0, [pc, #48]	; (8001b04 <MX_GPIO_Init+0xd8>)
 8001ad2:	f001 f8f9 	bl	8002cc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : green_Pin blue_Pin */
  GPIO_InitStruct.Pin = green_Pin|blue_Pin;
 8001ad6:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 8001ada:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001adc:	2301      	movs	r3, #1
 8001ade:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ae8:	f107 0314 	add.w	r3, r7, #20
 8001aec:	4619      	mov	r1, r3
 8001aee:	4804      	ldr	r0, [pc, #16]	; (8001b00 <MX_GPIO_Init+0xd4>)
 8001af0:	f001 f8ea 	bl	8002cc8 <HAL_GPIO_Init>

}
 8001af4:	bf00      	nop
 8001af6:	3728      	adds	r7, #40	; 0x28
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	40023800 	.word	0x40023800
 8001b00:	40020c00 	.word	0x40020c00
 8001b04:	40020000 	.word	0x40020000

08001b08 <_write>:
/* USER CODE BEGIN 4 */

/**
 * \brief           Перенаправляем вывод printf на UART
 */
int _write(int fd, char *ptr, int len) {
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b084      	sub	sp, #16
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	60f8      	str	r0, [r7, #12]
 8001b10:	60b9      	str	r1, [r7, #8]
 8001b12:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart3, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	b29a      	uxth	r2, r3
 8001b18:	f04f 33ff 	mov.w	r3, #4294967295
 8001b1c:	68b9      	ldr	r1, [r7, #8]
 8001b1e:	4804      	ldr	r0, [pc, #16]	; (8001b30 <_write+0x28>)
 8001b20:	f001 ff45 	bl	80039ae <HAL_UART_Transmit>
    return len;
 8001b24:	687b      	ldr	r3, [r7, #4]
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3710      	adds	r7, #16
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	2000008c 	.word	0x2000008c

08001b34 <go_to_application>:


void go_to_application(void) {
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b084      	sub	sp, #16
 8001b38:	af00      	add	r7, sp, #0

    void (*app_reset_handler)(void);

    printf("Переходим в User application\n");
 8001b3a:	480f      	ldr	r0, [pc, #60]	; (8001b78 <go_to_application+0x44>)
 8001b3c:	f003 f876 	bl	8004c2c <puts>


    /* 1. Настройте MSP, считав значение из сектора с пользовательским приложением. */
    uint32_t msp_value = *(volatile uint32_t *) APP_FLASH_START_ADDRESS;
 8001b40:	4b0e      	ldr	r3, [pc, #56]	; (8001b7c <go_to_application+0x48>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	60fb      	str	r3, [r7, #12]
    printf("Значение MSP: %#lx\n", msp_value);
 8001b46:	68f9      	ldr	r1, [r7, #12]
 8001b48:	480d      	ldr	r0, [pc, #52]	; (8001b80 <go_to_application+0x4c>)
 8001b4a:	f002 ffe9 	bl	8004b20 <iprintf>

    //__set_MSP(msp_value);
    //SCB->VTOR = APP_FLASH_START_ADDRESS;

    /* 2. Теперь извлеките адрес обработчика сброса пользовательского приложения из местоположения APP_FLASH_START_ADDRESS + FLASH_BLOCK_OFFSET */
    uint32_t resethandler_address = *(volatile uint32_t *) (APP_FLASH_START_ADDRESS + FLASH_BLOCK_OFFSET);
 8001b4e:	4b0d      	ldr	r3, [pc, #52]	; (8001b84 <go_to_application+0x50>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	60bb      	str	r3, [r7, #8]
    printf("Адрес обработчика сброса User application: %#lx\r\n", resethandler_address);
 8001b54:	68b9      	ldr	r1, [r7, #8]
 8001b56:	480c      	ldr	r0, [pc, #48]	; (8001b88 <go_to_application+0x54>)
 8001b58:	f002 ffe2 	bl	8004b20 <iprintf>

    app_reset_handler = (void *) resethandler_address;
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	607b      	str	r3, [r7, #4]

    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET); /* Выключаем зеленый светодиод */
 8001b60:	2200      	movs	r2, #0
 8001b62:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b66:	4809      	ldr	r0, [pc, #36]	; (8001b8c <go_to_application+0x58>)
 8001b68:	f001 fa62 	bl	8003030 <HAL_GPIO_WritePin>

    /* 3. Перейдите к обработчику сброса пользовательского приложения */
    app_reset_handler(); /* вызовите обработчик сброса приложения */
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	4798      	blx	r3

}
 8001b70:	bf00      	nop
 8001b72:	3710      	adds	r7, #16
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	08006c78 	.word	0x08006c78
 8001b7c:	08010000 	.word	0x08010000
 8001b80:	08006ca0 	.word	0x08006ca0
 8001b84:	08010004 	.word	0x08010004
 8001b88:	08006cbc 	.word	0x08006cbc
 8001b8c:	40020c00 	.word	0x40020c00

08001b90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001b94:	b672      	cpsid	i
}
 8001b96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {
 8001b98:	e7fe      	b.n	8001b98 <Error_Handler+0x8>
	...

08001b9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	607b      	str	r3, [r7, #4]
 8001ba6:	4b10      	ldr	r3, [pc, #64]	; (8001be8 <HAL_MspInit+0x4c>)
 8001ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001baa:	4a0f      	ldr	r2, [pc, #60]	; (8001be8 <HAL_MspInit+0x4c>)
 8001bac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bb0:	6453      	str	r3, [r2, #68]	; 0x44
 8001bb2:	4b0d      	ldr	r3, [pc, #52]	; (8001be8 <HAL_MspInit+0x4c>)
 8001bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bba:	607b      	str	r3, [r7, #4]
 8001bbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	603b      	str	r3, [r7, #0]
 8001bc2:	4b09      	ldr	r3, [pc, #36]	; (8001be8 <HAL_MspInit+0x4c>)
 8001bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc6:	4a08      	ldr	r2, [pc, #32]	; (8001be8 <HAL_MspInit+0x4c>)
 8001bc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bcc:	6413      	str	r3, [r2, #64]	; 0x40
 8001bce:	4b06      	ldr	r3, [pc, #24]	; (8001be8 <HAL_MspInit+0x4c>)
 8001bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bd6:	603b      	str	r3, [r7, #0]
 8001bd8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bda:	bf00      	nop
 8001bdc:	370c      	adds	r7, #12
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop
 8001be8:	40023800 	.word	0x40023800

08001bec <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b085      	sub	sp, #20
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a0b      	ldr	r2, [pc, #44]	; (8001c28 <HAL_CRC_MspInit+0x3c>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d10d      	bne.n	8001c1a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001bfe:	2300      	movs	r3, #0
 8001c00:	60fb      	str	r3, [r7, #12]
 8001c02:	4b0a      	ldr	r3, [pc, #40]	; (8001c2c <HAL_CRC_MspInit+0x40>)
 8001c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c06:	4a09      	ldr	r2, [pc, #36]	; (8001c2c <HAL_CRC_MspInit+0x40>)
 8001c08:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c0e:	4b07      	ldr	r3, [pc, #28]	; (8001c2c <HAL_CRC_MspInit+0x40>)
 8001c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c16:	60fb      	str	r3, [r7, #12]
 8001c18:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001c1a:	bf00      	nop
 8001c1c:	3714      	adds	r7, #20
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	40023000 	.word	0x40023000
 8001c2c:	40023800 	.word	0x40023800

08001c30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b08a      	sub	sp, #40	; 0x28
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c38:	f107 0314 	add.w	r3, r7, #20
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	601a      	str	r2, [r3, #0]
 8001c40:	605a      	str	r2, [r3, #4]
 8001c42:	609a      	str	r2, [r3, #8]
 8001c44:	60da      	str	r2, [r3, #12]
 8001c46:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a1d      	ldr	r2, [pc, #116]	; (8001cc4 <HAL_UART_MspInit+0x94>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d134      	bne.n	8001cbc <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001c52:	2300      	movs	r3, #0
 8001c54:	613b      	str	r3, [r7, #16]
 8001c56:	4b1c      	ldr	r3, [pc, #112]	; (8001cc8 <HAL_UART_MspInit+0x98>)
 8001c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5a:	4a1b      	ldr	r2, [pc, #108]	; (8001cc8 <HAL_UART_MspInit+0x98>)
 8001c5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c60:	6413      	str	r3, [r2, #64]	; 0x40
 8001c62:	4b19      	ldr	r3, [pc, #100]	; (8001cc8 <HAL_UART_MspInit+0x98>)
 8001c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c6a:	613b      	str	r3, [r7, #16]
 8001c6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c6e:	2300      	movs	r3, #0
 8001c70:	60fb      	str	r3, [r7, #12]
 8001c72:	4b15      	ldr	r3, [pc, #84]	; (8001cc8 <HAL_UART_MspInit+0x98>)
 8001c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c76:	4a14      	ldr	r2, [pc, #80]	; (8001cc8 <HAL_UART_MspInit+0x98>)
 8001c78:	f043 0302 	orr.w	r3, r3, #2
 8001c7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c7e:	4b12      	ldr	r3, [pc, #72]	; (8001cc8 <HAL_UART_MspInit+0x98>)
 8001c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c82:	f003 0302 	and.w	r3, r3, #2
 8001c86:	60fb      	str	r3, [r7, #12]
 8001c88:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001c8a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001c8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c90:	2302      	movs	r3, #2
 8001c92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c94:	2300      	movs	r3, #0
 8001c96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c98:	2303      	movs	r3, #3
 8001c9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001c9c:	2307      	movs	r3, #7
 8001c9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ca0:	f107 0314 	add.w	r3, r7, #20
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	4809      	ldr	r0, [pc, #36]	; (8001ccc <HAL_UART_MspInit+0x9c>)
 8001ca8:	f001 f80e 	bl	8002cc8 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001cac:	2200      	movs	r2, #0
 8001cae:	2100      	movs	r1, #0
 8001cb0:	2027      	movs	r0, #39	; 0x27
 8001cb2:	f000 fa52 	bl	800215a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001cb6:	2027      	movs	r0, #39	; 0x27
 8001cb8:	f000 fa6b 	bl	8002192 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001cbc:	bf00      	nop
 8001cbe:	3728      	adds	r7, #40	; 0x28
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	40004800 	.word	0x40004800
 8001cc8:	40023800 	.word	0x40023800
 8001ccc:	40020400 	.word	0x40020400

08001cd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001cd4:	e7fe      	b.n	8001cd4 <NMI_Handler+0x4>

08001cd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cd6:	b480      	push	{r7}
 8001cd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cda:	e7fe      	b.n	8001cda <HardFault_Handler+0x4>

08001cdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ce0:	e7fe      	b.n	8001ce0 <MemManage_Handler+0x4>

08001ce2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ce2:	b480      	push	{r7}
 8001ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ce6:	e7fe      	b.n	8001ce6 <BusFault_Handler+0x4>

08001ce8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cec:	e7fe      	b.n	8001cec <UsageFault_Handler+0x4>

08001cee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cee:	b480      	push	{r7}
 8001cf0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cf2:	bf00      	nop
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr

08001cfc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d00:	bf00      	nop
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr

08001d0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d0a:	b480      	push	{r7}
 8001d0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d0e:	bf00      	nop
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr

08001d18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d1c:	f000 f922 	bl	8001f64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d20:	bf00      	nop
 8001d22:	bd80      	pop	{r7, pc}

08001d24 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001d28:	4802      	ldr	r0, [pc, #8]	; (8001d34 <USART3_IRQHandler+0x10>)
 8001d2a:	f001 ff75 	bl	8003c18 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001d2e:	bf00      	nop
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	2000008c 	.word	0x2000008c

08001d38 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b086      	sub	sp, #24
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	60f8      	str	r0, [r7, #12]
 8001d40:	60b9      	str	r1, [r7, #8]
 8001d42:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d44:	2300      	movs	r3, #0
 8001d46:	617b      	str	r3, [r7, #20]
 8001d48:	e00a      	b.n	8001d60 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001d4a:	f3af 8000 	nop.w
 8001d4e:	4601      	mov	r1, r0
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	1c5a      	adds	r2, r3, #1
 8001d54:	60ba      	str	r2, [r7, #8]
 8001d56:	b2ca      	uxtb	r2, r1
 8001d58:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	3301      	adds	r3, #1
 8001d5e:	617b      	str	r3, [r7, #20]
 8001d60:	697a      	ldr	r2, [r7, #20]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	429a      	cmp	r2, r3
 8001d66:	dbf0      	blt.n	8001d4a <_read+0x12>
	}

return len;
 8001d68:	687b      	ldr	r3, [r7, #4]
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3718      	adds	r7, #24
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}

08001d72 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001d72:	b480      	push	{r7}
 8001d74:	b083      	sub	sp, #12
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	6078      	str	r0, [r7, #4]
	return -1;
 8001d7a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	370c      	adds	r7, #12
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr

08001d8a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d8a:	b480      	push	{r7}
 8001d8c:	b083      	sub	sp, #12
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	6078      	str	r0, [r7, #4]
 8001d92:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d9a:	605a      	str	r2, [r3, #4]
	return 0;
 8001d9c:	2300      	movs	r3, #0
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	370c      	adds	r7, #12
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr

08001daa <_isatty>:

int _isatty(int file)
{
 8001daa:	b480      	push	{r7}
 8001dac:	b083      	sub	sp, #12
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	6078      	str	r0, [r7, #4]
	return 1;
 8001db2:	2301      	movs	r3, #1
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	370c      	adds	r7, #12
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr

08001dc0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b085      	sub	sp, #20
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	60f8      	str	r0, [r7, #12]
 8001dc8:	60b9      	str	r1, [r7, #8]
 8001dca:	607a      	str	r2, [r7, #4]
	return 0;
 8001dcc:	2300      	movs	r3, #0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3714      	adds	r7, #20
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr
	...

08001ddc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b086      	sub	sp, #24
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001de4:	4a14      	ldr	r2, [pc, #80]	; (8001e38 <_sbrk+0x5c>)
 8001de6:	4b15      	ldr	r3, [pc, #84]	; (8001e3c <_sbrk+0x60>)
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001df0:	4b13      	ldr	r3, [pc, #76]	; (8001e40 <_sbrk+0x64>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d102      	bne.n	8001dfe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001df8:	4b11      	ldr	r3, [pc, #68]	; (8001e40 <_sbrk+0x64>)
 8001dfa:	4a12      	ldr	r2, [pc, #72]	; (8001e44 <_sbrk+0x68>)
 8001dfc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dfe:	4b10      	ldr	r3, [pc, #64]	; (8001e40 <_sbrk+0x64>)
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4413      	add	r3, r2
 8001e06:	693a      	ldr	r2, [r7, #16]
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d207      	bcs.n	8001e1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e0c:	f002 fe38 	bl	8004a80 <__errno>
 8001e10:	4603      	mov	r3, r0
 8001e12:	220c      	movs	r2, #12
 8001e14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e16:	f04f 33ff 	mov.w	r3, #4294967295
 8001e1a:	e009      	b.n	8001e30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e1c:	4b08      	ldr	r3, [pc, #32]	; (8001e40 <_sbrk+0x64>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e22:	4b07      	ldr	r3, [pc, #28]	; (8001e40 <_sbrk+0x64>)
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4413      	add	r3, r2
 8001e2a:	4a05      	ldr	r2, [pc, #20]	; (8001e40 <_sbrk+0x64>)
 8001e2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3718      	adds	r7, #24
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	20020000 	.word	0x20020000
 8001e3c:	00000400 	.word	0x00000400
 8001e40:	200000e0 	.word	0x200000e0
 8001e44:	20000118 	.word	0x20000118

08001e48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e4c:	4b06      	ldr	r3, [pc, #24]	; (8001e68 <SystemInit+0x20>)
 8001e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e52:	4a05      	ldr	r2, [pc, #20]	; (8001e68 <SystemInit+0x20>)
 8001e54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e5c:	bf00      	nop
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	e000ed00 	.word	0xe000ed00

08001e6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001e6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ea4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e70:	480d      	ldr	r0, [pc, #52]	; (8001ea8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e72:	490e      	ldr	r1, [pc, #56]	; (8001eac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e74:	4a0e      	ldr	r2, [pc, #56]	; (8001eb0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e78:	e002      	b.n	8001e80 <LoopCopyDataInit>

08001e7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e7e:	3304      	adds	r3, #4

08001e80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e84:	d3f9      	bcc.n	8001e7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e86:	4a0b      	ldr	r2, [pc, #44]	; (8001eb4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e88:	4c0b      	ldr	r4, [pc, #44]	; (8001eb8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e8c:	e001      	b.n	8001e92 <LoopFillZerobss>

08001e8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e90:	3204      	adds	r2, #4

08001e92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e94:	d3fb      	bcc.n	8001e8e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e96:	f7ff ffd7 	bl	8001e48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e9a:	f002 fdf7 	bl	8004a8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e9e:	f7ff fcf1 	bl	8001884 <main>
  bx  lr    
 8001ea2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001ea4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ea8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001eac:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001eb0:	08006e04 	.word	0x08006e04
  ldr r2, =_sbss
 8001eb4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001eb8:	20000118 	.word	0x20000118

08001ebc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ebc:	e7fe      	b.n	8001ebc <ADC_IRQHandler>
	...

08001ec0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ec4:	4b0e      	ldr	r3, [pc, #56]	; (8001f00 <HAL_Init+0x40>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a0d      	ldr	r2, [pc, #52]	; (8001f00 <HAL_Init+0x40>)
 8001eca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ece:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ed0:	4b0b      	ldr	r3, [pc, #44]	; (8001f00 <HAL_Init+0x40>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a0a      	ldr	r2, [pc, #40]	; (8001f00 <HAL_Init+0x40>)
 8001ed6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001eda:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001edc:	4b08      	ldr	r3, [pc, #32]	; (8001f00 <HAL_Init+0x40>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a07      	ldr	r2, [pc, #28]	; (8001f00 <HAL_Init+0x40>)
 8001ee2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ee6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ee8:	2003      	movs	r0, #3
 8001eea:	f000 f92b 	bl	8002144 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001eee:	200f      	movs	r0, #15
 8001ef0:	f000 f808 	bl	8001f04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ef4:	f7ff fe52 	bl	8001b9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ef8:	2300      	movs	r3, #0
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	40023c00 	.word	0x40023c00

08001f04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f0c:	4b12      	ldr	r3, [pc, #72]	; (8001f58 <HAL_InitTick+0x54>)
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	4b12      	ldr	r3, [pc, #72]	; (8001f5c <HAL_InitTick+0x58>)
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	4619      	mov	r1, r3
 8001f16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f22:	4618      	mov	r0, r3
 8001f24:	f000 f943 	bl	80021ae <HAL_SYSTICK_Config>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d001      	beq.n	8001f32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e00e      	b.n	8001f50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2b0f      	cmp	r3, #15
 8001f36:	d80a      	bhi.n	8001f4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f38:	2200      	movs	r2, #0
 8001f3a:	6879      	ldr	r1, [r7, #4]
 8001f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f40:	f000 f90b 	bl	800215a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f44:	4a06      	ldr	r2, [pc, #24]	; (8001f60 <HAL_InitTick+0x5c>)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	e000      	b.n	8001f50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3708      	adds	r7, #8
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	20000000 	.word	0x20000000
 8001f5c:	20000008 	.word	0x20000008
 8001f60:	20000004 	.word	0x20000004

08001f64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f68:	4b06      	ldr	r3, [pc, #24]	; (8001f84 <HAL_IncTick+0x20>)
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	4b06      	ldr	r3, [pc, #24]	; (8001f88 <HAL_IncTick+0x24>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4413      	add	r3, r2
 8001f74:	4a04      	ldr	r2, [pc, #16]	; (8001f88 <HAL_IncTick+0x24>)
 8001f76:	6013      	str	r3, [r2, #0]
}
 8001f78:	bf00      	nop
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	20000008 	.word	0x20000008
 8001f88:	200000e4 	.word	0x200000e4

08001f8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
  return uwTick;
 8001f90:	4b03      	ldr	r3, [pc, #12]	; (8001fa0 <HAL_GetTick+0x14>)
 8001f92:	681b      	ldr	r3, [r3, #0]
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop
 8001fa0:	200000e4 	.word	0x200000e4

08001fa4 <__NVIC_SetPriorityGrouping>:
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b085      	sub	sp, #20
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	f003 0307 	and.w	r3, r3, #7
 8001fb2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fb4:	4b0c      	ldr	r3, [pc, #48]	; (8001fe8 <__NVIC_SetPriorityGrouping+0x44>)
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fba:	68ba      	ldr	r2, [r7, #8]
 8001fbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fcc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fd6:	4a04      	ldr	r2, [pc, #16]	; (8001fe8 <__NVIC_SetPriorityGrouping+0x44>)
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	60d3      	str	r3, [r2, #12]
}
 8001fdc:	bf00      	nop
 8001fde:	3714      	adds	r7, #20
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr
 8001fe8:	e000ed00 	.word	0xe000ed00

08001fec <__NVIC_GetPriorityGrouping>:
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ff0:	4b04      	ldr	r3, [pc, #16]	; (8002004 <__NVIC_GetPriorityGrouping+0x18>)
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	0a1b      	lsrs	r3, r3, #8
 8001ff6:	f003 0307 	and.w	r3, r3, #7
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr
 8002004:	e000ed00 	.word	0xe000ed00

08002008 <__NVIC_EnableIRQ>:
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	4603      	mov	r3, r0
 8002010:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002016:	2b00      	cmp	r3, #0
 8002018:	db0b      	blt.n	8002032 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800201a:	79fb      	ldrb	r3, [r7, #7]
 800201c:	f003 021f 	and.w	r2, r3, #31
 8002020:	4907      	ldr	r1, [pc, #28]	; (8002040 <__NVIC_EnableIRQ+0x38>)
 8002022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002026:	095b      	lsrs	r3, r3, #5
 8002028:	2001      	movs	r0, #1
 800202a:	fa00 f202 	lsl.w	r2, r0, r2
 800202e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002032:	bf00      	nop
 8002034:	370c      	adds	r7, #12
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr
 800203e:	bf00      	nop
 8002040:	e000e100 	.word	0xe000e100

08002044 <__NVIC_SetPriority>:
{
 8002044:	b480      	push	{r7}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
 800204a:	4603      	mov	r3, r0
 800204c:	6039      	str	r1, [r7, #0]
 800204e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002050:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002054:	2b00      	cmp	r3, #0
 8002056:	db0a      	blt.n	800206e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	b2da      	uxtb	r2, r3
 800205c:	490c      	ldr	r1, [pc, #48]	; (8002090 <__NVIC_SetPriority+0x4c>)
 800205e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002062:	0112      	lsls	r2, r2, #4
 8002064:	b2d2      	uxtb	r2, r2
 8002066:	440b      	add	r3, r1
 8002068:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800206c:	e00a      	b.n	8002084 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	b2da      	uxtb	r2, r3
 8002072:	4908      	ldr	r1, [pc, #32]	; (8002094 <__NVIC_SetPriority+0x50>)
 8002074:	79fb      	ldrb	r3, [r7, #7]
 8002076:	f003 030f 	and.w	r3, r3, #15
 800207a:	3b04      	subs	r3, #4
 800207c:	0112      	lsls	r2, r2, #4
 800207e:	b2d2      	uxtb	r2, r2
 8002080:	440b      	add	r3, r1
 8002082:	761a      	strb	r2, [r3, #24]
}
 8002084:	bf00      	nop
 8002086:	370c      	adds	r7, #12
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr
 8002090:	e000e100 	.word	0xe000e100
 8002094:	e000ed00 	.word	0xe000ed00

08002098 <NVIC_EncodePriority>:
{
 8002098:	b480      	push	{r7}
 800209a:	b089      	sub	sp, #36	; 0x24
 800209c:	af00      	add	r7, sp, #0
 800209e:	60f8      	str	r0, [r7, #12]
 80020a0:	60b9      	str	r1, [r7, #8]
 80020a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	f003 0307 	and.w	r3, r3, #7
 80020aa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020ac:	69fb      	ldr	r3, [r7, #28]
 80020ae:	f1c3 0307 	rsb	r3, r3, #7
 80020b2:	2b04      	cmp	r3, #4
 80020b4:	bf28      	it	cs
 80020b6:	2304      	movcs	r3, #4
 80020b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	3304      	adds	r3, #4
 80020be:	2b06      	cmp	r3, #6
 80020c0:	d902      	bls.n	80020c8 <NVIC_EncodePriority+0x30>
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	3b03      	subs	r3, #3
 80020c6:	e000      	b.n	80020ca <NVIC_EncodePriority+0x32>
 80020c8:	2300      	movs	r3, #0
 80020ca:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020cc:	f04f 32ff 	mov.w	r2, #4294967295
 80020d0:	69bb      	ldr	r3, [r7, #24]
 80020d2:	fa02 f303 	lsl.w	r3, r2, r3
 80020d6:	43da      	mvns	r2, r3
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	401a      	ands	r2, r3
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020e0:	f04f 31ff 	mov.w	r1, #4294967295
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	fa01 f303 	lsl.w	r3, r1, r3
 80020ea:	43d9      	mvns	r1, r3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020f0:	4313      	orrs	r3, r2
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3724      	adds	r7, #36	; 0x24
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
	...

08002100 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b082      	sub	sp, #8
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	3b01      	subs	r3, #1
 800210c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002110:	d301      	bcc.n	8002116 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002112:	2301      	movs	r3, #1
 8002114:	e00f      	b.n	8002136 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002116:	4a0a      	ldr	r2, [pc, #40]	; (8002140 <SysTick_Config+0x40>)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	3b01      	subs	r3, #1
 800211c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800211e:	210f      	movs	r1, #15
 8002120:	f04f 30ff 	mov.w	r0, #4294967295
 8002124:	f7ff ff8e 	bl	8002044 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002128:	4b05      	ldr	r3, [pc, #20]	; (8002140 <SysTick_Config+0x40>)
 800212a:	2200      	movs	r2, #0
 800212c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800212e:	4b04      	ldr	r3, [pc, #16]	; (8002140 <SysTick_Config+0x40>)
 8002130:	2207      	movs	r2, #7
 8002132:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002134:	2300      	movs	r3, #0
}
 8002136:	4618      	mov	r0, r3
 8002138:	3708      	adds	r7, #8
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	e000e010 	.word	0xe000e010

08002144 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800214c:	6878      	ldr	r0, [r7, #4]
 800214e:	f7ff ff29 	bl	8001fa4 <__NVIC_SetPriorityGrouping>
}
 8002152:	bf00      	nop
 8002154:	3708      	adds	r7, #8
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}

0800215a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800215a:	b580      	push	{r7, lr}
 800215c:	b086      	sub	sp, #24
 800215e:	af00      	add	r7, sp, #0
 8002160:	4603      	mov	r3, r0
 8002162:	60b9      	str	r1, [r7, #8]
 8002164:	607a      	str	r2, [r7, #4]
 8002166:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002168:	2300      	movs	r3, #0
 800216a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800216c:	f7ff ff3e 	bl	8001fec <__NVIC_GetPriorityGrouping>
 8002170:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002172:	687a      	ldr	r2, [r7, #4]
 8002174:	68b9      	ldr	r1, [r7, #8]
 8002176:	6978      	ldr	r0, [r7, #20]
 8002178:	f7ff ff8e 	bl	8002098 <NVIC_EncodePriority>
 800217c:	4602      	mov	r2, r0
 800217e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002182:	4611      	mov	r1, r2
 8002184:	4618      	mov	r0, r3
 8002186:	f7ff ff5d 	bl	8002044 <__NVIC_SetPriority>
}
 800218a:	bf00      	nop
 800218c:	3718      	adds	r7, #24
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}

08002192 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002192:	b580      	push	{r7, lr}
 8002194:	b082      	sub	sp, #8
 8002196:	af00      	add	r7, sp, #0
 8002198:	4603      	mov	r3, r0
 800219a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800219c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021a0:	4618      	mov	r0, r3
 80021a2:	f7ff ff31 	bl	8002008 <__NVIC_EnableIRQ>
}
 80021a6:	bf00      	nop
 80021a8:	3708      	adds	r7, #8
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}

080021ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021ae:	b580      	push	{r7, lr}
 80021b0:	b082      	sub	sp, #8
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f7ff ffa2 	bl	8002100 <SysTick_Config>
 80021bc:	4603      	mov	r3, r0
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3708      	adds	r7, #8
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}

080021c6 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80021c6:	b580      	push	{r7, lr}
 80021c8:	b082      	sub	sp, #8
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d101      	bne.n	80021d8 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	e00e      	b.n	80021f6 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	795b      	ldrb	r3, [r3, #5]
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d105      	bne.n	80021ee <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2200      	movs	r2, #0
 80021e6:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80021e8:	6878      	ldr	r0, [r7, #4]
 80021ea:	f7ff fcff 	bl	8001bec <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2201      	movs	r2, #1
 80021f2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80021f4:	2300      	movs	r3, #0
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3708      	adds	r7, #8
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}

080021fe <HAL_CRC_Calculate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 80021fe:	b480      	push	{r7}
 8002200:	b087      	sub	sp, #28
 8002202:	af00      	add	r7, sp, #0
 8002204:	60f8      	str	r0, [r7, #12]
 8002206:	60b9      	str	r1, [r7, #8]
 8002208:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 800220a:	2300      	movs	r3, #0
 800220c:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	2202      	movs	r2, #2
 8002212:	715a      	strb	r2, [r3, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	689a      	ldr	r2, [r3, #8]
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f042 0201 	orr.w	r2, r2, #1
 8002222:	609a      	str	r2, [r3, #8]

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 8002224:	2300      	movs	r3, #0
 8002226:	617b      	str	r3, [r7, #20]
 8002228:	e00a      	b.n	8002240 <HAL_CRC_Calculate+0x42>
  {
    hcrc->Instance->DR = pBuffer[index];
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	009b      	lsls	r3, r3, #2
 800222e:	68ba      	ldr	r2, [r7, #8]
 8002230:	441a      	add	r2, r3
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	6812      	ldr	r2, [r2, #0]
 8002238:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	3301      	adds	r3, #1
 800223e:	617b      	str	r3, [r7, #20]
 8002240:	697a      	ldr	r2, [r7, #20]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	429a      	cmp	r2, r3
 8002246:	d3f0      	bcc.n	800222a <HAL_CRC_Calculate+0x2c>
  }
  temp = hcrc->Instance->DR;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2201      	movs	r2, #1
 8002254:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 8002256:	693b      	ldr	r3, [r7, #16]
}
 8002258:	4618      	mov	r0, r3
 800225a:	371c      	adds	r7, #28
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr

08002264 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b084      	sub	sp, #16
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002270:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002272:	f7ff fe8b 	bl	8001f8c <HAL_GetTick>
 8002276:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800227e:	b2db      	uxtb	r3, r3
 8002280:	2b02      	cmp	r3, #2
 8002282:	d008      	beq.n	8002296 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2280      	movs	r2, #128	; 0x80
 8002288:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2200      	movs	r2, #0
 800228e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e052      	b.n	800233c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f022 0216 	bic.w	r2, r2, #22
 80022a4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	695a      	ldr	r2, [r3, #20]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80022b4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d103      	bne.n	80022c6 <HAL_DMA_Abort+0x62>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d007      	beq.n	80022d6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f022 0208 	bic.w	r2, r2, #8
 80022d4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f022 0201 	bic.w	r2, r2, #1
 80022e4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022e6:	e013      	b.n	8002310 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80022e8:	f7ff fe50 	bl	8001f8c <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	2b05      	cmp	r3, #5
 80022f4:	d90c      	bls.n	8002310 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2220      	movs	r2, #32
 80022fa:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2203      	movs	r2, #3
 8002300:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2200      	movs	r2, #0
 8002308:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800230c:	2303      	movs	r3, #3
 800230e:	e015      	b.n	800233c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 0301 	and.w	r3, r3, #1
 800231a:	2b00      	cmp	r3, #0
 800231c:	d1e4      	bne.n	80022e8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002322:	223f      	movs	r2, #63	; 0x3f
 8002324:	409a      	lsls	r2, r3
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2201      	movs	r2, #1
 800232e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2200      	movs	r2, #0
 8002336:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800233a:	2300      	movs	r3, #0
}
 800233c:	4618      	mov	r0, r3
 800233e:	3710      	adds	r7, #16
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}

08002344 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002344:	b480      	push	{r7}
 8002346:	b083      	sub	sp, #12
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002352:	b2db      	uxtb	r3, r3
 8002354:	2b02      	cmp	r3, #2
 8002356:	d004      	beq.n	8002362 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2280      	movs	r2, #128	; 0x80
 800235c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e00c      	b.n	800237c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2205      	movs	r2, #5
 8002366:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f022 0201 	bic.w	r2, r2, #1
 8002378:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800237a:	2300      	movs	r3, #0
}
 800237c:	4618      	mov	r0, r3
 800237e:	370c      	adds	r7, #12
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr

08002388 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b086      	sub	sp, #24
 800238c:	af00      	add	r7, sp, #0
 800238e:	60f8      	str	r0, [r7, #12]
 8002390:	60b9      	str	r1, [r7, #8]
 8002392:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800239a:	4b23      	ldr	r3, [pc, #140]	; (8002428 <HAL_FLASH_Program+0xa0>)
 800239c:	7e1b      	ldrb	r3, [r3, #24]
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d101      	bne.n	80023a6 <HAL_FLASH_Program+0x1e>
 80023a2:	2302      	movs	r3, #2
 80023a4:	e03b      	b.n	800241e <HAL_FLASH_Program+0x96>
 80023a6:	4b20      	ldr	r3, [pc, #128]	; (8002428 <HAL_FLASH_Program+0xa0>)
 80023a8:	2201      	movs	r2, #1
 80023aa:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80023ac:	f24c 3050 	movw	r0, #50000	; 0xc350
 80023b0:	f000 f8b0 	bl	8002514 <FLASH_WaitForLastOperation>
 80023b4:	4603      	mov	r3, r0
 80023b6:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80023b8:	7dfb      	ldrb	r3, [r7, #23]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d12b      	bne.n	8002416 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d105      	bne.n	80023d0 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80023c4:	783b      	ldrb	r3, [r7, #0]
 80023c6:	4619      	mov	r1, r3
 80023c8:	68b8      	ldr	r0, [r7, #8]
 80023ca:	f000 f95b 	bl	8002684 <FLASH_Program_Byte>
 80023ce:	e016      	b.n	80023fe <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d105      	bne.n	80023e2 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80023d6:	883b      	ldrh	r3, [r7, #0]
 80023d8:	4619      	mov	r1, r3
 80023da:	68b8      	ldr	r0, [r7, #8]
 80023dc:	f000 f92e 	bl	800263c <FLASH_Program_HalfWord>
 80023e0:	e00d      	b.n	80023fe <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2b02      	cmp	r3, #2
 80023e6:	d105      	bne.n	80023f4 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	4619      	mov	r1, r3
 80023ec:	68b8      	ldr	r0, [r7, #8]
 80023ee:	f000 f903 	bl	80025f8 <FLASH_Program_Word>
 80023f2:	e004      	b.n	80023fe <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80023f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80023f8:	68b8      	ldr	r0, [r7, #8]
 80023fa:	f000 f8cb 	bl	8002594 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80023fe:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002402:	f000 f887 	bl	8002514 <FLASH_WaitForLastOperation>
 8002406:	4603      	mov	r3, r0
 8002408:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800240a:	4b08      	ldr	r3, [pc, #32]	; (800242c <HAL_FLASH_Program+0xa4>)
 800240c:	691b      	ldr	r3, [r3, #16]
 800240e:	4a07      	ldr	r2, [pc, #28]	; (800242c <HAL_FLASH_Program+0xa4>)
 8002410:	f023 0301 	bic.w	r3, r3, #1
 8002414:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002416:	4b04      	ldr	r3, [pc, #16]	; (8002428 <HAL_FLASH_Program+0xa0>)
 8002418:	2200      	movs	r2, #0
 800241a:	761a      	strb	r2, [r3, #24]
  
  return status;
 800241c:	7dfb      	ldrb	r3, [r7, #23]
}
 800241e:	4618      	mov	r0, r3
 8002420:	3718      	adds	r7, #24
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	200000e8 	.word	0x200000e8
 800242c:	40023c00 	.word	0x40023c00

08002430 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002436:	2300      	movs	r3, #0
 8002438:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800243a:	4b0b      	ldr	r3, [pc, #44]	; (8002468 <HAL_FLASH_Unlock+0x38>)
 800243c:	691b      	ldr	r3, [r3, #16]
 800243e:	2b00      	cmp	r3, #0
 8002440:	da0b      	bge.n	800245a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002442:	4b09      	ldr	r3, [pc, #36]	; (8002468 <HAL_FLASH_Unlock+0x38>)
 8002444:	4a09      	ldr	r2, [pc, #36]	; (800246c <HAL_FLASH_Unlock+0x3c>)
 8002446:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002448:	4b07      	ldr	r3, [pc, #28]	; (8002468 <HAL_FLASH_Unlock+0x38>)
 800244a:	4a09      	ldr	r2, [pc, #36]	; (8002470 <HAL_FLASH_Unlock+0x40>)
 800244c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800244e:	4b06      	ldr	r3, [pc, #24]	; (8002468 <HAL_FLASH_Unlock+0x38>)
 8002450:	691b      	ldr	r3, [r3, #16]
 8002452:	2b00      	cmp	r3, #0
 8002454:	da01      	bge.n	800245a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800245a:	79fb      	ldrb	r3, [r7, #7]
}
 800245c:	4618      	mov	r0, r3
 800245e:	370c      	adds	r7, #12
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr
 8002468:	40023c00 	.word	0x40023c00
 800246c:	45670123 	.word	0x45670123
 8002470:	cdef89ab 	.word	0xcdef89ab

08002474 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002474:	b480      	push	{r7}
 8002476:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8002478:	4b05      	ldr	r3, [pc, #20]	; (8002490 <HAL_FLASH_Lock+0x1c>)
 800247a:	691b      	ldr	r3, [r3, #16]
 800247c:	4a04      	ldr	r2, [pc, #16]	; (8002490 <HAL_FLASH_Lock+0x1c>)
 800247e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002482:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8002484:	2300      	movs	r3, #0
}
 8002486:	4618      	mov	r0, r3
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr
 8002490:	40023c00 	.word	0x40023c00

08002494 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 8002494:	b480      	push	{r7}
 8002496:	af00      	add	r7, sp, #0
  if((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
 8002498:	4b09      	ldr	r3, [pc, #36]	; (80024c0 <HAL_FLASH_OB_Unlock+0x2c>)
 800249a:	695b      	ldr	r3, [r3, #20]
 800249c:	f003 0301 	and.w	r3, r3, #1
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d007      	beq.n	80024b4 <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    FLASH->OPTKEYR = FLASH_OPT_KEY1;
 80024a4:	4b06      	ldr	r3, [pc, #24]	; (80024c0 <HAL_FLASH_OB_Unlock+0x2c>)
 80024a6:	4a07      	ldr	r2, [pc, #28]	; (80024c4 <HAL_FLASH_OB_Unlock+0x30>)
 80024a8:	609a      	str	r2, [r3, #8]
    FLASH->OPTKEYR = FLASH_OPT_KEY2;
 80024aa:	4b05      	ldr	r3, [pc, #20]	; (80024c0 <HAL_FLASH_OB_Unlock+0x2c>)
 80024ac:	4a06      	ldr	r2, [pc, #24]	; (80024c8 <HAL_FLASH_OB_Unlock+0x34>)
 80024ae:	609a      	str	r2, [r3, #8]
  else
  {
    return HAL_ERROR;
  }  
  
  return HAL_OK;  
 80024b0:	2300      	movs	r3, #0
 80024b2:	e000      	b.n	80024b6 <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr
 80024c0:	40023c00 	.word	0x40023c00
 80024c4:	08192a3b 	.word	0x08192a3b
 80024c8:	4c5d6e7f 	.word	0x4c5d6e7f

080024cc <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Control Registers access.
  * @retval HAL Status 
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 80024cc:	b480      	push	{r7}
 80024ce:	af00      	add	r7, sp, #0
  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 80024d0:	4b05      	ldr	r3, [pc, #20]	; (80024e8 <HAL_FLASH_OB_Lock+0x1c>)
 80024d2:	695b      	ldr	r3, [r3, #20]
 80024d4:	4a04      	ldr	r2, [pc, #16]	; (80024e8 <HAL_FLASH_OB_Lock+0x1c>)
 80024d6:	f043 0301 	orr.w	r3, r3, #1
 80024da:	6153      	str	r3, [r2, #20]
  
  return HAL_OK;  
 80024dc:	2300      	movs	r3, #0
}
 80024de:	4618      	mov	r0, r3
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr
 80024e8:	40023c00 	.word	0x40023c00

080024ec <HAL_FLASH_OB_Launch>:
/**
  * @brief  Launch the option byte loading.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Launch(void)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	af00      	add	r7, sp, #0
  /* Set the OPTSTRT bit in OPTCR register */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= FLASH_OPTCR_OPTSTRT;
 80024f0:	4b07      	ldr	r3, [pc, #28]	; (8002510 <HAL_FLASH_OB_Launch+0x24>)
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	4a06      	ldr	r2, [pc, #24]	; (8002510 <HAL_FLASH_OB_Launch+0x24>)
 80024f8:	f043 0302 	orr.w	r3, r3, #2
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	7013      	strb	r3, [r2, #0]

  /* Wait for last operation to be completed */
  return(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE)); 
 8002500:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002504:	f000 f806 	bl	8002514 <FLASH_WaitForLastOperation>
 8002508:	4603      	mov	r3, r0
}
 800250a:	4618      	mov	r0, r3
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	40023c14 	.word	0x40023c14

08002514 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8002514:	b580      	push	{r7, lr}
 8002516:	b084      	sub	sp, #16
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800251c:	2300      	movs	r3, #0
 800251e:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002520:	4b1a      	ldr	r3, [pc, #104]	; (800258c <FLASH_WaitForLastOperation+0x78>)
 8002522:	2200      	movs	r2, #0
 8002524:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8002526:	f7ff fd31 	bl	8001f8c <HAL_GetTick>
 800252a:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800252c:	e010      	b.n	8002550 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002534:	d00c      	beq.n	8002550 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d007      	beq.n	800254c <FLASH_WaitForLastOperation+0x38>
 800253c:	f7ff fd26 	bl	8001f8c <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	687a      	ldr	r2, [r7, #4]
 8002548:	429a      	cmp	r2, r3
 800254a:	d201      	bcs.n	8002550 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 800254c:	2303      	movs	r3, #3
 800254e:	e019      	b.n	8002584 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8002550:	4b0f      	ldr	r3, [pc, #60]	; (8002590 <FLASH_WaitForLastOperation+0x7c>)
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002558:	2b00      	cmp	r3, #0
 800255a:	d1e8      	bne.n	800252e <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800255c:	4b0c      	ldr	r3, [pc, #48]	; (8002590 <FLASH_WaitForLastOperation+0x7c>)
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	f003 0301 	and.w	r3, r3, #1
 8002564:	2b00      	cmp	r3, #0
 8002566:	d002      	beq.n	800256e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002568:	4b09      	ldr	r3, [pc, #36]	; (8002590 <FLASH_WaitForLastOperation+0x7c>)
 800256a:	2201      	movs	r2, #1
 800256c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800256e:	4b08      	ldr	r3, [pc, #32]	; (8002590 <FLASH_WaitForLastOperation+0x7c>)
 8002570:	68db      	ldr	r3, [r3, #12]
 8002572:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8002576:	2b00      	cmp	r3, #0
 8002578:	d003      	beq.n	8002582 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800257a:	f000 f8a5 	bl	80026c8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e000      	b.n	8002584 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8002582:	2300      	movs	r3, #0
  
}  
 8002584:	4618      	mov	r0, r3
 8002586:	3710      	adds	r7, #16
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}
 800258c:	200000e8 	.word	0x200000e8
 8002590:	40023c00 	.word	0x40023c00

08002594 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8002594:	b480      	push	{r7}
 8002596:	b085      	sub	sp, #20
 8002598:	af00      	add	r7, sp, #0
 800259a:	60f8      	str	r0, [r7, #12]
 800259c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80025a0:	4b14      	ldr	r3, [pc, #80]	; (80025f4 <FLASH_Program_DoubleWord+0x60>)
 80025a2:	691b      	ldr	r3, [r3, #16]
 80025a4:	4a13      	ldr	r2, [pc, #76]	; (80025f4 <FLASH_Program_DoubleWord+0x60>)
 80025a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025aa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80025ac:	4b11      	ldr	r3, [pc, #68]	; (80025f4 <FLASH_Program_DoubleWord+0x60>)
 80025ae:	691b      	ldr	r3, [r3, #16]
 80025b0:	4a10      	ldr	r2, [pc, #64]	; (80025f4 <FLASH_Program_DoubleWord+0x60>)
 80025b2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80025b6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80025b8:	4b0e      	ldr	r3, [pc, #56]	; (80025f4 <FLASH_Program_DoubleWord+0x60>)
 80025ba:	691b      	ldr	r3, [r3, #16]
 80025bc:	4a0d      	ldr	r2, [pc, #52]	; (80025f4 <FLASH_Program_DoubleWord+0x60>)
 80025be:	f043 0301 	orr.w	r3, r3, #1
 80025c2:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	683a      	ldr	r2, [r7, #0]
 80025c8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80025ca:	f3bf 8f6f 	isb	sy
}
 80025ce:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80025d0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80025d4:	f04f 0200 	mov.w	r2, #0
 80025d8:	f04f 0300 	mov.w	r3, #0
 80025dc:	000a      	movs	r2, r1
 80025de:	2300      	movs	r3, #0
 80025e0:	68f9      	ldr	r1, [r7, #12]
 80025e2:	3104      	adds	r1, #4
 80025e4:	4613      	mov	r3, r2
 80025e6:	600b      	str	r3, [r1, #0]
}
 80025e8:	bf00      	nop
 80025ea:	3714      	adds	r7, #20
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr
 80025f4:	40023c00 	.word	0x40023c00

080025f8 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002602:	4b0d      	ldr	r3, [pc, #52]	; (8002638 <FLASH_Program_Word+0x40>)
 8002604:	691b      	ldr	r3, [r3, #16]
 8002606:	4a0c      	ldr	r2, [pc, #48]	; (8002638 <FLASH_Program_Word+0x40>)
 8002608:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800260c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800260e:	4b0a      	ldr	r3, [pc, #40]	; (8002638 <FLASH_Program_Word+0x40>)
 8002610:	691b      	ldr	r3, [r3, #16]
 8002612:	4a09      	ldr	r2, [pc, #36]	; (8002638 <FLASH_Program_Word+0x40>)
 8002614:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002618:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800261a:	4b07      	ldr	r3, [pc, #28]	; (8002638 <FLASH_Program_Word+0x40>)
 800261c:	691b      	ldr	r3, [r3, #16]
 800261e:	4a06      	ldr	r2, [pc, #24]	; (8002638 <FLASH_Program_Word+0x40>)
 8002620:	f043 0301 	orr.w	r3, r3, #1
 8002624:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	683a      	ldr	r2, [r7, #0]
 800262a:	601a      	str	r2, [r3, #0]
}
 800262c:	bf00      	nop
 800262e:	370c      	adds	r7, #12
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr
 8002638:	40023c00 	.word	0x40023c00

0800263c <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	460b      	mov	r3, r1
 8002646:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002648:	4b0d      	ldr	r3, [pc, #52]	; (8002680 <FLASH_Program_HalfWord+0x44>)
 800264a:	691b      	ldr	r3, [r3, #16]
 800264c:	4a0c      	ldr	r2, [pc, #48]	; (8002680 <FLASH_Program_HalfWord+0x44>)
 800264e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002652:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8002654:	4b0a      	ldr	r3, [pc, #40]	; (8002680 <FLASH_Program_HalfWord+0x44>)
 8002656:	691b      	ldr	r3, [r3, #16]
 8002658:	4a09      	ldr	r2, [pc, #36]	; (8002680 <FLASH_Program_HalfWord+0x44>)
 800265a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800265e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002660:	4b07      	ldr	r3, [pc, #28]	; (8002680 <FLASH_Program_HalfWord+0x44>)
 8002662:	691b      	ldr	r3, [r3, #16]
 8002664:	4a06      	ldr	r2, [pc, #24]	; (8002680 <FLASH_Program_HalfWord+0x44>)
 8002666:	f043 0301 	orr.w	r3, r3, #1
 800266a:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	887a      	ldrh	r2, [r7, #2]
 8002670:	801a      	strh	r2, [r3, #0]
}
 8002672:	bf00      	nop
 8002674:	370c      	adds	r7, #12
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr
 800267e:	bf00      	nop
 8002680:	40023c00 	.word	0x40023c00

08002684 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8002684:	b480      	push	{r7}
 8002686:	b083      	sub	sp, #12
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	460b      	mov	r3, r1
 800268e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002690:	4b0c      	ldr	r3, [pc, #48]	; (80026c4 <FLASH_Program_Byte+0x40>)
 8002692:	691b      	ldr	r3, [r3, #16]
 8002694:	4a0b      	ldr	r2, [pc, #44]	; (80026c4 <FLASH_Program_Byte+0x40>)
 8002696:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800269a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800269c:	4b09      	ldr	r3, [pc, #36]	; (80026c4 <FLASH_Program_Byte+0x40>)
 800269e:	4a09      	ldr	r2, [pc, #36]	; (80026c4 <FLASH_Program_Byte+0x40>)
 80026a0:	691b      	ldr	r3, [r3, #16]
 80026a2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80026a4:	4b07      	ldr	r3, [pc, #28]	; (80026c4 <FLASH_Program_Byte+0x40>)
 80026a6:	691b      	ldr	r3, [r3, #16]
 80026a8:	4a06      	ldr	r2, [pc, #24]	; (80026c4 <FLASH_Program_Byte+0x40>)
 80026aa:	f043 0301 	orr.w	r3, r3, #1
 80026ae:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	78fa      	ldrb	r2, [r7, #3]
 80026b4:	701a      	strb	r2, [r3, #0]
}
 80026b6:	bf00      	nop
 80026b8:	370c      	adds	r7, #12
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr
 80026c2:	bf00      	nop
 80026c4:	40023c00 	.word	0x40023c00

080026c8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80026c8:	b480      	push	{r7}
 80026ca:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80026cc:	4b27      	ldr	r3, [pc, #156]	; (800276c <FLASH_SetErrorCode+0xa4>)
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	f003 0310 	and.w	r3, r3, #16
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d008      	beq.n	80026ea <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80026d8:	4b25      	ldr	r3, [pc, #148]	; (8002770 <FLASH_SetErrorCode+0xa8>)
 80026da:	69db      	ldr	r3, [r3, #28]
 80026dc:	f043 0310 	orr.w	r3, r3, #16
 80026e0:	4a23      	ldr	r2, [pc, #140]	; (8002770 <FLASH_SetErrorCode+0xa8>)
 80026e2:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80026e4:	4b21      	ldr	r3, [pc, #132]	; (800276c <FLASH_SetErrorCode+0xa4>)
 80026e6:	2210      	movs	r2, #16
 80026e8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80026ea:	4b20      	ldr	r3, [pc, #128]	; (800276c <FLASH_SetErrorCode+0xa4>)
 80026ec:	68db      	ldr	r3, [r3, #12]
 80026ee:	f003 0320 	and.w	r3, r3, #32
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d008      	beq.n	8002708 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80026f6:	4b1e      	ldr	r3, [pc, #120]	; (8002770 <FLASH_SetErrorCode+0xa8>)
 80026f8:	69db      	ldr	r3, [r3, #28]
 80026fa:	f043 0308 	orr.w	r3, r3, #8
 80026fe:	4a1c      	ldr	r2, [pc, #112]	; (8002770 <FLASH_SetErrorCode+0xa8>)
 8002700:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8002702:	4b1a      	ldr	r3, [pc, #104]	; (800276c <FLASH_SetErrorCode+0xa4>)
 8002704:	2220      	movs	r2, #32
 8002706:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8002708:	4b18      	ldr	r3, [pc, #96]	; (800276c <FLASH_SetErrorCode+0xa4>)
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002710:	2b00      	cmp	r3, #0
 8002712:	d008      	beq.n	8002726 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8002714:	4b16      	ldr	r3, [pc, #88]	; (8002770 <FLASH_SetErrorCode+0xa8>)
 8002716:	69db      	ldr	r3, [r3, #28]
 8002718:	f043 0304 	orr.w	r3, r3, #4
 800271c:	4a14      	ldr	r2, [pc, #80]	; (8002770 <FLASH_SetErrorCode+0xa8>)
 800271e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8002720:	4b12      	ldr	r3, [pc, #72]	; (800276c <FLASH_SetErrorCode+0xa4>)
 8002722:	2240      	movs	r2, #64	; 0x40
 8002724:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8002726:	4b11      	ldr	r3, [pc, #68]	; (800276c <FLASH_SetErrorCode+0xa4>)
 8002728:	68db      	ldr	r3, [r3, #12]
 800272a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800272e:	2b00      	cmp	r3, #0
 8002730:	d008      	beq.n	8002744 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8002732:	4b0f      	ldr	r3, [pc, #60]	; (8002770 <FLASH_SetErrorCode+0xa8>)
 8002734:	69db      	ldr	r3, [r3, #28]
 8002736:	f043 0302 	orr.w	r3, r3, #2
 800273a:	4a0d      	ldr	r2, [pc, #52]	; (8002770 <FLASH_SetErrorCode+0xa8>)
 800273c:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800273e:	4b0b      	ldr	r3, [pc, #44]	; (800276c <FLASH_SetErrorCode+0xa4>)
 8002740:	2280      	movs	r2, #128	; 0x80
 8002742:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8002744:	4b09      	ldr	r3, [pc, #36]	; (800276c <FLASH_SetErrorCode+0xa4>)
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	f003 0302 	and.w	r3, r3, #2
 800274c:	2b00      	cmp	r3, #0
 800274e:	d008      	beq.n	8002762 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8002750:	4b07      	ldr	r3, [pc, #28]	; (8002770 <FLASH_SetErrorCode+0xa8>)
 8002752:	69db      	ldr	r3, [r3, #28]
 8002754:	f043 0320 	orr.w	r3, r3, #32
 8002758:	4a05      	ldr	r2, [pc, #20]	; (8002770 <FLASH_SetErrorCode+0xa8>)
 800275a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800275c:	4b03      	ldr	r3, [pc, #12]	; (800276c <FLASH_SetErrorCode+0xa4>)
 800275e:	2202      	movs	r2, #2
 8002760:	60da      	str	r2, [r3, #12]
  }
}
 8002762:	bf00      	nop
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr
 800276c:	40023c00 	.word	0x40023c00
 8002770:	200000e8 	.word	0x200000e8

08002774 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b084      	sub	sp, #16
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8002782:	2300      	movs	r3, #0
 8002784:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002786:	4b31      	ldr	r3, [pc, #196]	; (800284c <HAL_FLASHEx_Erase+0xd8>)
 8002788:	7e1b      	ldrb	r3, [r3, #24]
 800278a:	2b01      	cmp	r3, #1
 800278c:	d101      	bne.n	8002792 <HAL_FLASHEx_Erase+0x1e>
 800278e:	2302      	movs	r3, #2
 8002790:	e058      	b.n	8002844 <HAL_FLASHEx_Erase+0xd0>
 8002792:	4b2e      	ldr	r3, [pc, #184]	; (800284c <HAL_FLASHEx_Erase+0xd8>)
 8002794:	2201      	movs	r2, #1
 8002796:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002798:	f24c 3050 	movw	r0, #50000	; 0xc350
 800279c:	f7ff feba 	bl	8002514 <FLASH_WaitForLastOperation>
 80027a0:	4603      	mov	r3, r0
 80027a2:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80027a4:	7bfb      	ldrb	r3, [r7, #15]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d148      	bne.n	800283c <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	f04f 32ff 	mov.w	r2, #4294967295
 80027b0:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d115      	bne.n	80027e6 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	691b      	ldr	r3, [r3, #16]
 80027be:	b2da      	uxtb	r2, r3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	4619      	mov	r1, r3
 80027c6:	4610      	mov	r0, r2
 80027c8:	f000 f8d6 	bl	8002978 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80027cc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80027d0:	f7ff fea0 	bl	8002514 <FLASH_WaitForLastOperation>
 80027d4:	4603      	mov	r3, r0
 80027d6:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80027d8:	4b1d      	ldr	r3, [pc, #116]	; (8002850 <HAL_FLASHEx_Erase+0xdc>)
 80027da:	691b      	ldr	r3, [r3, #16]
 80027dc:	4a1c      	ldr	r2, [pc, #112]	; (8002850 <HAL_FLASHEx_Erase+0xdc>)
 80027de:	f023 0304 	bic.w	r3, r3, #4
 80027e2:	6113      	str	r3, [r2, #16]
 80027e4:	e028      	b.n	8002838 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	60bb      	str	r3, [r7, #8]
 80027ec:	e01c      	b.n	8002828 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	691b      	ldr	r3, [r3, #16]
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	4619      	mov	r1, r3
 80027f6:	68b8      	ldr	r0, [r7, #8]
 80027f8:	f000 f8e2 	bl	80029c0 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80027fc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002800:	f7ff fe88 	bl	8002514 <FLASH_WaitForLastOperation>
 8002804:	4603      	mov	r3, r0
 8002806:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8002808:	4b11      	ldr	r3, [pc, #68]	; (8002850 <HAL_FLASHEx_Erase+0xdc>)
 800280a:	691b      	ldr	r3, [r3, #16]
 800280c:	4a10      	ldr	r2, [pc, #64]	; (8002850 <HAL_FLASHEx_Erase+0xdc>)
 800280e:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8002812:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8002814:	7bfb      	ldrb	r3, [r7, #15]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d003      	beq.n	8002822 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	68ba      	ldr	r2, [r7, #8]
 800281e:	601a      	str	r2, [r3, #0]
          break;
 8002820:	e00a      	b.n	8002838 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	3301      	adds	r3, #1
 8002826:	60bb      	str	r3, [r7, #8]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	68da      	ldr	r2, [r3, #12]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	4413      	add	r3, r2
 8002832:	68ba      	ldr	r2, [r7, #8]
 8002834:	429a      	cmp	r2, r3
 8002836:	d3da      	bcc.n	80027ee <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8002838:	f000 fa00 	bl	8002c3c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800283c:	4b03      	ldr	r3, [pc, #12]	; (800284c <HAL_FLASHEx_Erase+0xd8>)
 800283e:	2200      	movs	r2, #0
 8002840:	761a      	strb	r2, [r3, #24]

  return status;
 8002842:	7bfb      	ldrb	r3, [r7, #15]
}
 8002844:	4618      	mov	r0, r3
 8002846:	3710      	adds	r7, #16
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}
 800284c:	200000e8 	.word	0x200000e8
 8002850:	40023c00 	.word	0x40023c00

08002854 <HAL_FLASHEx_OBProgram>:
  *         contains the configuration information for the programming.
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b084      	sub	sp, #16
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002860:	4b32      	ldr	r3, [pc, #200]	; (800292c <HAL_FLASHEx_OBProgram+0xd8>)
 8002862:	7e1b      	ldrb	r3, [r3, #24]
 8002864:	2b01      	cmp	r3, #1
 8002866:	d101      	bne.n	800286c <HAL_FLASHEx_OBProgram+0x18>
 8002868:	2302      	movs	r3, #2
 800286a:	e05b      	b.n	8002924 <HAL_FLASHEx_OBProgram+0xd0>
 800286c:	4b2f      	ldr	r3, [pc, #188]	; (800292c <HAL_FLASHEx_OBProgram+0xd8>)
 800286e:	2201      	movs	r2, #1
 8002870:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_OPTIONBYTE(pOBInit->OptionType));

  /*Write protection configuration*/
  if ((pOBInit->OptionType & OPTIONBYTE_WRP) == OPTIONBYTE_WRP)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 0301 	and.w	r3, r3, #1
 800287a:	2b00      	cmp	r3, #0
 800287c:	d018      	beq.n	80028b0 <HAL_FLASHEx_OBProgram+0x5c>
  {
    assert_param(IS_WRPSTATE(pOBInit->WRPState));
    if (pOBInit->WRPState == OB_WRPSTATE_ENABLE)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	2b01      	cmp	r3, #1
 8002884:	d10a      	bne.n	800289c <HAL_FLASHEx_OBProgram+0x48>
    {
      /*Enable of Write protection on the selected Sector*/
      status = FLASH_OB_EnableWRP(pOBInit->WRPSector, pOBInit->Banks);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	689a      	ldr	r2, [r3, #8]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	68db      	ldr	r3, [r3, #12]
 800288e:	4619      	mov	r1, r3
 8002890:	4610      	mov	r0, r2
 8002892:	f000 f8dd 	bl	8002a50 <FLASH_OB_EnableWRP>
 8002896:	4603      	mov	r3, r0
 8002898:	73fb      	strb	r3, [r7, #15]
 800289a:	e009      	b.n	80028b0 <HAL_FLASHEx_OBProgram+0x5c>
    }
    else
    {
      /*Disable of Write protection on the selected Sector*/
      status = FLASH_OB_DisableWRP(pOBInit->WRPSector, pOBInit->Banks);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	689a      	ldr	r2, [r3, #8]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	4619      	mov	r1, r3
 80028a6:	4610      	mov	r0, r2
 80028a8:	f000 f8f4 	bl	8002a94 <FLASH_OB_DisableWRP>
 80028ac:	4603      	mov	r3, r0
 80028ae:	73fb      	strb	r3, [r7, #15]
    }
  }

  /*Read protection configuration*/
  if ((pOBInit->OptionType & OPTIONBYTE_RDP) == OPTIONBYTE_RDP)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 0302 	and.w	r3, r3, #2
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d007      	beq.n	80028cc <HAL_FLASHEx_OBProgram+0x78>
  {
    status = FLASH_OB_RDP_LevelConfig(pOBInit->RDPLevel);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	691b      	ldr	r3, [r3, #16]
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	4618      	mov	r0, r3
 80028c4:	f000 f906 	bl	8002ad4 <FLASH_OB_RDP_LevelConfig>
 80028c8:	4603      	mov	r3, r0
 80028ca:	73fb      	strb	r3, [r7, #15]
  }

  /*USER  configuration*/
  if ((pOBInit->OptionType & OPTIONBYTE_USER) == OPTIONBYTE_USER)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 0304 	and.w	r3, r3, #4
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d013      	beq.n	8002900 <HAL_FLASHEx_OBProgram+0xac>
  {
    status = FLASH_OB_UserConfig(pOBInit->USERConfig & OB_IWDG_SW,
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	7e1b      	ldrb	r3, [r3, #24]
 80028dc:	f003 0320 	and.w	r3, r3, #32
 80028e0:	b2d8      	uxtb	r0, r3
                                 pOBInit->USERConfig & OB_STOP_NO_RST,
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	7e1b      	ldrb	r3, [r3, #24]
    status = FLASH_OB_UserConfig(pOBInit->USERConfig & OB_IWDG_SW,
 80028e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028ea:	b2d9      	uxtb	r1, r3
                                 pOBInit->USERConfig & OB_STDBY_NO_RST);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	7e1b      	ldrb	r3, [r3, #24]
    status = FLASH_OB_UserConfig(pOBInit->USERConfig & OB_IWDG_SW,
 80028f0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	461a      	mov	r2, r3
 80028f8:	f000 f906 	bl	8002b08 <FLASH_OB_UserConfig>
 80028fc:	4603      	mov	r3, r0
 80028fe:	73fb      	strb	r3, [r7, #15]
  }

  /*BOR Level  configuration*/
  if ((pOBInit->OptionType & OPTIONBYTE_BOR) == OPTIONBYTE_BOR)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0308 	and.w	r3, r3, #8
 8002908:	2b00      	cmp	r3, #0
 800290a:	d007      	beq.n	800291c <HAL_FLASHEx_OBProgram+0xc8>
  {
    status = FLASH_OB_BOR_LevelConfig(pOBInit->BORLevel);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	695b      	ldr	r3, [r3, #20]
 8002910:	b2db      	uxtb	r3, r3
 8002912:	4618      	mov	r0, r3
 8002914:	f000 f928 	bl	8002b68 <FLASH_OB_BOR_LevelConfig>
 8002918:	4603      	mov	r3, r0
 800291a:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800291c:	4b03      	ldr	r3, [pc, #12]	; (800292c <HAL_FLASHEx_OBProgram+0xd8>)
 800291e:	2200      	movs	r2, #0
 8002920:	761a      	strb	r2, [r3, #24]

  return status;
 8002922:	7bfb      	ldrb	r3, [r7, #15]
}
 8002924:	4618      	mov	r0, r3
 8002926:	3710      	adds	r7, #16
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}
 800292c:	200000e8 	.word	0x200000e8

08002930 <HAL_FLASHEx_OBGetConfig>:
  *         contains the configuration information for the programming.
  *
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER | OPTIONBYTE_BOR;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	220f      	movs	r2, #15
 800293c:	601a      	str	r2, [r3, #0]

  /*Get WRP*/
  pOBInit->WRPSector = (uint32_t)FLASH_OB_GetWRP();
 800293e:	f000 f941 	bl	8002bc4 <FLASH_OB_GetWRP>
 8002942:	4603      	mov	r3, r0
 8002944:	461a      	mov	r2, r3
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	609a      	str	r2, [r3, #8]

  /*Get RDP Level*/
  pOBInit->RDPLevel = (uint32_t)FLASH_OB_GetRDP();
 800294a:	f000 f947 	bl	8002bdc <FLASH_OB_GetRDP>
 800294e:	4603      	mov	r3, r0
 8002950:	461a      	mov	r2, r3
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	611a      	str	r2, [r3, #16]

  /*Get USER*/
  pOBInit->USERConfig = (uint8_t)FLASH_OB_GetUser();
 8002956:	f000 f925 	bl	8002ba4 <FLASH_OB_GetUser>
 800295a:	4603      	mov	r3, r0
 800295c:	461a      	mov	r2, r3
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	761a      	strb	r2, [r3, #24]

  /*Get BOR Level*/
  pOBInit->BORLevel = (uint32_t)FLASH_OB_GetBOR();
 8002962:	f000 f95b 	bl	8002c1c <FLASH_OB_GetBOR>
 8002966:	4603      	mov	r3, r0
 8002968:	461a      	mov	r2, r3
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	615a      	str	r2, [r3, #20]
}
 800296e:	bf00      	nop
 8002970:	3708      	adds	r7, #8
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
	...

08002978 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8002978:	b480      	push	{r7}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
 800297e:	4603      	mov	r3, r0
 8002980:	6039      	str	r1, [r7, #0]
 8002982:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002984:	4b0d      	ldr	r3, [pc, #52]	; (80029bc <FLASH_MassErase+0x44>)
 8002986:	691b      	ldr	r3, [r3, #16]
 8002988:	4a0c      	ldr	r2, [pc, #48]	; (80029bc <FLASH_MassErase+0x44>)
 800298a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800298e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8002990:	4b0a      	ldr	r3, [pc, #40]	; (80029bc <FLASH_MassErase+0x44>)
 8002992:	691b      	ldr	r3, [r3, #16]
 8002994:	4a09      	ldr	r2, [pc, #36]	; (80029bc <FLASH_MassErase+0x44>)
 8002996:	f043 0304 	orr.w	r3, r3, #4
 800299a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 800299c:	4b07      	ldr	r3, [pc, #28]	; (80029bc <FLASH_MassErase+0x44>)
 800299e:	691a      	ldr	r2, [r3, #16]
 80029a0:	79fb      	ldrb	r3, [r7, #7]
 80029a2:	021b      	lsls	r3, r3, #8
 80029a4:	4313      	orrs	r3, r2
 80029a6:	4a05      	ldr	r2, [pc, #20]	; (80029bc <FLASH_MassErase+0x44>)
 80029a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029ac:	6113      	str	r3, [r2, #16]
}
 80029ae:	bf00      	nop
 80029b0:	370c      	adds	r7, #12
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr
 80029ba:	bf00      	nop
 80029bc:	40023c00 	.word	0x40023c00

080029c0 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b085      	sub	sp, #20
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	460b      	mov	r3, r1
 80029ca:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80029cc:	2300      	movs	r3, #0
 80029ce:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80029d0:	78fb      	ldrb	r3, [r7, #3]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d102      	bne.n	80029dc <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 80029d6:	2300      	movs	r3, #0
 80029d8:	60fb      	str	r3, [r7, #12]
 80029da:	e010      	b.n	80029fe <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80029dc:	78fb      	ldrb	r3, [r7, #3]
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d103      	bne.n	80029ea <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80029e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80029e6:	60fb      	str	r3, [r7, #12]
 80029e8:	e009      	b.n	80029fe <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80029ea:	78fb      	ldrb	r3, [r7, #3]
 80029ec:	2b02      	cmp	r3, #2
 80029ee:	d103      	bne.n	80029f8 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80029f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80029f4:	60fb      	str	r3, [r7, #12]
 80029f6:	e002      	b.n	80029fe <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80029f8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80029fc:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80029fe:	4b13      	ldr	r3, [pc, #76]	; (8002a4c <FLASH_Erase_Sector+0x8c>)
 8002a00:	691b      	ldr	r3, [r3, #16]
 8002a02:	4a12      	ldr	r2, [pc, #72]	; (8002a4c <FLASH_Erase_Sector+0x8c>)
 8002a04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a08:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8002a0a:	4b10      	ldr	r3, [pc, #64]	; (8002a4c <FLASH_Erase_Sector+0x8c>)
 8002a0c:	691a      	ldr	r2, [r3, #16]
 8002a0e:	490f      	ldr	r1, [pc, #60]	; (8002a4c <FLASH_Erase_Sector+0x8c>)
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8002a16:	4b0d      	ldr	r3, [pc, #52]	; (8002a4c <FLASH_Erase_Sector+0x8c>)
 8002a18:	691b      	ldr	r3, [r3, #16]
 8002a1a:	4a0c      	ldr	r2, [pc, #48]	; (8002a4c <FLASH_Erase_Sector+0x8c>)
 8002a1c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002a20:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8002a22:	4b0a      	ldr	r3, [pc, #40]	; (8002a4c <FLASH_Erase_Sector+0x8c>)
 8002a24:	691a      	ldr	r2, [r3, #16]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	00db      	lsls	r3, r3, #3
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	4a07      	ldr	r2, [pc, #28]	; (8002a4c <FLASH_Erase_Sector+0x8c>)
 8002a2e:	f043 0302 	orr.w	r3, r3, #2
 8002a32:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8002a34:	4b05      	ldr	r3, [pc, #20]	; (8002a4c <FLASH_Erase_Sector+0x8c>)
 8002a36:	691b      	ldr	r3, [r3, #16]
 8002a38:	4a04      	ldr	r2, [pc, #16]	; (8002a4c <FLASH_Erase_Sector+0x8c>)
 8002a3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a3e:	6113      	str	r3, [r2, #16]
}
 8002a40:	bf00      	nop
 8002a42:	3714      	adds	r7, #20
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr
 8002a4c:	40023c00 	.word	0x40023c00

08002a50 <FLASH_OB_EnableWRP>:
  *            @arg FLASH_BANK_1: WRP on all sectors of bank1
  *
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_EnableWRP(uint32_t WRPSector, uint32_t Banks)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
  assert_param(IS_FLASH_BANK(Banks));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002a5e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002a62:	f7ff fd57 	bl	8002514 <FLASH_WaitForLastOperation>
 8002a66:	4603      	mov	r3, r0
 8002a68:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002a6a:	7bfb      	ldrb	r3, [r7, #15]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d10a      	bne.n	8002a86 <FLASH_OB_EnableWRP+0x36>
  {
    *(__IO uint16_t *)OPTCR_BYTE2_ADDRESS &= (~WRPSector);
 8002a70:	4b07      	ldr	r3, [pc, #28]	; (8002a90 <FLASH_OB_EnableWRP+0x40>)
 8002a72:	881b      	ldrh	r3, [r3, #0]
 8002a74:	b29a      	uxth	r2, r3
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	b29b      	uxth	r3, r3
 8002a7a:	43db      	mvns	r3, r3
 8002a7c:	b29b      	uxth	r3, r3
 8002a7e:	4904      	ldr	r1, [pc, #16]	; (8002a90 <FLASH_OB_EnableWRP+0x40>)
 8002a80:	4013      	ands	r3, r2
 8002a82:	b29b      	uxth	r3, r3
 8002a84:	800b      	strh	r3, [r1, #0]
  }

  return status;
 8002a86:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3710      	adds	r7, #16
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	40023c16 	.word	0x40023c16

08002a94 <FLASH_OB_DisableWRP>:
  *            @arg FLASH_BANK_1: WRP on all sectors of bank1
  *
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_DisableWRP(uint32_t WRPSector, uint32_t Banks)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b084      	sub	sp, #16
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
 8002a9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
  assert_param(IS_FLASH_BANK(Banks));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002aa2:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002aa6:	f7ff fd35 	bl	8002514 <FLASH_WaitForLastOperation>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002aae:	7bfb      	ldrb	r3, [r7, #15]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d108      	bne.n	8002ac6 <FLASH_OB_DisableWRP+0x32>
  {
    *(__IO uint16_t *)OPTCR_BYTE2_ADDRESS |= (uint16_t)WRPSector;
 8002ab4:	4b06      	ldr	r3, [pc, #24]	; (8002ad0 <FLASH_OB_DisableWRP+0x3c>)
 8002ab6:	881b      	ldrh	r3, [r3, #0]
 8002ab8:	b29a      	uxth	r2, r3
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	b29b      	uxth	r3, r3
 8002abe:	4904      	ldr	r1, [pc, #16]	; (8002ad0 <FLASH_OB_DisableWRP+0x3c>)
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	b29b      	uxth	r3, r3
 8002ac4:	800b      	strh	r3, [r1, #0]
  }

  return status;
 8002ac6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3710      	adds	r7, #16
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	40023c16 	.word	0x40023c16

08002ad4 <FLASH_OB_RDP_LevelConfig>:
  * @note WARNING: When enabling OB_RDP level 2 it's no more possible to go back to level 1 or 0
  *
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_RDP_LevelConfig(uint8_t Level)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b084      	sub	sp, #16
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	4603      	mov	r3, r0
 8002adc:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_OB_RDP_LEVEL(Level));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002ae2:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002ae6:	f7ff fd15 	bl	8002514 <FLASH_WaitForLastOperation>
 8002aea:	4603      	mov	r3, r0
 8002aec:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002aee:	7bfb      	ldrb	r3, [r7, #15]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d102      	bne.n	8002afa <FLASH_OB_RDP_LevelConfig+0x26>
  {
    *(__IO uint8_t *)OPTCR_BYTE1_ADDRESS = Level;
 8002af4:	4a03      	ldr	r2, [pc, #12]	; (8002b04 <FLASH_OB_RDP_LevelConfig+0x30>)
 8002af6:	79fb      	ldrb	r3, [r7, #7]
 8002af8:	7013      	strb	r3, [r2, #0]
  }

  return status;
 8002afa:	7bfb      	ldrb	r3, [r7, #15]
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	3710      	adds	r7, #16
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	40023c15 	.word	0x40023c15

08002b08 <FLASH_OB_UserConfig>:
  *            @arg OB_STDBY_NO_RST: No reset generated when entering in STANDBY
  *            @arg OB_STDBY_RST: Reset generated when entering in STANDBY
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_UserConfig(uint8_t Iwdg, uint8_t Stop, uint8_t Stdby)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b084      	sub	sp, #16
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	4603      	mov	r3, r0
 8002b10:	71fb      	strb	r3, [r7, #7]
 8002b12:	460b      	mov	r3, r1
 8002b14:	71bb      	strb	r3, [r7, #6]
 8002b16:	4613      	mov	r3, r2
 8002b18:	717b      	strb	r3, [r7, #5]
  uint8_t optiontmp = 0xFF;
 8002b1a:	23ff      	movs	r3, #255	; 0xff
 8002b1c:	73fb      	strb	r3, [r7, #15]
  HAL_StatusTypeDef status = HAL_OK;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	73bb      	strb	r3, [r7, #14]
  assert_param(IS_OB_IWDG_SOURCE(Iwdg));
  assert_param(IS_OB_STOP_SOURCE(Stop));
  assert_param(IS_OB_STDBY_SOURCE(Stdby));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002b22:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002b26:	f7ff fcf5 	bl	8002514 <FLASH_WaitForLastOperation>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	73bb      	strb	r3, [r7, #14]

  if (status == HAL_OK)
 8002b2e:	7bbb      	ldrb	r3, [r7, #14]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d111      	bne.n	8002b58 <FLASH_OB_UserConfig+0x50>
  {
    /* Mask OPTLOCK, OPTSTRT, BOR_LEV and BFB2 bits */
    optiontmp = (uint8_t)((*(__IO uint8_t *)OPTCR_BYTE0_ADDRESS) & (uint8_t)0x1F);
 8002b34:	4b0b      	ldr	r3, [pc, #44]	; (8002b64 <FLASH_OB_UserConfig+0x5c>)
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	f003 031f 	and.w	r3, r3, #31
 8002b3e:	73fb      	strb	r3, [r7, #15]

    /* Update User Option Byte */
    *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS = Iwdg | (uint8_t)(Stdby | (uint8_t)(Stop | ((uint8_t)optiontmp)));
 8002b40:	79ba      	ldrb	r2, [r7, #6]
 8002b42:	7bfb      	ldrb	r3, [r7, #15]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	b2da      	uxtb	r2, r3
 8002b48:	797b      	ldrb	r3, [r7, #5]
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	b2da      	uxtb	r2, r3
 8002b4e:	4905      	ldr	r1, [pc, #20]	; (8002b64 <FLASH_OB_UserConfig+0x5c>)
 8002b50:	79fb      	ldrb	r3, [r7, #7]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	700b      	strb	r3, [r1, #0]
  }

  return status;
 8002b58:	7bbb      	ldrb	r3, [r7, #14]
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	3710      	adds	r7, #16
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	40023c14 	.word	0x40023c14

08002b68 <FLASH_OB_BOR_LevelConfig>:
  *            @arg OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *            @arg OB_BOR_OFF: Supply voltage ranges from 1.62 to 2.1 V
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_BOR_LevelConfig(uint8_t Level)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	4603      	mov	r3, r0
 8002b70:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_OB_BOR_LEVEL(Level));

  /* Set the BOR Level */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS &= (~FLASH_OPTCR_BOR_LEV);
 8002b72:	4b0b      	ldr	r3, [pc, #44]	; (8002ba0 <FLASH_OB_BOR_LevelConfig+0x38>)
 8002b74:	781b      	ldrb	r3, [r3, #0]
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	4a09      	ldr	r2, [pc, #36]	; (8002ba0 <FLASH_OB_BOR_LevelConfig+0x38>)
 8002b7a:	f023 030c 	bic.w	r3, r3, #12
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	7013      	strb	r3, [r2, #0]
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= Level;
 8002b82:	4b07      	ldr	r3, [pc, #28]	; (8002ba0 <FLASH_OB_BOR_LevelConfig+0x38>)
 8002b84:	781b      	ldrb	r3, [r3, #0]
 8002b86:	b2da      	uxtb	r2, r3
 8002b88:	4905      	ldr	r1, [pc, #20]	; (8002ba0 <FLASH_OB_BOR_LevelConfig+0x38>)
 8002b8a:	79fb      	ldrb	r3, [r7, #7]
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	700b      	strb	r3, [r1, #0]

  return HAL_OK;
 8002b92:	2300      	movs	r3, #0

}
 8002b94:	4618      	mov	r0, r3
 8002b96:	370c      	adds	r7, #12
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr
 8002ba0:	40023c14 	.word	0x40023c14

08002ba4 <FLASH_OB_GetUser>:
  * @brief  Return the FLASH User Option Byte value.
  * @retval uint8_t FLASH User Option Bytes values: IWDG_SW(Bit0), RST_STOP(Bit1)
  *         and RST_STDBY(Bit2).
  */
static uint8_t FLASH_OB_GetUser(void)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	af00      	add	r7, sp, #0
  /* Return the User Option Byte */
  return ((uint8_t)(FLASH->OPTCR & 0xE0));
 8002ba8:	4b05      	ldr	r3, [pc, #20]	; (8002bc0 <FLASH_OB_GetUser+0x1c>)
 8002baa:	695b      	ldr	r3, [r3, #20]
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	f023 031f 	bic.w	r3, r3, #31
 8002bb2:	b2db      	uxtb	r3, r3
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr
 8002bbe:	bf00      	nop
 8002bc0:	40023c00 	.word	0x40023c00

08002bc4 <FLASH_OB_GetWRP>:
/**
  * @brief  Return the FLASH Write Protection Option Bytes value.
  * @retval uint16_t FLASH Write Protection Option Bytes value
  */
static uint16_t FLASH_OB_GetWRP(void)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	af00      	add	r7, sp, #0
  /* Return the FLASH write protection Register value */
  return (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
 8002bc8:	4b03      	ldr	r3, [pc, #12]	; (8002bd8 <FLASH_OB_GetWRP+0x14>)
 8002bca:	881b      	ldrh	r3, [r3, #0]
 8002bcc:	b29b      	uxth	r3, r3
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr
 8002bd8:	40023c16 	.word	0x40023c16

08002bdc <FLASH_OB_GetRDP>:
  *            @arg OB_RDP_LEVEL_0: No protection
  *            @arg OB_RDP_LEVEL_1: Read protection of the memory
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  */
static uint8_t FLASH_OB_GetRDP(void)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b083      	sub	sp, #12
 8002be0:	af00      	add	r7, sp, #0
  uint8_t readstatus = OB_RDP_LEVEL_0;
 8002be2:	23aa      	movs	r3, #170	; 0xaa
 8002be4:	71fb      	strb	r3, [r7, #7]

  if (*(__IO uint8_t *)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_2)
 8002be6:	4b0c      	ldr	r3, [pc, #48]	; (8002c18 <FLASH_OB_GetRDP+0x3c>)
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	2bcc      	cmp	r3, #204	; 0xcc
 8002bee:	d102      	bne.n	8002bf6 <FLASH_OB_GetRDP+0x1a>
  {
    readstatus = OB_RDP_LEVEL_2;
 8002bf0:	23cc      	movs	r3, #204	; 0xcc
 8002bf2:	71fb      	strb	r3, [r7, #7]
 8002bf4:	e009      	b.n	8002c0a <FLASH_OB_GetRDP+0x2e>
  }
  else if (*(__IO uint8_t *)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_0)
 8002bf6:	4b08      	ldr	r3, [pc, #32]	; (8002c18 <FLASH_OB_GetRDP+0x3c>)
 8002bf8:	781b      	ldrb	r3, [r3, #0]
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	2baa      	cmp	r3, #170	; 0xaa
 8002bfe:	d102      	bne.n	8002c06 <FLASH_OB_GetRDP+0x2a>
  {
    readstatus = OB_RDP_LEVEL_0;
 8002c00:	23aa      	movs	r3, #170	; 0xaa
 8002c02:	71fb      	strb	r3, [r7, #7]
 8002c04:	e001      	b.n	8002c0a <FLASH_OB_GetRDP+0x2e>
  }
  else
  {
    readstatus = OB_RDP_LEVEL_1;
 8002c06:	2355      	movs	r3, #85	; 0x55
 8002c08:	71fb      	strb	r3, [r7, #7]
  }

  return readstatus;
 8002c0a:	79fb      	ldrb	r3, [r7, #7]
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	370c      	adds	r7, #12
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr
 8002c18:	40023c15 	.word	0x40023c15

08002c1c <FLASH_OB_GetBOR>:
  *           - OB_BOR_LEVEL2: Supply voltage ranges from 2.4 to 2.7 V
  *           - OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *           - OB_BOR_OFF   : Supply voltage ranges from 1.62 to 2.1 V
  */
static uint8_t FLASH_OB_GetBOR(void)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	af00      	add	r7, sp, #0
  /* Return the FLASH BOR level */
  return (uint8_t)(*(__IO uint8_t *)(OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0C);
 8002c20:	4b05      	ldr	r3, [pc, #20]	; (8002c38 <FLASH_OB_GetBOR+0x1c>)
 8002c22:	781b      	ldrb	r3, [r3, #0]
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	f003 030c 	and.w	r3, r3, #12
 8002c2a:	b2db      	uxtb	r3, r3
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr
 8002c36:	bf00      	nop
 8002c38:	40023c14 	.word	0x40023c14

08002c3c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8002c40:	4b20      	ldr	r3, [pc, #128]	; (8002cc4 <FLASH_FlushCaches+0x88>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d017      	beq.n	8002c7c <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8002c4c:	4b1d      	ldr	r3, [pc, #116]	; (8002cc4 <FLASH_FlushCaches+0x88>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a1c      	ldr	r2, [pc, #112]	; (8002cc4 <FLASH_FlushCaches+0x88>)
 8002c52:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002c56:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8002c58:	4b1a      	ldr	r3, [pc, #104]	; (8002cc4 <FLASH_FlushCaches+0x88>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a19      	ldr	r2, [pc, #100]	; (8002cc4 <FLASH_FlushCaches+0x88>)
 8002c5e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002c62:	6013      	str	r3, [r2, #0]
 8002c64:	4b17      	ldr	r3, [pc, #92]	; (8002cc4 <FLASH_FlushCaches+0x88>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a16      	ldr	r2, [pc, #88]	; (8002cc4 <FLASH_FlushCaches+0x88>)
 8002c6a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002c6e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002c70:	4b14      	ldr	r3, [pc, #80]	; (8002cc4 <FLASH_FlushCaches+0x88>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a13      	ldr	r2, [pc, #76]	; (8002cc4 <FLASH_FlushCaches+0x88>)
 8002c76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c7a:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8002c7c:	4b11      	ldr	r3, [pc, #68]	; (8002cc4 <FLASH_FlushCaches+0x88>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d017      	beq.n	8002cb8 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8002c88:	4b0e      	ldr	r3, [pc, #56]	; (8002cc4 <FLASH_FlushCaches+0x88>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a0d      	ldr	r2, [pc, #52]	; (8002cc4 <FLASH_FlushCaches+0x88>)
 8002c8e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002c92:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8002c94:	4b0b      	ldr	r3, [pc, #44]	; (8002cc4 <FLASH_FlushCaches+0x88>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a0a      	ldr	r2, [pc, #40]	; (8002cc4 <FLASH_FlushCaches+0x88>)
 8002c9a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002c9e:	6013      	str	r3, [r2, #0]
 8002ca0:	4b08      	ldr	r3, [pc, #32]	; (8002cc4 <FLASH_FlushCaches+0x88>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a07      	ldr	r2, [pc, #28]	; (8002cc4 <FLASH_FlushCaches+0x88>)
 8002ca6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002caa:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8002cac:	4b05      	ldr	r3, [pc, #20]	; (8002cc4 <FLASH_FlushCaches+0x88>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a04      	ldr	r2, [pc, #16]	; (8002cc4 <FLASH_FlushCaches+0x88>)
 8002cb2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002cb6:	6013      	str	r3, [r2, #0]
  }
}
 8002cb8:	bf00      	nop
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr
 8002cc2:	bf00      	nop
 8002cc4:	40023c00 	.word	0x40023c00

08002cc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b089      	sub	sp, #36	; 0x24
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
 8002cd0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cde:	2300      	movs	r3, #0
 8002ce0:	61fb      	str	r3, [r7, #28]
 8002ce2:	e16b      	b.n	8002fbc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	697a      	ldr	r2, [r7, #20]
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002cf8:	693a      	ldr	r2, [r7, #16]
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	f040 815a 	bne.w	8002fb6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	f003 0303 	and.w	r3, r3, #3
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d005      	beq.n	8002d1a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d16:	2b02      	cmp	r3, #2
 8002d18:	d130      	bne.n	8002d7c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d20:	69fb      	ldr	r3, [r7, #28]
 8002d22:	005b      	lsls	r3, r3, #1
 8002d24:	2203      	movs	r2, #3
 8002d26:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2a:	43db      	mvns	r3, r3
 8002d2c:	69ba      	ldr	r2, [r7, #24]
 8002d2e:	4013      	ands	r3, r2
 8002d30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	68da      	ldr	r2, [r3, #12]
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	005b      	lsls	r3, r3, #1
 8002d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3e:	69ba      	ldr	r2, [r7, #24]
 8002d40:	4313      	orrs	r3, r2
 8002d42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	69ba      	ldr	r2, [r7, #24]
 8002d48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d50:	2201      	movs	r2, #1
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	fa02 f303 	lsl.w	r3, r2, r3
 8002d58:	43db      	mvns	r3, r3
 8002d5a:	69ba      	ldr	r2, [r7, #24]
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	091b      	lsrs	r3, r3, #4
 8002d66:	f003 0201 	and.w	r2, r3, #1
 8002d6a:	69fb      	ldr	r3, [r7, #28]
 8002d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d70:	69ba      	ldr	r2, [r7, #24]
 8002d72:	4313      	orrs	r3, r2
 8002d74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	69ba      	ldr	r2, [r7, #24]
 8002d7a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f003 0303 	and.w	r3, r3, #3
 8002d84:	2b03      	cmp	r3, #3
 8002d86:	d017      	beq.n	8002db8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d8e:	69fb      	ldr	r3, [r7, #28]
 8002d90:	005b      	lsls	r3, r3, #1
 8002d92:	2203      	movs	r2, #3
 8002d94:	fa02 f303 	lsl.w	r3, r2, r3
 8002d98:	43db      	mvns	r3, r3
 8002d9a:	69ba      	ldr	r2, [r7, #24]
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	689a      	ldr	r2, [r3, #8]
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	005b      	lsls	r3, r3, #1
 8002da8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dac:	69ba      	ldr	r2, [r7, #24]
 8002dae:	4313      	orrs	r3, r2
 8002db0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	69ba      	ldr	r2, [r7, #24]
 8002db6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	f003 0303 	and.w	r3, r3, #3
 8002dc0:	2b02      	cmp	r3, #2
 8002dc2:	d123      	bne.n	8002e0c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002dc4:	69fb      	ldr	r3, [r7, #28]
 8002dc6:	08da      	lsrs	r2, r3, #3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	3208      	adds	r2, #8
 8002dcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	f003 0307 	and.w	r3, r3, #7
 8002dd8:	009b      	lsls	r3, r3, #2
 8002dda:	220f      	movs	r2, #15
 8002ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8002de0:	43db      	mvns	r3, r3
 8002de2:	69ba      	ldr	r2, [r7, #24]
 8002de4:	4013      	ands	r3, r2
 8002de6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	691a      	ldr	r2, [r3, #16]
 8002dec:	69fb      	ldr	r3, [r7, #28]
 8002dee:	f003 0307 	and.w	r3, r3, #7
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	fa02 f303 	lsl.w	r3, r2, r3
 8002df8:	69ba      	ldr	r2, [r7, #24]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	08da      	lsrs	r2, r3, #3
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	3208      	adds	r2, #8
 8002e06:	69b9      	ldr	r1, [r7, #24]
 8002e08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	005b      	lsls	r3, r3, #1
 8002e16:	2203      	movs	r2, #3
 8002e18:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1c:	43db      	mvns	r3, r3
 8002e1e:	69ba      	ldr	r2, [r7, #24]
 8002e20:	4013      	ands	r3, r2
 8002e22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	f003 0203 	and.w	r2, r3, #3
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	005b      	lsls	r3, r3, #1
 8002e30:	fa02 f303 	lsl.w	r3, r2, r3
 8002e34:	69ba      	ldr	r2, [r7, #24]
 8002e36:	4313      	orrs	r3, r2
 8002e38:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	69ba      	ldr	r2, [r7, #24]
 8002e3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	f000 80b4 	beq.w	8002fb6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e4e:	2300      	movs	r3, #0
 8002e50:	60fb      	str	r3, [r7, #12]
 8002e52:	4b60      	ldr	r3, [pc, #384]	; (8002fd4 <HAL_GPIO_Init+0x30c>)
 8002e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e56:	4a5f      	ldr	r2, [pc, #380]	; (8002fd4 <HAL_GPIO_Init+0x30c>)
 8002e58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e5c:	6453      	str	r3, [r2, #68]	; 0x44
 8002e5e:	4b5d      	ldr	r3, [pc, #372]	; (8002fd4 <HAL_GPIO_Init+0x30c>)
 8002e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e66:	60fb      	str	r3, [r7, #12]
 8002e68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e6a:	4a5b      	ldr	r2, [pc, #364]	; (8002fd8 <HAL_GPIO_Init+0x310>)
 8002e6c:	69fb      	ldr	r3, [r7, #28]
 8002e6e:	089b      	lsrs	r3, r3, #2
 8002e70:	3302      	adds	r3, #2
 8002e72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e78:	69fb      	ldr	r3, [r7, #28]
 8002e7a:	f003 0303 	and.w	r3, r3, #3
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	220f      	movs	r2, #15
 8002e82:	fa02 f303 	lsl.w	r3, r2, r3
 8002e86:	43db      	mvns	r3, r3
 8002e88:	69ba      	ldr	r2, [r7, #24]
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	4a52      	ldr	r2, [pc, #328]	; (8002fdc <HAL_GPIO_Init+0x314>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d02b      	beq.n	8002eee <HAL_GPIO_Init+0x226>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	4a51      	ldr	r2, [pc, #324]	; (8002fe0 <HAL_GPIO_Init+0x318>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d025      	beq.n	8002eea <HAL_GPIO_Init+0x222>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	4a50      	ldr	r2, [pc, #320]	; (8002fe4 <HAL_GPIO_Init+0x31c>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d01f      	beq.n	8002ee6 <HAL_GPIO_Init+0x21e>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	4a4f      	ldr	r2, [pc, #316]	; (8002fe8 <HAL_GPIO_Init+0x320>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d019      	beq.n	8002ee2 <HAL_GPIO_Init+0x21a>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	4a4e      	ldr	r2, [pc, #312]	; (8002fec <HAL_GPIO_Init+0x324>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d013      	beq.n	8002ede <HAL_GPIO_Init+0x216>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	4a4d      	ldr	r2, [pc, #308]	; (8002ff0 <HAL_GPIO_Init+0x328>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d00d      	beq.n	8002eda <HAL_GPIO_Init+0x212>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	4a4c      	ldr	r2, [pc, #304]	; (8002ff4 <HAL_GPIO_Init+0x32c>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d007      	beq.n	8002ed6 <HAL_GPIO_Init+0x20e>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	4a4b      	ldr	r2, [pc, #300]	; (8002ff8 <HAL_GPIO_Init+0x330>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d101      	bne.n	8002ed2 <HAL_GPIO_Init+0x20a>
 8002ece:	2307      	movs	r3, #7
 8002ed0:	e00e      	b.n	8002ef0 <HAL_GPIO_Init+0x228>
 8002ed2:	2308      	movs	r3, #8
 8002ed4:	e00c      	b.n	8002ef0 <HAL_GPIO_Init+0x228>
 8002ed6:	2306      	movs	r3, #6
 8002ed8:	e00a      	b.n	8002ef0 <HAL_GPIO_Init+0x228>
 8002eda:	2305      	movs	r3, #5
 8002edc:	e008      	b.n	8002ef0 <HAL_GPIO_Init+0x228>
 8002ede:	2304      	movs	r3, #4
 8002ee0:	e006      	b.n	8002ef0 <HAL_GPIO_Init+0x228>
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	e004      	b.n	8002ef0 <HAL_GPIO_Init+0x228>
 8002ee6:	2302      	movs	r3, #2
 8002ee8:	e002      	b.n	8002ef0 <HAL_GPIO_Init+0x228>
 8002eea:	2301      	movs	r3, #1
 8002eec:	e000      	b.n	8002ef0 <HAL_GPIO_Init+0x228>
 8002eee:	2300      	movs	r3, #0
 8002ef0:	69fa      	ldr	r2, [r7, #28]
 8002ef2:	f002 0203 	and.w	r2, r2, #3
 8002ef6:	0092      	lsls	r2, r2, #2
 8002ef8:	4093      	lsls	r3, r2
 8002efa:	69ba      	ldr	r2, [r7, #24]
 8002efc:	4313      	orrs	r3, r2
 8002efe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f00:	4935      	ldr	r1, [pc, #212]	; (8002fd8 <HAL_GPIO_Init+0x310>)
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	089b      	lsrs	r3, r3, #2
 8002f06:	3302      	adds	r3, #2
 8002f08:	69ba      	ldr	r2, [r7, #24]
 8002f0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f0e:	4b3b      	ldr	r3, [pc, #236]	; (8002ffc <HAL_GPIO_Init+0x334>)
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	43db      	mvns	r3, r3
 8002f18:	69ba      	ldr	r2, [r7, #24]
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d003      	beq.n	8002f32 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002f2a:	69ba      	ldr	r2, [r7, #24]
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f32:	4a32      	ldr	r2, [pc, #200]	; (8002ffc <HAL_GPIO_Init+0x334>)
 8002f34:	69bb      	ldr	r3, [r7, #24]
 8002f36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f38:	4b30      	ldr	r3, [pc, #192]	; (8002ffc <HAL_GPIO_Init+0x334>)
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	43db      	mvns	r3, r3
 8002f42:	69ba      	ldr	r2, [r7, #24]
 8002f44:	4013      	ands	r3, r2
 8002f46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d003      	beq.n	8002f5c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002f54:	69ba      	ldr	r2, [r7, #24]
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f5c:	4a27      	ldr	r2, [pc, #156]	; (8002ffc <HAL_GPIO_Init+0x334>)
 8002f5e:	69bb      	ldr	r3, [r7, #24]
 8002f60:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f62:	4b26      	ldr	r3, [pc, #152]	; (8002ffc <HAL_GPIO_Init+0x334>)
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	43db      	mvns	r3, r3
 8002f6c:	69ba      	ldr	r2, [r7, #24]
 8002f6e:	4013      	ands	r3, r2
 8002f70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d003      	beq.n	8002f86 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002f7e:	69ba      	ldr	r2, [r7, #24]
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	4313      	orrs	r3, r2
 8002f84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f86:	4a1d      	ldr	r2, [pc, #116]	; (8002ffc <HAL_GPIO_Init+0x334>)
 8002f88:	69bb      	ldr	r3, [r7, #24]
 8002f8a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f8c:	4b1b      	ldr	r3, [pc, #108]	; (8002ffc <HAL_GPIO_Init+0x334>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	43db      	mvns	r3, r3
 8002f96:	69ba      	ldr	r2, [r7, #24]
 8002f98:	4013      	ands	r3, r2
 8002f9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d003      	beq.n	8002fb0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002fa8:	69ba      	ldr	r2, [r7, #24]
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	4313      	orrs	r3, r2
 8002fae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002fb0:	4a12      	ldr	r2, [pc, #72]	; (8002ffc <HAL_GPIO_Init+0x334>)
 8002fb2:	69bb      	ldr	r3, [r7, #24]
 8002fb4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	3301      	adds	r3, #1
 8002fba:	61fb      	str	r3, [r7, #28]
 8002fbc:	69fb      	ldr	r3, [r7, #28]
 8002fbe:	2b0f      	cmp	r3, #15
 8002fc0:	f67f ae90 	bls.w	8002ce4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002fc4:	bf00      	nop
 8002fc6:	bf00      	nop
 8002fc8:	3724      	adds	r7, #36	; 0x24
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr
 8002fd2:	bf00      	nop
 8002fd4:	40023800 	.word	0x40023800
 8002fd8:	40013800 	.word	0x40013800
 8002fdc:	40020000 	.word	0x40020000
 8002fe0:	40020400 	.word	0x40020400
 8002fe4:	40020800 	.word	0x40020800
 8002fe8:	40020c00 	.word	0x40020c00
 8002fec:	40021000 	.word	0x40021000
 8002ff0:	40021400 	.word	0x40021400
 8002ff4:	40021800 	.word	0x40021800
 8002ff8:	40021c00 	.word	0x40021c00
 8002ffc:	40013c00 	.word	0x40013c00

08003000 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003000:	b480      	push	{r7}
 8003002:	b085      	sub	sp, #20
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	460b      	mov	r3, r1
 800300a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	691a      	ldr	r2, [r3, #16]
 8003010:	887b      	ldrh	r3, [r7, #2]
 8003012:	4013      	ands	r3, r2
 8003014:	2b00      	cmp	r3, #0
 8003016:	d002      	beq.n	800301e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003018:	2301      	movs	r3, #1
 800301a:	73fb      	strb	r3, [r7, #15]
 800301c:	e001      	b.n	8003022 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800301e:	2300      	movs	r3, #0
 8003020:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003022:	7bfb      	ldrb	r3, [r7, #15]
}
 8003024:	4618      	mov	r0, r3
 8003026:	3714      	adds	r7, #20
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr

08003030 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003030:	b480      	push	{r7}
 8003032:	b083      	sub	sp, #12
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	460b      	mov	r3, r1
 800303a:	807b      	strh	r3, [r7, #2]
 800303c:	4613      	mov	r3, r2
 800303e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003040:	787b      	ldrb	r3, [r7, #1]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d003      	beq.n	800304e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003046:	887a      	ldrh	r2, [r7, #2]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800304c:	e003      	b.n	8003056 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800304e:	887b      	ldrh	r3, [r7, #2]
 8003050:	041a      	lsls	r2, r3, #16
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	619a      	str	r2, [r3, #24]
}
 8003056:	bf00      	nop
 8003058:	370c      	adds	r7, #12
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr
	...

08003064 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b086      	sub	sp, #24
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d101      	bne.n	8003076 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e267      	b.n	8003546 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 0301 	and.w	r3, r3, #1
 800307e:	2b00      	cmp	r3, #0
 8003080:	d075      	beq.n	800316e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003082:	4b88      	ldr	r3, [pc, #544]	; (80032a4 <HAL_RCC_OscConfig+0x240>)
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	f003 030c 	and.w	r3, r3, #12
 800308a:	2b04      	cmp	r3, #4
 800308c:	d00c      	beq.n	80030a8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800308e:	4b85      	ldr	r3, [pc, #532]	; (80032a4 <HAL_RCC_OscConfig+0x240>)
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003096:	2b08      	cmp	r3, #8
 8003098:	d112      	bne.n	80030c0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800309a:	4b82      	ldr	r3, [pc, #520]	; (80032a4 <HAL_RCC_OscConfig+0x240>)
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030a6:	d10b      	bne.n	80030c0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030a8:	4b7e      	ldr	r3, [pc, #504]	; (80032a4 <HAL_RCC_OscConfig+0x240>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d05b      	beq.n	800316c <HAL_RCC_OscConfig+0x108>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d157      	bne.n	800316c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e242      	b.n	8003546 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030c8:	d106      	bne.n	80030d8 <HAL_RCC_OscConfig+0x74>
 80030ca:	4b76      	ldr	r3, [pc, #472]	; (80032a4 <HAL_RCC_OscConfig+0x240>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a75      	ldr	r2, [pc, #468]	; (80032a4 <HAL_RCC_OscConfig+0x240>)
 80030d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030d4:	6013      	str	r3, [r2, #0]
 80030d6:	e01d      	b.n	8003114 <HAL_RCC_OscConfig+0xb0>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030e0:	d10c      	bne.n	80030fc <HAL_RCC_OscConfig+0x98>
 80030e2:	4b70      	ldr	r3, [pc, #448]	; (80032a4 <HAL_RCC_OscConfig+0x240>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a6f      	ldr	r2, [pc, #444]	; (80032a4 <HAL_RCC_OscConfig+0x240>)
 80030e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030ec:	6013      	str	r3, [r2, #0]
 80030ee:	4b6d      	ldr	r3, [pc, #436]	; (80032a4 <HAL_RCC_OscConfig+0x240>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a6c      	ldr	r2, [pc, #432]	; (80032a4 <HAL_RCC_OscConfig+0x240>)
 80030f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030f8:	6013      	str	r3, [r2, #0]
 80030fa:	e00b      	b.n	8003114 <HAL_RCC_OscConfig+0xb0>
 80030fc:	4b69      	ldr	r3, [pc, #420]	; (80032a4 <HAL_RCC_OscConfig+0x240>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a68      	ldr	r2, [pc, #416]	; (80032a4 <HAL_RCC_OscConfig+0x240>)
 8003102:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003106:	6013      	str	r3, [r2, #0]
 8003108:	4b66      	ldr	r3, [pc, #408]	; (80032a4 <HAL_RCC_OscConfig+0x240>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a65      	ldr	r2, [pc, #404]	; (80032a4 <HAL_RCC_OscConfig+0x240>)
 800310e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003112:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d013      	beq.n	8003144 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800311c:	f7fe ff36 	bl	8001f8c <HAL_GetTick>
 8003120:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003122:	e008      	b.n	8003136 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003124:	f7fe ff32 	bl	8001f8c <HAL_GetTick>
 8003128:	4602      	mov	r2, r0
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	2b64      	cmp	r3, #100	; 0x64
 8003130:	d901      	bls.n	8003136 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003132:	2303      	movs	r3, #3
 8003134:	e207      	b.n	8003546 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003136:	4b5b      	ldr	r3, [pc, #364]	; (80032a4 <HAL_RCC_OscConfig+0x240>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800313e:	2b00      	cmp	r3, #0
 8003140:	d0f0      	beq.n	8003124 <HAL_RCC_OscConfig+0xc0>
 8003142:	e014      	b.n	800316e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003144:	f7fe ff22 	bl	8001f8c <HAL_GetTick>
 8003148:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800314a:	e008      	b.n	800315e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800314c:	f7fe ff1e 	bl	8001f8c <HAL_GetTick>
 8003150:	4602      	mov	r2, r0
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	2b64      	cmp	r3, #100	; 0x64
 8003158:	d901      	bls.n	800315e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800315a:	2303      	movs	r3, #3
 800315c:	e1f3      	b.n	8003546 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800315e:	4b51      	ldr	r3, [pc, #324]	; (80032a4 <HAL_RCC_OscConfig+0x240>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d1f0      	bne.n	800314c <HAL_RCC_OscConfig+0xe8>
 800316a:	e000      	b.n	800316e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800316c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 0302 	and.w	r3, r3, #2
 8003176:	2b00      	cmp	r3, #0
 8003178:	d063      	beq.n	8003242 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800317a:	4b4a      	ldr	r3, [pc, #296]	; (80032a4 <HAL_RCC_OscConfig+0x240>)
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	f003 030c 	and.w	r3, r3, #12
 8003182:	2b00      	cmp	r3, #0
 8003184:	d00b      	beq.n	800319e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003186:	4b47      	ldr	r3, [pc, #284]	; (80032a4 <HAL_RCC_OscConfig+0x240>)
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800318e:	2b08      	cmp	r3, #8
 8003190:	d11c      	bne.n	80031cc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003192:	4b44      	ldr	r3, [pc, #272]	; (80032a4 <HAL_RCC_OscConfig+0x240>)
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800319a:	2b00      	cmp	r3, #0
 800319c:	d116      	bne.n	80031cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800319e:	4b41      	ldr	r3, [pc, #260]	; (80032a4 <HAL_RCC_OscConfig+0x240>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0302 	and.w	r3, r3, #2
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d005      	beq.n	80031b6 <HAL_RCC_OscConfig+0x152>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	68db      	ldr	r3, [r3, #12]
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d001      	beq.n	80031b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e1c7      	b.n	8003546 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031b6:	4b3b      	ldr	r3, [pc, #236]	; (80032a4 <HAL_RCC_OscConfig+0x240>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	691b      	ldr	r3, [r3, #16]
 80031c2:	00db      	lsls	r3, r3, #3
 80031c4:	4937      	ldr	r1, [pc, #220]	; (80032a4 <HAL_RCC_OscConfig+0x240>)
 80031c6:	4313      	orrs	r3, r2
 80031c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031ca:	e03a      	b.n	8003242 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	68db      	ldr	r3, [r3, #12]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d020      	beq.n	8003216 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031d4:	4b34      	ldr	r3, [pc, #208]	; (80032a8 <HAL_RCC_OscConfig+0x244>)
 80031d6:	2201      	movs	r2, #1
 80031d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031da:	f7fe fed7 	bl	8001f8c <HAL_GetTick>
 80031de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031e0:	e008      	b.n	80031f4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031e2:	f7fe fed3 	bl	8001f8c <HAL_GetTick>
 80031e6:	4602      	mov	r2, r0
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	1ad3      	subs	r3, r2, r3
 80031ec:	2b02      	cmp	r3, #2
 80031ee:	d901      	bls.n	80031f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80031f0:	2303      	movs	r3, #3
 80031f2:	e1a8      	b.n	8003546 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031f4:	4b2b      	ldr	r3, [pc, #172]	; (80032a4 <HAL_RCC_OscConfig+0x240>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 0302 	and.w	r3, r3, #2
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d0f0      	beq.n	80031e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003200:	4b28      	ldr	r3, [pc, #160]	; (80032a4 <HAL_RCC_OscConfig+0x240>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	691b      	ldr	r3, [r3, #16]
 800320c:	00db      	lsls	r3, r3, #3
 800320e:	4925      	ldr	r1, [pc, #148]	; (80032a4 <HAL_RCC_OscConfig+0x240>)
 8003210:	4313      	orrs	r3, r2
 8003212:	600b      	str	r3, [r1, #0]
 8003214:	e015      	b.n	8003242 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003216:	4b24      	ldr	r3, [pc, #144]	; (80032a8 <HAL_RCC_OscConfig+0x244>)
 8003218:	2200      	movs	r2, #0
 800321a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800321c:	f7fe feb6 	bl	8001f8c <HAL_GetTick>
 8003220:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003222:	e008      	b.n	8003236 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003224:	f7fe feb2 	bl	8001f8c <HAL_GetTick>
 8003228:	4602      	mov	r2, r0
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	2b02      	cmp	r3, #2
 8003230:	d901      	bls.n	8003236 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003232:	2303      	movs	r3, #3
 8003234:	e187      	b.n	8003546 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003236:	4b1b      	ldr	r3, [pc, #108]	; (80032a4 <HAL_RCC_OscConfig+0x240>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0302 	and.w	r3, r3, #2
 800323e:	2b00      	cmp	r3, #0
 8003240:	d1f0      	bne.n	8003224 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 0308 	and.w	r3, r3, #8
 800324a:	2b00      	cmp	r3, #0
 800324c:	d036      	beq.n	80032bc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	695b      	ldr	r3, [r3, #20]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d016      	beq.n	8003284 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003256:	4b15      	ldr	r3, [pc, #84]	; (80032ac <HAL_RCC_OscConfig+0x248>)
 8003258:	2201      	movs	r2, #1
 800325a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800325c:	f7fe fe96 	bl	8001f8c <HAL_GetTick>
 8003260:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003262:	e008      	b.n	8003276 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003264:	f7fe fe92 	bl	8001f8c <HAL_GetTick>
 8003268:	4602      	mov	r2, r0
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	2b02      	cmp	r3, #2
 8003270:	d901      	bls.n	8003276 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003272:	2303      	movs	r3, #3
 8003274:	e167      	b.n	8003546 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003276:	4b0b      	ldr	r3, [pc, #44]	; (80032a4 <HAL_RCC_OscConfig+0x240>)
 8003278:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800327a:	f003 0302 	and.w	r3, r3, #2
 800327e:	2b00      	cmp	r3, #0
 8003280:	d0f0      	beq.n	8003264 <HAL_RCC_OscConfig+0x200>
 8003282:	e01b      	b.n	80032bc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003284:	4b09      	ldr	r3, [pc, #36]	; (80032ac <HAL_RCC_OscConfig+0x248>)
 8003286:	2200      	movs	r2, #0
 8003288:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800328a:	f7fe fe7f 	bl	8001f8c <HAL_GetTick>
 800328e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003290:	e00e      	b.n	80032b0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003292:	f7fe fe7b 	bl	8001f8c <HAL_GetTick>
 8003296:	4602      	mov	r2, r0
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	1ad3      	subs	r3, r2, r3
 800329c:	2b02      	cmp	r3, #2
 800329e:	d907      	bls.n	80032b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80032a0:	2303      	movs	r3, #3
 80032a2:	e150      	b.n	8003546 <HAL_RCC_OscConfig+0x4e2>
 80032a4:	40023800 	.word	0x40023800
 80032a8:	42470000 	.word	0x42470000
 80032ac:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032b0:	4b88      	ldr	r3, [pc, #544]	; (80034d4 <HAL_RCC_OscConfig+0x470>)
 80032b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032b4:	f003 0302 	and.w	r3, r3, #2
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d1ea      	bne.n	8003292 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 0304 	and.w	r3, r3, #4
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	f000 8097 	beq.w	80033f8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032ca:	2300      	movs	r3, #0
 80032cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032ce:	4b81      	ldr	r3, [pc, #516]	; (80034d4 <HAL_RCC_OscConfig+0x470>)
 80032d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d10f      	bne.n	80032fa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032da:	2300      	movs	r3, #0
 80032dc:	60bb      	str	r3, [r7, #8]
 80032de:	4b7d      	ldr	r3, [pc, #500]	; (80034d4 <HAL_RCC_OscConfig+0x470>)
 80032e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e2:	4a7c      	ldr	r2, [pc, #496]	; (80034d4 <HAL_RCC_OscConfig+0x470>)
 80032e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032e8:	6413      	str	r3, [r2, #64]	; 0x40
 80032ea:	4b7a      	ldr	r3, [pc, #488]	; (80034d4 <HAL_RCC_OscConfig+0x470>)
 80032ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032f2:	60bb      	str	r3, [r7, #8]
 80032f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032f6:	2301      	movs	r3, #1
 80032f8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032fa:	4b77      	ldr	r3, [pc, #476]	; (80034d8 <HAL_RCC_OscConfig+0x474>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003302:	2b00      	cmp	r3, #0
 8003304:	d118      	bne.n	8003338 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003306:	4b74      	ldr	r3, [pc, #464]	; (80034d8 <HAL_RCC_OscConfig+0x474>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a73      	ldr	r2, [pc, #460]	; (80034d8 <HAL_RCC_OscConfig+0x474>)
 800330c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003310:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003312:	f7fe fe3b 	bl	8001f8c <HAL_GetTick>
 8003316:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003318:	e008      	b.n	800332c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800331a:	f7fe fe37 	bl	8001f8c <HAL_GetTick>
 800331e:	4602      	mov	r2, r0
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	1ad3      	subs	r3, r2, r3
 8003324:	2b02      	cmp	r3, #2
 8003326:	d901      	bls.n	800332c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003328:	2303      	movs	r3, #3
 800332a:	e10c      	b.n	8003546 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800332c:	4b6a      	ldr	r3, [pc, #424]	; (80034d8 <HAL_RCC_OscConfig+0x474>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003334:	2b00      	cmp	r3, #0
 8003336:	d0f0      	beq.n	800331a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	2b01      	cmp	r3, #1
 800333e:	d106      	bne.n	800334e <HAL_RCC_OscConfig+0x2ea>
 8003340:	4b64      	ldr	r3, [pc, #400]	; (80034d4 <HAL_RCC_OscConfig+0x470>)
 8003342:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003344:	4a63      	ldr	r2, [pc, #396]	; (80034d4 <HAL_RCC_OscConfig+0x470>)
 8003346:	f043 0301 	orr.w	r3, r3, #1
 800334a:	6713      	str	r3, [r2, #112]	; 0x70
 800334c:	e01c      	b.n	8003388 <HAL_RCC_OscConfig+0x324>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	2b05      	cmp	r3, #5
 8003354:	d10c      	bne.n	8003370 <HAL_RCC_OscConfig+0x30c>
 8003356:	4b5f      	ldr	r3, [pc, #380]	; (80034d4 <HAL_RCC_OscConfig+0x470>)
 8003358:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800335a:	4a5e      	ldr	r2, [pc, #376]	; (80034d4 <HAL_RCC_OscConfig+0x470>)
 800335c:	f043 0304 	orr.w	r3, r3, #4
 8003360:	6713      	str	r3, [r2, #112]	; 0x70
 8003362:	4b5c      	ldr	r3, [pc, #368]	; (80034d4 <HAL_RCC_OscConfig+0x470>)
 8003364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003366:	4a5b      	ldr	r2, [pc, #364]	; (80034d4 <HAL_RCC_OscConfig+0x470>)
 8003368:	f043 0301 	orr.w	r3, r3, #1
 800336c:	6713      	str	r3, [r2, #112]	; 0x70
 800336e:	e00b      	b.n	8003388 <HAL_RCC_OscConfig+0x324>
 8003370:	4b58      	ldr	r3, [pc, #352]	; (80034d4 <HAL_RCC_OscConfig+0x470>)
 8003372:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003374:	4a57      	ldr	r2, [pc, #348]	; (80034d4 <HAL_RCC_OscConfig+0x470>)
 8003376:	f023 0301 	bic.w	r3, r3, #1
 800337a:	6713      	str	r3, [r2, #112]	; 0x70
 800337c:	4b55      	ldr	r3, [pc, #340]	; (80034d4 <HAL_RCC_OscConfig+0x470>)
 800337e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003380:	4a54      	ldr	r2, [pc, #336]	; (80034d4 <HAL_RCC_OscConfig+0x470>)
 8003382:	f023 0304 	bic.w	r3, r3, #4
 8003386:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d015      	beq.n	80033bc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003390:	f7fe fdfc 	bl	8001f8c <HAL_GetTick>
 8003394:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003396:	e00a      	b.n	80033ae <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003398:	f7fe fdf8 	bl	8001f8c <HAL_GetTick>
 800339c:	4602      	mov	r2, r0
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d901      	bls.n	80033ae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80033aa:	2303      	movs	r3, #3
 80033ac:	e0cb      	b.n	8003546 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033ae:	4b49      	ldr	r3, [pc, #292]	; (80034d4 <HAL_RCC_OscConfig+0x470>)
 80033b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033b2:	f003 0302 	and.w	r3, r3, #2
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d0ee      	beq.n	8003398 <HAL_RCC_OscConfig+0x334>
 80033ba:	e014      	b.n	80033e6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033bc:	f7fe fde6 	bl	8001f8c <HAL_GetTick>
 80033c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033c2:	e00a      	b.n	80033da <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033c4:	f7fe fde2 	bl	8001f8c <HAL_GetTick>
 80033c8:	4602      	mov	r2, r0
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	1ad3      	subs	r3, r2, r3
 80033ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d901      	bls.n	80033da <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80033d6:	2303      	movs	r3, #3
 80033d8:	e0b5      	b.n	8003546 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033da:	4b3e      	ldr	r3, [pc, #248]	; (80034d4 <HAL_RCC_OscConfig+0x470>)
 80033dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033de:	f003 0302 	and.w	r3, r3, #2
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d1ee      	bne.n	80033c4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80033e6:	7dfb      	ldrb	r3, [r7, #23]
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d105      	bne.n	80033f8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033ec:	4b39      	ldr	r3, [pc, #228]	; (80034d4 <HAL_RCC_OscConfig+0x470>)
 80033ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f0:	4a38      	ldr	r2, [pc, #224]	; (80034d4 <HAL_RCC_OscConfig+0x470>)
 80033f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033f6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	699b      	ldr	r3, [r3, #24]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	f000 80a1 	beq.w	8003544 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003402:	4b34      	ldr	r3, [pc, #208]	; (80034d4 <HAL_RCC_OscConfig+0x470>)
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	f003 030c 	and.w	r3, r3, #12
 800340a:	2b08      	cmp	r3, #8
 800340c:	d05c      	beq.n	80034c8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	699b      	ldr	r3, [r3, #24]
 8003412:	2b02      	cmp	r3, #2
 8003414:	d141      	bne.n	800349a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003416:	4b31      	ldr	r3, [pc, #196]	; (80034dc <HAL_RCC_OscConfig+0x478>)
 8003418:	2200      	movs	r2, #0
 800341a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800341c:	f7fe fdb6 	bl	8001f8c <HAL_GetTick>
 8003420:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003422:	e008      	b.n	8003436 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003424:	f7fe fdb2 	bl	8001f8c <HAL_GetTick>
 8003428:	4602      	mov	r2, r0
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	2b02      	cmp	r3, #2
 8003430:	d901      	bls.n	8003436 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003432:	2303      	movs	r3, #3
 8003434:	e087      	b.n	8003546 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003436:	4b27      	ldr	r3, [pc, #156]	; (80034d4 <HAL_RCC_OscConfig+0x470>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800343e:	2b00      	cmp	r3, #0
 8003440:	d1f0      	bne.n	8003424 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	69da      	ldr	r2, [r3, #28]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6a1b      	ldr	r3, [r3, #32]
 800344a:	431a      	orrs	r2, r3
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003450:	019b      	lsls	r3, r3, #6
 8003452:	431a      	orrs	r2, r3
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003458:	085b      	lsrs	r3, r3, #1
 800345a:	3b01      	subs	r3, #1
 800345c:	041b      	lsls	r3, r3, #16
 800345e:	431a      	orrs	r2, r3
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003464:	061b      	lsls	r3, r3, #24
 8003466:	491b      	ldr	r1, [pc, #108]	; (80034d4 <HAL_RCC_OscConfig+0x470>)
 8003468:	4313      	orrs	r3, r2
 800346a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800346c:	4b1b      	ldr	r3, [pc, #108]	; (80034dc <HAL_RCC_OscConfig+0x478>)
 800346e:	2201      	movs	r2, #1
 8003470:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003472:	f7fe fd8b 	bl	8001f8c <HAL_GetTick>
 8003476:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003478:	e008      	b.n	800348c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800347a:	f7fe fd87 	bl	8001f8c <HAL_GetTick>
 800347e:	4602      	mov	r2, r0
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	1ad3      	subs	r3, r2, r3
 8003484:	2b02      	cmp	r3, #2
 8003486:	d901      	bls.n	800348c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003488:	2303      	movs	r3, #3
 800348a:	e05c      	b.n	8003546 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800348c:	4b11      	ldr	r3, [pc, #68]	; (80034d4 <HAL_RCC_OscConfig+0x470>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003494:	2b00      	cmp	r3, #0
 8003496:	d0f0      	beq.n	800347a <HAL_RCC_OscConfig+0x416>
 8003498:	e054      	b.n	8003544 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800349a:	4b10      	ldr	r3, [pc, #64]	; (80034dc <HAL_RCC_OscConfig+0x478>)
 800349c:	2200      	movs	r2, #0
 800349e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034a0:	f7fe fd74 	bl	8001f8c <HAL_GetTick>
 80034a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034a6:	e008      	b.n	80034ba <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034a8:	f7fe fd70 	bl	8001f8c <HAL_GetTick>
 80034ac:	4602      	mov	r2, r0
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	2b02      	cmp	r3, #2
 80034b4:	d901      	bls.n	80034ba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80034b6:	2303      	movs	r3, #3
 80034b8:	e045      	b.n	8003546 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034ba:	4b06      	ldr	r3, [pc, #24]	; (80034d4 <HAL_RCC_OscConfig+0x470>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d1f0      	bne.n	80034a8 <HAL_RCC_OscConfig+0x444>
 80034c6:	e03d      	b.n	8003544 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	699b      	ldr	r3, [r3, #24]
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d107      	bne.n	80034e0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	e038      	b.n	8003546 <HAL_RCC_OscConfig+0x4e2>
 80034d4:	40023800 	.word	0x40023800
 80034d8:	40007000 	.word	0x40007000
 80034dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80034e0:	4b1b      	ldr	r3, [pc, #108]	; (8003550 <HAL_RCC_OscConfig+0x4ec>)
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	699b      	ldr	r3, [r3, #24]
 80034ea:	2b01      	cmp	r3, #1
 80034ec:	d028      	beq.n	8003540 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d121      	bne.n	8003540 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003506:	429a      	cmp	r2, r3
 8003508:	d11a      	bne.n	8003540 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800350a:	68fa      	ldr	r2, [r7, #12]
 800350c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003510:	4013      	ands	r3, r2
 8003512:	687a      	ldr	r2, [r7, #4]
 8003514:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003516:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003518:	4293      	cmp	r3, r2
 800351a:	d111      	bne.n	8003540 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003526:	085b      	lsrs	r3, r3, #1
 8003528:	3b01      	subs	r3, #1
 800352a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800352c:	429a      	cmp	r2, r3
 800352e:	d107      	bne.n	8003540 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800353a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800353c:	429a      	cmp	r2, r3
 800353e:	d001      	beq.n	8003544 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	e000      	b.n	8003546 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003544:	2300      	movs	r3, #0
}
 8003546:	4618      	mov	r0, r3
 8003548:	3718      	adds	r7, #24
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}
 800354e:	bf00      	nop
 8003550:	40023800 	.word	0x40023800

08003554 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b084      	sub	sp, #16
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
 800355c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d101      	bne.n	8003568 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	e0cc      	b.n	8003702 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003568:	4b68      	ldr	r3, [pc, #416]	; (800370c <HAL_RCC_ClockConfig+0x1b8>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 0307 	and.w	r3, r3, #7
 8003570:	683a      	ldr	r2, [r7, #0]
 8003572:	429a      	cmp	r2, r3
 8003574:	d90c      	bls.n	8003590 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003576:	4b65      	ldr	r3, [pc, #404]	; (800370c <HAL_RCC_ClockConfig+0x1b8>)
 8003578:	683a      	ldr	r2, [r7, #0]
 800357a:	b2d2      	uxtb	r2, r2
 800357c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800357e:	4b63      	ldr	r3, [pc, #396]	; (800370c <HAL_RCC_ClockConfig+0x1b8>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 0307 	and.w	r3, r3, #7
 8003586:	683a      	ldr	r2, [r7, #0]
 8003588:	429a      	cmp	r2, r3
 800358a:	d001      	beq.n	8003590 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e0b8      	b.n	8003702 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 0302 	and.w	r3, r3, #2
 8003598:	2b00      	cmp	r3, #0
 800359a:	d020      	beq.n	80035de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 0304 	and.w	r3, r3, #4
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d005      	beq.n	80035b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035a8:	4b59      	ldr	r3, [pc, #356]	; (8003710 <HAL_RCC_ClockConfig+0x1bc>)
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	4a58      	ldr	r2, [pc, #352]	; (8003710 <HAL_RCC_ClockConfig+0x1bc>)
 80035ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80035b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 0308 	and.w	r3, r3, #8
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d005      	beq.n	80035cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035c0:	4b53      	ldr	r3, [pc, #332]	; (8003710 <HAL_RCC_ClockConfig+0x1bc>)
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	4a52      	ldr	r2, [pc, #328]	; (8003710 <HAL_RCC_ClockConfig+0x1bc>)
 80035c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80035ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035cc:	4b50      	ldr	r3, [pc, #320]	; (8003710 <HAL_RCC_ClockConfig+0x1bc>)
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	494d      	ldr	r1, [pc, #308]	; (8003710 <HAL_RCC_ClockConfig+0x1bc>)
 80035da:	4313      	orrs	r3, r2
 80035dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 0301 	and.w	r3, r3, #1
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d044      	beq.n	8003674 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d107      	bne.n	8003602 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035f2:	4b47      	ldr	r3, [pc, #284]	; (8003710 <HAL_RCC_ClockConfig+0x1bc>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d119      	bne.n	8003632 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e07f      	b.n	8003702 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	2b02      	cmp	r3, #2
 8003608:	d003      	beq.n	8003612 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800360e:	2b03      	cmp	r3, #3
 8003610:	d107      	bne.n	8003622 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003612:	4b3f      	ldr	r3, [pc, #252]	; (8003710 <HAL_RCC_ClockConfig+0x1bc>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800361a:	2b00      	cmp	r3, #0
 800361c:	d109      	bne.n	8003632 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e06f      	b.n	8003702 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003622:	4b3b      	ldr	r3, [pc, #236]	; (8003710 <HAL_RCC_ClockConfig+0x1bc>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 0302 	and.w	r3, r3, #2
 800362a:	2b00      	cmp	r3, #0
 800362c:	d101      	bne.n	8003632 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e067      	b.n	8003702 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003632:	4b37      	ldr	r3, [pc, #220]	; (8003710 <HAL_RCC_ClockConfig+0x1bc>)
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	f023 0203 	bic.w	r2, r3, #3
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	4934      	ldr	r1, [pc, #208]	; (8003710 <HAL_RCC_ClockConfig+0x1bc>)
 8003640:	4313      	orrs	r3, r2
 8003642:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003644:	f7fe fca2 	bl	8001f8c <HAL_GetTick>
 8003648:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800364a:	e00a      	b.n	8003662 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800364c:	f7fe fc9e 	bl	8001f8c <HAL_GetTick>
 8003650:	4602      	mov	r2, r0
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	f241 3288 	movw	r2, #5000	; 0x1388
 800365a:	4293      	cmp	r3, r2
 800365c:	d901      	bls.n	8003662 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800365e:	2303      	movs	r3, #3
 8003660:	e04f      	b.n	8003702 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003662:	4b2b      	ldr	r3, [pc, #172]	; (8003710 <HAL_RCC_ClockConfig+0x1bc>)
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	f003 020c 	and.w	r2, r3, #12
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	429a      	cmp	r2, r3
 8003672:	d1eb      	bne.n	800364c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003674:	4b25      	ldr	r3, [pc, #148]	; (800370c <HAL_RCC_ClockConfig+0x1b8>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 0307 	and.w	r3, r3, #7
 800367c:	683a      	ldr	r2, [r7, #0]
 800367e:	429a      	cmp	r2, r3
 8003680:	d20c      	bcs.n	800369c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003682:	4b22      	ldr	r3, [pc, #136]	; (800370c <HAL_RCC_ClockConfig+0x1b8>)
 8003684:	683a      	ldr	r2, [r7, #0]
 8003686:	b2d2      	uxtb	r2, r2
 8003688:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800368a:	4b20      	ldr	r3, [pc, #128]	; (800370c <HAL_RCC_ClockConfig+0x1b8>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 0307 	and.w	r3, r3, #7
 8003692:	683a      	ldr	r2, [r7, #0]
 8003694:	429a      	cmp	r2, r3
 8003696:	d001      	beq.n	800369c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	e032      	b.n	8003702 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 0304 	and.w	r3, r3, #4
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d008      	beq.n	80036ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036a8:	4b19      	ldr	r3, [pc, #100]	; (8003710 <HAL_RCC_ClockConfig+0x1bc>)
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	4916      	ldr	r1, [pc, #88]	; (8003710 <HAL_RCC_ClockConfig+0x1bc>)
 80036b6:	4313      	orrs	r3, r2
 80036b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 0308 	and.w	r3, r3, #8
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d009      	beq.n	80036da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036c6:	4b12      	ldr	r3, [pc, #72]	; (8003710 <HAL_RCC_ClockConfig+0x1bc>)
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	691b      	ldr	r3, [r3, #16]
 80036d2:	00db      	lsls	r3, r3, #3
 80036d4:	490e      	ldr	r1, [pc, #56]	; (8003710 <HAL_RCC_ClockConfig+0x1bc>)
 80036d6:	4313      	orrs	r3, r2
 80036d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80036da:	f000 f821 	bl	8003720 <HAL_RCC_GetSysClockFreq>
 80036de:	4602      	mov	r2, r0
 80036e0:	4b0b      	ldr	r3, [pc, #44]	; (8003710 <HAL_RCC_ClockConfig+0x1bc>)
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	091b      	lsrs	r3, r3, #4
 80036e6:	f003 030f 	and.w	r3, r3, #15
 80036ea:	490a      	ldr	r1, [pc, #40]	; (8003714 <HAL_RCC_ClockConfig+0x1c0>)
 80036ec:	5ccb      	ldrb	r3, [r1, r3]
 80036ee:	fa22 f303 	lsr.w	r3, r2, r3
 80036f2:	4a09      	ldr	r2, [pc, #36]	; (8003718 <HAL_RCC_ClockConfig+0x1c4>)
 80036f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80036f6:	4b09      	ldr	r3, [pc, #36]	; (800371c <HAL_RCC_ClockConfig+0x1c8>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4618      	mov	r0, r3
 80036fc:	f7fe fc02 	bl	8001f04 <HAL_InitTick>

  return HAL_OK;
 8003700:	2300      	movs	r3, #0
}
 8003702:	4618      	mov	r0, r3
 8003704:	3710      	adds	r7, #16
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}
 800370a:	bf00      	nop
 800370c:	40023c00 	.word	0x40023c00
 8003710:	40023800 	.word	0x40023800
 8003714:	08006d44 	.word	0x08006d44
 8003718:	20000000 	.word	0x20000000
 800371c:	20000004 	.word	0x20000004

08003720 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003720:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003724:	b090      	sub	sp, #64	; 0x40
 8003726:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003728:	2300      	movs	r3, #0
 800372a:	637b      	str	r3, [r7, #52]	; 0x34
 800372c:	2300      	movs	r3, #0
 800372e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003730:	2300      	movs	r3, #0
 8003732:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003734:	2300      	movs	r3, #0
 8003736:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003738:	4b59      	ldr	r3, [pc, #356]	; (80038a0 <HAL_RCC_GetSysClockFreq+0x180>)
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	f003 030c 	and.w	r3, r3, #12
 8003740:	2b08      	cmp	r3, #8
 8003742:	d00d      	beq.n	8003760 <HAL_RCC_GetSysClockFreq+0x40>
 8003744:	2b08      	cmp	r3, #8
 8003746:	f200 80a1 	bhi.w	800388c <HAL_RCC_GetSysClockFreq+0x16c>
 800374a:	2b00      	cmp	r3, #0
 800374c:	d002      	beq.n	8003754 <HAL_RCC_GetSysClockFreq+0x34>
 800374e:	2b04      	cmp	r3, #4
 8003750:	d003      	beq.n	800375a <HAL_RCC_GetSysClockFreq+0x3a>
 8003752:	e09b      	b.n	800388c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003754:	4b53      	ldr	r3, [pc, #332]	; (80038a4 <HAL_RCC_GetSysClockFreq+0x184>)
 8003756:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003758:	e09b      	b.n	8003892 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800375a:	4b53      	ldr	r3, [pc, #332]	; (80038a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800375c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800375e:	e098      	b.n	8003892 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003760:	4b4f      	ldr	r3, [pc, #316]	; (80038a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003768:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800376a:	4b4d      	ldr	r3, [pc, #308]	; (80038a0 <HAL_RCC_GetSysClockFreq+0x180>)
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003772:	2b00      	cmp	r3, #0
 8003774:	d028      	beq.n	80037c8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003776:	4b4a      	ldr	r3, [pc, #296]	; (80038a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	099b      	lsrs	r3, r3, #6
 800377c:	2200      	movs	r2, #0
 800377e:	623b      	str	r3, [r7, #32]
 8003780:	627a      	str	r2, [r7, #36]	; 0x24
 8003782:	6a3b      	ldr	r3, [r7, #32]
 8003784:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003788:	2100      	movs	r1, #0
 800378a:	4b47      	ldr	r3, [pc, #284]	; (80038a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800378c:	fb03 f201 	mul.w	r2, r3, r1
 8003790:	2300      	movs	r3, #0
 8003792:	fb00 f303 	mul.w	r3, r0, r3
 8003796:	4413      	add	r3, r2
 8003798:	4a43      	ldr	r2, [pc, #268]	; (80038a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800379a:	fba0 1202 	umull	r1, r2, r0, r2
 800379e:	62fa      	str	r2, [r7, #44]	; 0x2c
 80037a0:	460a      	mov	r2, r1
 80037a2:	62ba      	str	r2, [r7, #40]	; 0x28
 80037a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037a6:	4413      	add	r3, r2
 80037a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037ac:	2200      	movs	r2, #0
 80037ae:	61bb      	str	r3, [r7, #24]
 80037b0:	61fa      	str	r2, [r7, #28]
 80037b2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80037b6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80037ba:	f7fc fd61 	bl	8000280 <__aeabi_uldivmod>
 80037be:	4602      	mov	r2, r0
 80037c0:	460b      	mov	r3, r1
 80037c2:	4613      	mov	r3, r2
 80037c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037c6:	e053      	b.n	8003870 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037c8:	4b35      	ldr	r3, [pc, #212]	; (80038a0 <HAL_RCC_GetSysClockFreq+0x180>)
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	099b      	lsrs	r3, r3, #6
 80037ce:	2200      	movs	r2, #0
 80037d0:	613b      	str	r3, [r7, #16]
 80037d2:	617a      	str	r2, [r7, #20]
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80037da:	f04f 0b00 	mov.w	fp, #0
 80037de:	4652      	mov	r2, sl
 80037e0:	465b      	mov	r3, fp
 80037e2:	f04f 0000 	mov.w	r0, #0
 80037e6:	f04f 0100 	mov.w	r1, #0
 80037ea:	0159      	lsls	r1, r3, #5
 80037ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037f0:	0150      	lsls	r0, r2, #5
 80037f2:	4602      	mov	r2, r0
 80037f4:	460b      	mov	r3, r1
 80037f6:	ebb2 080a 	subs.w	r8, r2, sl
 80037fa:	eb63 090b 	sbc.w	r9, r3, fp
 80037fe:	f04f 0200 	mov.w	r2, #0
 8003802:	f04f 0300 	mov.w	r3, #0
 8003806:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800380a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800380e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003812:	ebb2 0408 	subs.w	r4, r2, r8
 8003816:	eb63 0509 	sbc.w	r5, r3, r9
 800381a:	f04f 0200 	mov.w	r2, #0
 800381e:	f04f 0300 	mov.w	r3, #0
 8003822:	00eb      	lsls	r3, r5, #3
 8003824:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003828:	00e2      	lsls	r2, r4, #3
 800382a:	4614      	mov	r4, r2
 800382c:	461d      	mov	r5, r3
 800382e:	eb14 030a 	adds.w	r3, r4, sl
 8003832:	603b      	str	r3, [r7, #0]
 8003834:	eb45 030b 	adc.w	r3, r5, fp
 8003838:	607b      	str	r3, [r7, #4]
 800383a:	f04f 0200 	mov.w	r2, #0
 800383e:	f04f 0300 	mov.w	r3, #0
 8003842:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003846:	4629      	mov	r1, r5
 8003848:	028b      	lsls	r3, r1, #10
 800384a:	4621      	mov	r1, r4
 800384c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003850:	4621      	mov	r1, r4
 8003852:	028a      	lsls	r2, r1, #10
 8003854:	4610      	mov	r0, r2
 8003856:	4619      	mov	r1, r3
 8003858:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800385a:	2200      	movs	r2, #0
 800385c:	60bb      	str	r3, [r7, #8]
 800385e:	60fa      	str	r2, [r7, #12]
 8003860:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003864:	f7fc fd0c 	bl	8000280 <__aeabi_uldivmod>
 8003868:	4602      	mov	r2, r0
 800386a:	460b      	mov	r3, r1
 800386c:	4613      	mov	r3, r2
 800386e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003870:	4b0b      	ldr	r3, [pc, #44]	; (80038a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	0c1b      	lsrs	r3, r3, #16
 8003876:	f003 0303 	and.w	r3, r3, #3
 800387a:	3301      	adds	r3, #1
 800387c:	005b      	lsls	r3, r3, #1
 800387e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003880:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003884:	fbb2 f3f3 	udiv	r3, r2, r3
 8003888:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800388a:	e002      	b.n	8003892 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800388c:	4b05      	ldr	r3, [pc, #20]	; (80038a4 <HAL_RCC_GetSysClockFreq+0x184>)
 800388e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003890:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003894:	4618      	mov	r0, r3
 8003896:	3740      	adds	r7, #64	; 0x40
 8003898:	46bd      	mov	sp, r7
 800389a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800389e:	bf00      	nop
 80038a0:	40023800 	.word	0x40023800
 80038a4:	00f42400 	.word	0x00f42400
 80038a8:	017d7840 	.word	0x017d7840

080038ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038ac:	b480      	push	{r7}
 80038ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038b0:	4b03      	ldr	r3, [pc, #12]	; (80038c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80038b2:	681b      	ldr	r3, [r3, #0]
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	46bd      	mov	sp, r7
 80038b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038bc:	4770      	bx	lr
 80038be:	bf00      	nop
 80038c0:	20000000 	.word	0x20000000

080038c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80038c8:	f7ff fff0 	bl	80038ac <HAL_RCC_GetHCLKFreq>
 80038cc:	4602      	mov	r2, r0
 80038ce:	4b05      	ldr	r3, [pc, #20]	; (80038e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	0a9b      	lsrs	r3, r3, #10
 80038d4:	f003 0307 	and.w	r3, r3, #7
 80038d8:	4903      	ldr	r1, [pc, #12]	; (80038e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038da:	5ccb      	ldrb	r3, [r1, r3]
 80038dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	bd80      	pop	{r7, pc}
 80038e4:	40023800 	.word	0x40023800
 80038e8:	08006d54 	.word	0x08006d54

080038ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80038f0:	f7ff ffdc 	bl	80038ac <HAL_RCC_GetHCLKFreq>
 80038f4:	4602      	mov	r2, r0
 80038f6:	4b05      	ldr	r3, [pc, #20]	; (800390c <HAL_RCC_GetPCLK2Freq+0x20>)
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	0b5b      	lsrs	r3, r3, #13
 80038fc:	f003 0307 	and.w	r3, r3, #7
 8003900:	4903      	ldr	r1, [pc, #12]	; (8003910 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003902:	5ccb      	ldrb	r3, [r1, r3]
 8003904:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003908:	4618      	mov	r0, r3
 800390a:	bd80      	pop	{r7, pc}
 800390c:	40023800 	.word	0x40023800
 8003910:	08006d54 	.word	0x08006d54

08003914 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b082      	sub	sp, #8
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d101      	bne.n	8003926 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e03f      	b.n	80039a6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800392c:	b2db      	uxtb	r3, r3
 800392e:	2b00      	cmp	r3, #0
 8003930:	d106      	bne.n	8003940 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2200      	movs	r2, #0
 8003936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f7fe f978 	bl	8001c30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2224      	movs	r2, #36	; 0x24
 8003944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	68da      	ldr	r2, [r3, #12]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003956:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003958:	6878      	ldr	r0, [r7, #4]
 800395a:	f000 fe1d 	bl	8004598 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	691a      	ldr	r2, [r3, #16]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800396c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	695a      	ldr	r2, [r3, #20]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800397c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	68da      	ldr	r2, [r3, #12]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800398c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2200      	movs	r2, #0
 8003992:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2220      	movs	r2, #32
 8003998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2220      	movs	r2, #32
 80039a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80039a4:	2300      	movs	r3, #0
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3708      	adds	r7, #8
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}

080039ae <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039ae:	b580      	push	{r7, lr}
 80039b0:	b08a      	sub	sp, #40	; 0x28
 80039b2:	af02      	add	r7, sp, #8
 80039b4:	60f8      	str	r0, [r7, #12]
 80039b6:	60b9      	str	r1, [r7, #8]
 80039b8:	603b      	str	r3, [r7, #0]
 80039ba:	4613      	mov	r3, r2
 80039bc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80039be:	2300      	movs	r3, #0
 80039c0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	2b20      	cmp	r3, #32
 80039cc:	d17c      	bne.n	8003ac8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d002      	beq.n	80039da <HAL_UART_Transmit+0x2c>
 80039d4:	88fb      	ldrh	r3, [r7, #6]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d101      	bne.n	80039de <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e075      	b.n	8003aca <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d101      	bne.n	80039ec <HAL_UART_Transmit+0x3e>
 80039e8:	2302      	movs	r3, #2
 80039ea:	e06e      	b.n	8003aca <HAL_UART_Transmit+0x11c>
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2201      	movs	r2, #1
 80039f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2200      	movs	r2, #0
 80039f8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2221      	movs	r2, #33	; 0x21
 80039fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a02:	f7fe fac3 	bl	8001f8c <HAL_GetTick>
 8003a06:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	88fa      	ldrh	r2, [r7, #6]
 8003a0c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	88fa      	ldrh	r2, [r7, #6]
 8003a12:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a1c:	d108      	bne.n	8003a30 <HAL_UART_Transmit+0x82>
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	691b      	ldr	r3, [r3, #16]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d104      	bne.n	8003a30 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003a26:	2300      	movs	r3, #0
 8003a28:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	61bb      	str	r3, [r7, #24]
 8003a2e:	e003      	b.n	8003a38 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a34:	2300      	movs	r3, #0
 8003a36:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003a40:	e02a      	b.n	8003a98 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	9300      	str	r3, [sp, #0]
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	2180      	movs	r1, #128	; 0x80
 8003a4c:	68f8      	ldr	r0, [r7, #12]
 8003a4e:	f000 fb9b 	bl	8004188 <UART_WaitOnFlagUntilTimeout>
 8003a52:	4603      	mov	r3, r0
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d001      	beq.n	8003a5c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003a58:	2303      	movs	r3, #3
 8003a5a:	e036      	b.n	8003aca <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003a5c:	69fb      	ldr	r3, [r7, #28]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d10b      	bne.n	8003a7a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a62:	69bb      	ldr	r3, [r7, #24]
 8003a64:	881b      	ldrh	r3, [r3, #0]
 8003a66:	461a      	mov	r2, r3
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a70:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003a72:	69bb      	ldr	r3, [r7, #24]
 8003a74:	3302      	adds	r3, #2
 8003a76:	61bb      	str	r3, [r7, #24]
 8003a78:	e007      	b.n	8003a8a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a7a:	69fb      	ldr	r3, [r7, #28]
 8003a7c:	781a      	ldrb	r2, [r3, #0]
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003a84:	69fb      	ldr	r3, [r7, #28]
 8003a86:	3301      	adds	r3, #1
 8003a88:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a8e:	b29b      	uxth	r3, r3
 8003a90:	3b01      	subs	r3, #1
 8003a92:	b29a      	uxth	r2, r3
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a9c:	b29b      	uxth	r3, r3
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d1cf      	bne.n	8003a42 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	9300      	str	r3, [sp, #0]
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	2140      	movs	r1, #64	; 0x40
 8003aac:	68f8      	ldr	r0, [r7, #12]
 8003aae:	f000 fb6b 	bl	8004188 <UART_WaitOnFlagUntilTimeout>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d001      	beq.n	8003abc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003ab8:	2303      	movs	r3, #3
 8003aba:	e006      	b.n	8003aca <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2220      	movs	r2, #32
 8003ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	e000      	b.n	8003aca <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003ac8:	2302      	movs	r3, #2
  }
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3720      	adds	r7, #32
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}

08003ad2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ad2:	b580      	push	{r7, lr}
 8003ad4:	b08a      	sub	sp, #40	; 0x28
 8003ad6:	af02      	add	r7, sp, #8
 8003ad8:	60f8      	str	r0, [r7, #12]
 8003ada:	60b9      	str	r1, [r7, #8]
 8003adc:	603b      	str	r3, [r7, #0]
 8003ade:	4613      	mov	r3, r2
 8003ae0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	2b20      	cmp	r3, #32
 8003af0:	f040 808c 	bne.w	8003c0c <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d002      	beq.n	8003b00 <HAL_UART_Receive+0x2e>
 8003afa:	88fb      	ldrh	r3, [r7, #6]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d101      	bne.n	8003b04 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	e084      	b.n	8003c0e <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d101      	bne.n	8003b12 <HAL_UART_Receive+0x40>
 8003b0e:	2302      	movs	r3, #2
 8003b10:	e07d      	b.n	8003c0e <HAL_UART_Receive+0x13c>
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2201      	movs	r2, #1
 8003b16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2222      	movs	r2, #34	; 0x22
 8003b24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b2e:	f7fe fa2d 	bl	8001f8c <HAL_GetTick>
 8003b32:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	88fa      	ldrh	r2, [r7, #6]
 8003b38:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	88fa      	ldrh	r2, [r7, #6]
 8003b3e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b48:	d108      	bne.n	8003b5c <HAL_UART_Receive+0x8a>
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	691b      	ldr	r3, [r3, #16]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d104      	bne.n	8003b5c <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8003b52:	2300      	movs	r3, #0
 8003b54:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	61bb      	str	r3, [r7, #24]
 8003b5a:	e003      	b.n	8003b64 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b60:	2300      	movs	r3, #0
 8003b62:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2200      	movs	r2, #0
 8003b68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003b6c:	e043      	b.n	8003bf6 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	9300      	str	r3, [sp, #0]
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	2200      	movs	r2, #0
 8003b76:	2120      	movs	r1, #32
 8003b78:	68f8      	ldr	r0, [r7, #12]
 8003b7a:	f000 fb05 	bl	8004188 <UART_WaitOnFlagUntilTimeout>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d001      	beq.n	8003b88 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8003b84:	2303      	movs	r3, #3
 8003b86:	e042      	b.n	8003c0e <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8003b88:	69fb      	ldr	r3, [r7, #28]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d10c      	bne.n	8003ba8 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	b29b      	uxth	r3, r3
 8003b96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b9a:	b29a      	uxth	r2, r3
 8003b9c:	69bb      	ldr	r3, [r7, #24]
 8003b9e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003ba0:	69bb      	ldr	r3, [r7, #24]
 8003ba2:	3302      	adds	r3, #2
 8003ba4:	61bb      	str	r3, [r7, #24]
 8003ba6:	e01f      	b.n	8003be8 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bb0:	d007      	beq.n	8003bc2 <HAL_UART_Receive+0xf0>
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d10a      	bne.n	8003bd0 <HAL_UART_Receive+0xfe>
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	691b      	ldr	r3, [r3, #16]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d106      	bne.n	8003bd0 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	b2da      	uxtb	r2, r3
 8003bca:	69fb      	ldr	r3, [r7, #28]
 8003bcc:	701a      	strb	r2, [r3, #0]
 8003bce:	e008      	b.n	8003be2 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	b2db      	uxtb	r3, r3
 8003bd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003bdc:	b2da      	uxtb	r2, r3
 8003bde:	69fb      	ldr	r3, [r7, #28]
 8003be0:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003be2:	69fb      	ldr	r3, [r7, #28]
 8003be4:	3301      	adds	r3, #1
 8003be6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003bec:	b29b      	uxth	r3, r3
 8003bee:	3b01      	subs	r3, #1
 8003bf0:	b29a      	uxth	r2, r3
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003bfa:	b29b      	uxth	r3, r3
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d1b6      	bne.n	8003b6e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2220      	movs	r2, #32
 8003c04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	e000      	b.n	8003c0e <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8003c0c:	2302      	movs	r3, #2
  }
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3720      	adds	r7, #32
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
	...

08003c18 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b0ba      	sub	sp, #232	; 0xe8
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	68db      	ldr	r3, [r3, #12]
 8003c30:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	695b      	ldr	r3, [r3, #20]
 8003c3a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003c44:	2300      	movs	r3, #0
 8003c46:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003c4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c4e:	f003 030f 	and.w	r3, r3, #15
 8003c52:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003c56:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d10f      	bne.n	8003c7e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c62:	f003 0320 	and.w	r3, r3, #32
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d009      	beq.n	8003c7e <HAL_UART_IRQHandler+0x66>
 8003c6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c6e:	f003 0320 	and.w	r3, r3, #32
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d003      	beq.n	8003c7e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f000 fbd3 	bl	8004422 <UART_Receive_IT>
      return;
 8003c7c:	e256      	b.n	800412c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003c7e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	f000 80de 	beq.w	8003e44 <HAL_UART_IRQHandler+0x22c>
 8003c88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c8c:	f003 0301 	and.w	r3, r3, #1
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d106      	bne.n	8003ca2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003c94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c98:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	f000 80d1 	beq.w	8003e44 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003ca2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ca6:	f003 0301 	and.w	r3, r3, #1
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d00b      	beq.n	8003cc6 <HAL_UART_IRQHandler+0xae>
 8003cae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d005      	beq.n	8003cc6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cbe:	f043 0201 	orr.w	r2, r3, #1
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003cc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cca:	f003 0304 	and.w	r3, r3, #4
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d00b      	beq.n	8003cea <HAL_UART_IRQHandler+0xd2>
 8003cd2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003cd6:	f003 0301 	and.w	r3, r3, #1
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d005      	beq.n	8003cea <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce2:	f043 0202 	orr.w	r2, r3, #2
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003cea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cee:	f003 0302 	and.w	r3, r3, #2
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d00b      	beq.n	8003d0e <HAL_UART_IRQHandler+0xf6>
 8003cf6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003cfa:	f003 0301 	and.w	r3, r3, #1
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d005      	beq.n	8003d0e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d06:	f043 0204 	orr.w	r2, r3, #4
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003d0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d12:	f003 0308 	and.w	r3, r3, #8
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d011      	beq.n	8003d3e <HAL_UART_IRQHandler+0x126>
 8003d1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d1e:	f003 0320 	and.w	r3, r3, #32
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d105      	bne.n	8003d32 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003d26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d2a:	f003 0301 	and.w	r3, r3, #1
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d005      	beq.n	8003d3e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d36:	f043 0208 	orr.w	r2, r3, #8
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	f000 81ed 	beq.w	8004122 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d4c:	f003 0320 	and.w	r3, r3, #32
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d008      	beq.n	8003d66 <HAL_UART_IRQHandler+0x14e>
 8003d54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d58:	f003 0320 	and.w	r3, r3, #32
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d002      	beq.n	8003d66 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	f000 fb5e 	bl	8004422 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	695b      	ldr	r3, [r3, #20]
 8003d6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d70:	2b40      	cmp	r3, #64	; 0x40
 8003d72:	bf0c      	ite	eq
 8003d74:	2301      	moveq	r3, #1
 8003d76:	2300      	movne	r3, #0
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d82:	f003 0308 	and.w	r3, r3, #8
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d103      	bne.n	8003d92 <HAL_UART_IRQHandler+0x17a>
 8003d8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d04f      	beq.n	8003e32 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f000 fa66 	bl	8004264 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	695b      	ldr	r3, [r3, #20]
 8003d9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003da2:	2b40      	cmp	r3, #64	; 0x40
 8003da4:	d141      	bne.n	8003e2a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	3314      	adds	r3, #20
 8003dac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003db0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003db4:	e853 3f00 	ldrex	r3, [r3]
 8003db8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003dbc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003dc0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003dc4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	3314      	adds	r3, #20
 8003dce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003dd2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003dd6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dda:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003dde:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003de2:	e841 2300 	strex	r3, r2, [r1]
 8003de6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003dea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d1d9      	bne.n	8003da6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d013      	beq.n	8003e22 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dfe:	4a7d      	ldr	r2, [pc, #500]	; (8003ff4 <HAL_UART_IRQHandler+0x3dc>)
 8003e00:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e06:	4618      	mov	r0, r3
 8003e08:	f7fe fa9c 	bl	8002344 <HAL_DMA_Abort_IT>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d016      	beq.n	8003e40 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003e1c:	4610      	mov	r0, r2
 8003e1e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e20:	e00e      	b.n	8003e40 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f000 f99a 	bl	800415c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e28:	e00a      	b.n	8003e40 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f000 f996 	bl	800415c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e30:	e006      	b.n	8003e40 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f000 f992 	bl	800415c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003e3e:	e170      	b.n	8004122 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e40:	bf00      	nop
    return;
 8003e42:	e16e      	b.n	8004122 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	f040 814a 	bne.w	80040e2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003e4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e52:	f003 0310 	and.w	r3, r3, #16
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	f000 8143 	beq.w	80040e2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003e5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e60:	f003 0310 	and.w	r3, r3, #16
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	f000 813c 	beq.w	80040e2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	60bb      	str	r3, [r7, #8]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	60bb      	str	r3, [r7, #8]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	60bb      	str	r3, [r7, #8]
 8003e7e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	695b      	ldr	r3, [r3, #20]
 8003e86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e8a:	2b40      	cmp	r3, #64	; 0x40
 8003e8c:	f040 80b4 	bne.w	8003ff8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003e9c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	f000 8140 	beq.w	8004126 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003eaa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	f080 8139 	bcs.w	8004126 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003eba:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ec0:	69db      	ldr	r3, [r3, #28]
 8003ec2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ec6:	f000 8088 	beq.w	8003fda <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	330c      	adds	r3, #12
 8003ed0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ed4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003ed8:	e853 3f00 	ldrex	r3, [r3]
 8003edc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003ee0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003ee4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ee8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	330c      	adds	r3, #12
 8003ef2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003ef6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003efa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003efe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003f02:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003f06:	e841 2300 	strex	r3, r2, [r1]
 8003f0a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003f0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d1d9      	bne.n	8003eca <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	3314      	adds	r3, #20
 8003f1c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f20:	e853 3f00 	ldrex	r3, [r3]
 8003f24:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003f26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f28:	f023 0301 	bic.w	r3, r3, #1
 8003f2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	3314      	adds	r3, #20
 8003f36:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003f3a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003f3e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f40:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003f42:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003f46:	e841 2300 	strex	r3, r2, [r1]
 8003f4a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003f4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d1e1      	bne.n	8003f16 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	3314      	adds	r3, #20
 8003f58:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f5c:	e853 3f00 	ldrex	r3, [r3]
 8003f60:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003f62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f68:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	3314      	adds	r3, #20
 8003f72:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003f76:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003f78:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f7a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003f7c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003f7e:	e841 2300 	strex	r3, r2, [r1]
 8003f82:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003f84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d1e3      	bne.n	8003f52 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2220      	movs	r2, #32
 8003f8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2200      	movs	r2, #0
 8003f96:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	330c      	adds	r3, #12
 8003f9e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fa0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fa2:	e853 3f00 	ldrex	r3, [r3]
 8003fa6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003fa8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003faa:	f023 0310 	bic.w	r3, r3, #16
 8003fae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	330c      	adds	r3, #12
 8003fb8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003fbc:	65ba      	str	r2, [r7, #88]	; 0x58
 8003fbe:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fc0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003fc2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003fc4:	e841 2300 	strex	r3, r2, [r1]
 8003fc8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003fca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d1e3      	bne.n	8003f98 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f7fe f945 	bl	8002264 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003fe2:	b29b      	uxth	r3, r3
 8003fe4:	1ad3      	subs	r3, r2, r3
 8003fe6:	b29b      	uxth	r3, r3
 8003fe8:	4619      	mov	r1, r3
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f000 f8c0 	bl	8004170 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003ff0:	e099      	b.n	8004126 <HAL_UART_IRQHandler+0x50e>
 8003ff2:	bf00      	nop
 8003ff4:	0800432b 	.word	0x0800432b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004000:	b29b      	uxth	r3, r3
 8004002:	1ad3      	subs	r3, r2, r3
 8004004:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800400c:	b29b      	uxth	r3, r3
 800400e:	2b00      	cmp	r3, #0
 8004010:	f000 808b 	beq.w	800412a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004014:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004018:	2b00      	cmp	r3, #0
 800401a:	f000 8086 	beq.w	800412a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	330c      	adds	r3, #12
 8004024:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004028:	e853 3f00 	ldrex	r3, [r3]
 800402c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800402e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004030:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004034:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	330c      	adds	r3, #12
 800403e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004042:	647a      	str	r2, [r7, #68]	; 0x44
 8004044:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004046:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004048:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800404a:	e841 2300 	strex	r3, r2, [r1]
 800404e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004050:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004052:	2b00      	cmp	r3, #0
 8004054:	d1e3      	bne.n	800401e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	3314      	adds	r3, #20
 800405c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800405e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004060:	e853 3f00 	ldrex	r3, [r3]
 8004064:	623b      	str	r3, [r7, #32]
   return(result);
 8004066:	6a3b      	ldr	r3, [r7, #32]
 8004068:	f023 0301 	bic.w	r3, r3, #1
 800406c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	3314      	adds	r3, #20
 8004076:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800407a:	633a      	str	r2, [r7, #48]	; 0x30
 800407c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800407e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004080:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004082:	e841 2300 	strex	r3, r2, [r1]
 8004086:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800408a:	2b00      	cmp	r3, #0
 800408c:	d1e3      	bne.n	8004056 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2220      	movs	r2, #32
 8004092:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2200      	movs	r2, #0
 800409a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	330c      	adds	r3, #12
 80040a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	e853 3f00 	ldrex	r3, [r3]
 80040aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	f023 0310 	bic.w	r3, r3, #16
 80040b2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	330c      	adds	r3, #12
 80040bc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80040c0:	61fa      	str	r2, [r7, #28]
 80040c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040c4:	69b9      	ldr	r1, [r7, #24]
 80040c6:	69fa      	ldr	r2, [r7, #28]
 80040c8:	e841 2300 	strex	r3, r2, [r1]
 80040cc:	617b      	str	r3, [r7, #20]
   return(result);
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d1e3      	bne.n	800409c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80040d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80040d8:	4619      	mov	r1, r3
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f000 f848 	bl	8004170 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80040e0:	e023      	b.n	800412a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80040e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d009      	beq.n	8004102 <HAL_UART_IRQHandler+0x4ea>
 80040ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d003      	beq.n	8004102 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f000 f929 	bl	8004352 <UART_Transmit_IT>
    return;
 8004100:	e014      	b.n	800412c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004102:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004106:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800410a:	2b00      	cmp	r3, #0
 800410c:	d00e      	beq.n	800412c <HAL_UART_IRQHandler+0x514>
 800410e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004112:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004116:	2b00      	cmp	r3, #0
 8004118:	d008      	beq.n	800412c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	f000 f969 	bl	80043f2 <UART_EndTransmit_IT>
    return;
 8004120:	e004      	b.n	800412c <HAL_UART_IRQHandler+0x514>
    return;
 8004122:	bf00      	nop
 8004124:	e002      	b.n	800412c <HAL_UART_IRQHandler+0x514>
      return;
 8004126:	bf00      	nop
 8004128:	e000      	b.n	800412c <HAL_UART_IRQHandler+0x514>
      return;
 800412a:	bf00      	nop
  }
}
 800412c:	37e8      	adds	r7, #232	; 0xe8
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}
 8004132:	bf00      	nop

08004134 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004134:	b480      	push	{r7}
 8004136:	b083      	sub	sp, #12
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800413c:	bf00      	nop
 800413e:	370c      	adds	r7, #12
 8004140:	46bd      	mov	sp, r7
 8004142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004146:	4770      	bx	lr

08004148 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004148:	b480      	push	{r7}
 800414a:	b083      	sub	sp, #12
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004150:	bf00      	nop
 8004152:	370c      	adds	r7, #12
 8004154:	46bd      	mov	sp, r7
 8004156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415a:	4770      	bx	lr

0800415c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800415c:	b480      	push	{r7}
 800415e:	b083      	sub	sp, #12
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004164:	bf00      	nop
 8004166:	370c      	adds	r7, #12
 8004168:	46bd      	mov	sp, r7
 800416a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416e:	4770      	bx	lr

08004170 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004170:	b480      	push	{r7}
 8004172:	b083      	sub	sp, #12
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
 8004178:	460b      	mov	r3, r1
 800417a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800417c:	bf00      	nop
 800417e:	370c      	adds	r7, #12
 8004180:	46bd      	mov	sp, r7
 8004182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004186:	4770      	bx	lr

08004188 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b090      	sub	sp, #64	; 0x40
 800418c:	af00      	add	r7, sp, #0
 800418e:	60f8      	str	r0, [r7, #12]
 8004190:	60b9      	str	r1, [r7, #8]
 8004192:	603b      	str	r3, [r7, #0]
 8004194:	4613      	mov	r3, r2
 8004196:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004198:	e050      	b.n	800423c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800419a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800419c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041a0:	d04c      	beq.n	800423c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80041a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d007      	beq.n	80041b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80041a8:	f7fd fef0 	bl	8001f8c <HAL_GetTick>
 80041ac:	4602      	mov	r2, r0
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	1ad3      	subs	r3, r2, r3
 80041b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d241      	bcs.n	800423c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	330c      	adds	r3, #12
 80041be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041c2:	e853 3f00 	ldrex	r3, [r3]
 80041c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80041c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ca:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80041ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	330c      	adds	r3, #12
 80041d6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80041d8:	637a      	str	r2, [r7, #52]	; 0x34
 80041da:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80041de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80041e0:	e841 2300 	strex	r3, r2, [r1]
 80041e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80041e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d1e5      	bne.n	80041b8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	3314      	adds	r3, #20
 80041f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	e853 3f00 	ldrex	r3, [r3]
 80041fa:	613b      	str	r3, [r7, #16]
   return(result);
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	f023 0301 	bic.w	r3, r3, #1
 8004202:	63bb      	str	r3, [r7, #56]	; 0x38
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	3314      	adds	r3, #20
 800420a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800420c:	623a      	str	r2, [r7, #32]
 800420e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004210:	69f9      	ldr	r1, [r7, #28]
 8004212:	6a3a      	ldr	r2, [r7, #32]
 8004214:	e841 2300 	strex	r3, r2, [r1]
 8004218:	61bb      	str	r3, [r7, #24]
   return(result);
 800421a:	69bb      	ldr	r3, [r7, #24]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d1e5      	bne.n	80041ec <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2220      	movs	r2, #32
 8004224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2220      	movs	r2, #32
 800422c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2200      	movs	r2, #0
 8004234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004238:	2303      	movs	r3, #3
 800423a:	e00f      	b.n	800425c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	681a      	ldr	r2, [r3, #0]
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	4013      	ands	r3, r2
 8004246:	68ba      	ldr	r2, [r7, #8]
 8004248:	429a      	cmp	r2, r3
 800424a:	bf0c      	ite	eq
 800424c:	2301      	moveq	r3, #1
 800424e:	2300      	movne	r3, #0
 8004250:	b2db      	uxtb	r3, r3
 8004252:	461a      	mov	r2, r3
 8004254:	79fb      	ldrb	r3, [r7, #7]
 8004256:	429a      	cmp	r2, r3
 8004258:	d09f      	beq.n	800419a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800425a:	2300      	movs	r3, #0
}
 800425c:	4618      	mov	r0, r3
 800425e:	3740      	adds	r7, #64	; 0x40
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}

08004264 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004264:	b480      	push	{r7}
 8004266:	b095      	sub	sp, #84	; 0x54
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	330c      	adds	r3, #12
 8004272:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004274:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004276:	e853 3f00 	ldrex	r3, [r3]
 800427a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800427c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800427e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004282:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	330c      	adds	r3, #12
 800428a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800428c:	643a      	str	r2, [r7, #64]	; 0x40
 800428e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004290:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004292:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004294:	e841 2300 	strex	r3, r2, [r1]
 8004298:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800429a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800429c:	2b00      	cmp	r3, #0
 800429e:	d1e5      	bne.n	800426c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	3314      	adds	r3, #20
 80042a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042a8:	6a3b      	ldr	r3, [r7, #32]
 80042aa:	e853 3f00 	ldrex	r3, [r3]
 80042ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80042b0:	69fb      	ldr	r3, [r7, #28]
 80042b2:	f023 0301 	bic.w	r3, r3, #1
 80042b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	3314      	adds	r3, #20
 80042be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80042c0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80042c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80042c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042c8:	e841 2300 	strex	r3, r2, [r1]
 80042cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80042ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d1e5      	bne.n	80042a0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d119      	bne.n	8004310 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	330c      	adds	r3, #12
 80042e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	e853 3f00 	ldrex	r3, [r3]
 80042ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	f023 0310 	bic.w	r3, r3, #16
 80042f2:	647b      	str	r3, [r7, #68]	; 0x44
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	330c      	adds	r3, #12
 80042fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80042fc:	61ba      	str	r2, [r7, #24]
 80042fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004300:	6979      	ldr	r1, [r7, #20]
 8004302:	69ba      	ldr	r2, [r7, #24]
 8004304:	e841 2300 	strex	r3, r2, [r1]
 8004308:	613b      	str	r3, [r7, #16]
   return(result);
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d1e5      	bne.n	80042dc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2220      	movs	r2, #32
 8004314:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2200      	movs	r2, #0
 800431c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800431e:	bf00      	nop
 8004320:	3754      	adds	r7, #84	; 0x54
 8004322:	46bd      	mov	sp, r7
 8004324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004328:	4770      	bx	lr

0800432a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800432a:	b580      	push	{r7, lr}
 800432c:	b084      	sub	sp, #16
 800432e:	af00      	add	r7, sp, #0
 8004330:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004336:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2200      	movs	r2, #0
 800433c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2200      	movs	r2, #0
 8004342:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004344:	68f8      	ldr	r0, [r7, #12]
 8004346:	f7ff ff09 	bl	800415c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800434a:	bf00      	nop
 800434c:	3710      	adds	r7, #16
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}

08004352 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004352:	b480      	push	{r7}
 8004354:	b085      	sub	sp, #20
 8004356:	af00      	add	r7, sp, #0
 8004358:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004360:	b2db      	uxtb	r3, r3
 8004362:	2b21      	cmp	r3, #33	; 0x21
 8004364:	d13e      	bne.n	80043e4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800436e:	d114      	bne.n	800439a <UART_Transmit_IT+0x48>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	691b      	ldr	r3, [r3, #16]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d110      	bne.n	800439a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6a1b      	ldr	r3, [r3, #32]
 800437c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	881b      	ldrh	r3, [r3, #0]
 8004382:	461a      	mov	r2, r3
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800438c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6a1b      	ldr	r3, [r3, #32]
 8004392:	1c9a      	adds	r2, r3, #2
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	621a      	str	r2, [r3, #32]
 8004398:	e008      	b.n	80043ac <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6a1b      	ldr	r3, [r3, #32]
 800439e:	1c59      	adds	r1, r3, #1
 80043a0:	687a      	ldr	r2, [r7, #4]
 80043a2:	6211      	str	r1, [r2, #32]
 80043a4:	781a      	ldrb	r2, [r3, #0]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80043b0:	b29b      	uxth	r3, r3
 80043b2:	3b01      	subs	r3, #1
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	687a      	ldr	r2, [r7, #4]
 80043b8:	4619      	mov	r1, r3
 80043ba:	84d1      	strh	r1, [r2, #38]	; 0x26
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d10f      	bne.n	80043e0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	68da      	ldr	r2, [r3, #12]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80043ce:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	68da      	ldr	r2, [r3, #12]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80043de:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80043e0:	2300      	movs	r3, #0
 80043e2:	e000      	b.n	80043e6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80043e4:	2302      	movs	r3, #2
  }
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3714      	adds	r7, #20
 80043ea:	46bd      	mov	sp, r7
 80043ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f0:	4770      	bx	lr

080043f2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80043f2:	b580      	push	{r7, lr}
 80043f4:	b082      	sub	sp, #8
 80043f6:	af00      	add	r7, sp, #0
 80043f8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	68da      	ldr	r2, [r3, #12]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004408:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2220      	movs	r2, #32
 800440e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f7ff fe8e 	bl	8004134 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004418:	2300      	movs	r3, #0
}
 800441a:	4618      	mov	r0, r3
 800441c:	3708      	adds	r7, #8
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}

08004422 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004422:	b580      	push	{r7, lr}
 8004424:	b08c      	sub	sp, #48	; 0x30
 8004426:	af00      	add	r7, sp, #0
 8004428:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004430:	b2db      	uxtb	r3, r3
 8004432:	2b22      	cmp	r3, #34	; 0x22
 8004434:	f040 80ab 	bne.w	800458e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004440:	d117      	bne.n	8004472 <UART_Receive_IT+0x50>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	691b      	ldr	r3, [r3, #16]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d113      	bne.n	8004472 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800444a:	2300      	movs	r3, #0
 800444c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004452:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	b29b      	uxth	r3, r3
 800445c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004460:	b29a      	uxth	r2, r3
 8004462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004464:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800446a:	1c9a      	adds	r2, r3, #2
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	629a      	str	r2, [r3, #40]	; 0x28
 8004470:	e026      	b.n	80044c0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004476:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004478:	2300      	movs	r3, #0
 800447a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004484:	d007      	beq.n	8004496 <UART_Receive_IT+0x74>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d10a      	bne.n	80044a4 <UART_Receive_IT+0x82>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	691b      	ldr	r3, [r3, #16]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d106      	bne.n	80044a4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	b2da      	uxtb	r2, r3
 800449e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044a0:	701a      	strb	r2, [r3, #0]
 80044a2:	e008      	b.n	80044b6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	b2db      	uxtb	r3, r3
 80044ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80044b0:	b2da      	uxtb	r2, r3
 80044b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044b4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ba:	1c5a      	adds	r2, r3, #1
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80044c4:	b29b      	uxth	r3, r3
 80044c6:	3b01      	subs	r3, #1
 80044c8:	b29b      	uxth	r3, r3
 80044ca:	687a      	ldr	r2, [r7, #4]
 80044cc:	4619      	mov	r1, r3
 80044ce:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d15a      	bne.n	800458a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	68da      	ldr	r2, [r3, #12]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f022 0220 	bic.w	r2, r2, #32
 80044e2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	68da      	ldr	r2, [r3, #12]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80044f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	695a      	ldr	r2, [r3, #20]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f022 0201 	bic.w	r2, r2, #1
 8004502:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2220      	movs	r2, #32
 8004508:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004510:	2b01      	cmp	r3, #1
 8004512:	d135      	bne.n	8004580 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2200      	movs	r2, #0
 8004518:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	330c      	adds	r3, #12
 8004520:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	e853 3f00 	ldrex	r3, [r3]
 8004528:	613b      	str	r3, [r7, #16]
   return(result);
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	f023 0310 	bic.w	r3, r3, #16
 8004530:	627b      	str	r3, [r7, #36]	; 0x24
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	330c      	adds	r3, #12
 8004538:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800453a:	623a      	str	r2, [r7, #32]
 800453c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800453e:	69f9      	ldr	r1, [r7, #28]
 8004540:	6a3a      	ldr	r2, [r7, #32]
 8004542:	e841 2300 	strex	r3, r2, [r1]
 8004546:	61bb      	str	r3, [r7, #24]
   return(result);
 8004548:	69bb      	ldr	r3, [r7, #24]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d1e5      	bne.n	800451a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f003 0310 	and.w	r3, r3, #16
 8004558:	2b10      	cmp	r3, #16
 800455a:	d10a      	bne.n	8004572 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800455c:	2300      	movs	r3, #0
 800455e:	60fb      	str	r3, [r7, #12]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	60fb      	str	r3, [r7, #12]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	60fb      	str	r3, [r7, #12]
 8004570:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004576:	4619      	mov	r1, r3
 8004578:	6878      	ldr	r0, [r7, #4]
 800457a:	f7ff fdf9 	bl	8004170 <HAL_UARTEx_RxEventCallback>
 800457e:	e002      	b.n	8004586 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f7ff fde1 	bl	8004148 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004586:	2300      	movs	r3, #0
 8004588:	e002      	b.n	8004590 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800458a:	2300      	movs	r3, #0
 800458c:	e000      	b.n	8004590 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800458e:	2302      	movs	r3, #2
  }
}
 8004590:	4618      	mov	r0, r3
 8004592:	3730      	adds	r7, #48	; 0x30
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}

08004598 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004598:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800459c:	b0c0      	sub	sp, #256	; 0x100
 800459e:	af00      	add	r7, sp, #0
 80045a0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	691b      	ldr	r3, [r3, #16]
 80045ac:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80045b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045b4:	68d9      	ldr	r1, [r3, #12]
 80045b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045ba:	681a      	ldr	r2, [r3, #0]
 80045bc:	ea40 0301 	orr.w	r3, r0, r1
 80045c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80045c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045c6:	689a      	ldr	r2, [r3, #8]
 80045c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045cc:	691b      	ldr	r3, [r3, #16]
 80045ce:	431a      	orrs	r2, r3
 80045d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045d4:	695b      	ldr	r3, [r3, #20]
 80045d6:	431a      	orrs	r2, r3
 80045d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045dc:	69db      	ldr	r3, [r3, #28]
 80045de:	4313      	orrs	r3, r2
 80045e0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80045e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	68db      	ldr	r3, [r3, #12]
 80045ec:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80045f0:	f021 010c 	bic.w	r1, r1, #12
 80045f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80045fe:	430b      	orrs	r3, r1
 8004600:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004602:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	695b      	ldr	r3, [r3, #20]
 800460a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800460e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004612:	6999      	ldr	r1, [r3, #24]
 8004614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	ea40 0301 	orr.w	r3, r0, r1
 800461e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004620:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	4b8f      	ldr	r3, [pc, #572]	; (8004864 <UART_SetConfig+0x2cc>)
 8004628:	429a      	cmp	r2, r3
 800462a:	d005      	beq.n	8004638 <UART_SetConfig+0xa0>
 800462c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004630:	681a      	ldr	r2, [r3, #0]
 8004632:	4b8d      	ldr	r3, [pc, #564]	; (8004868 <UART_SetConfig+0x2d0>)
 8004634:	429a      	cmp	r2, r3
 8004636:	d104      	bne.n	8004642 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004638:	f7ff f958 	bl	80038ec <HAL_RCC_GetPCLK2Freq>
 800463c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004640:	e003      	b.n	800464a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004642:	f7ff f93f 	bl	80038c4 <HAL_RCC_GetPCLK1Freq>
 8004646:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800464a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800464e:	69db      	ldr	r3, [r3, #28]
 8004650:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004654:	f040 810c 	bne.w	8004870 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004658:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800465c:	2200      	movs	r2, #0
 800465e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004662:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004666:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800466a:	4622      	mov	r2, r4
 800466c:	462b      	mov	r3, r5
 800466e:	1891      	adds	r1, r2, r2
 8004670:	65b9      	str	r1, [r7, #88]	; 0x58
 8004672:	415b      	adcs	r3, r3
 8004674:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004676:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800467a:	4621      	mov	r1, r4
 800467c:	eb12 0801 	adds.w	r8, r2, r1
 8004680:	4629      	mov	r1, r5
 8004682:	eb43 0901 	adc.w	r9, r3, r1
 8004686:	f04f 0200 	mov.w	r2, #0
 800468a:	f04f 0300 	mov.w	r3, #0
 800468e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004692:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004696:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800469a:	4690      	mov	r8, r2
 800469c:	4699      	mov	r9, r3
 800469e:	4623      	mov	r3, r4
 80046a0:	eb18 0303 	adds.w	r3, r8, r3
 80046a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80046a8:	462b      	mov	r3, r5
 80046aa:	eb49 0303 	adc.w	r3, r9, r3
 80046ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80046b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	2200      	movs	r2, #0
 80046ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80046be:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80046c2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80046c6:	460b      	mov	r3, r1
 80046c8:	18db      	adds	r3, r3, r3
 80046ca:	653b      	str	r3, [r7, #80]	; 0x50
 80046cc:	4613      	mov	r3, r2
 80046ce:	eb42 0303 	adc.w	r3, r2, r3
 80046d2:	657b      	str	r3, [r7, #84]	; 0x54
 80046d4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80046d8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80046dc:	f7fb fdd0 	bl	8000280 <__aeabi_uldivmod>
 80046e0:	4602      	mov	r2, r0
 80046e2:	460b      	mov	r3, r1
 80046e4:	4b61      	ldr	r3, [pc, #388]	; (800486c <UART_SetConfig+0x2d4>)
 80046e6:	fba3 2302 	umull	r2, r3, r3, r2
 80046ea:	095b      	lsrs	r3, r3, #5
 80046ec:	011c      	lsls	r4, r3, #4
 80046ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046f2:	2200      	movs	r2, #0
 80046f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80046f8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80046fc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004700:	4642      	mov	r2, r8
 8004702:	464b      	mov	r3, r9
 8004704:	1891      	adds	r1, r2, r2
 8004706:	64b9      	str	r1, [r7, #72]	; 0x48
 8004708:	415b      	adcs	r3, r3
 800470a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800470c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004710:	4641      	mov	r1, r8
 8004712:	eb12 0a01 	adds.w	sl, r2, r1
 8004716:	4649      	mov	r1, r9
 8004718:	eb43 0b01 	adc.w	fp, r3, r1
 800471c:	f04f 0200 	mov.w	r2, #0
 8004720:	f04f 0300 	mov.w	r3, #0
 8004724:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004728:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800472c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004730:	4692      	mov	sl, r2
 8004732:	469b      	mov	fp, r3
 8004734:	4643      	mov	r3, r8
 8004736:	eb1a 0303 	adds.w	r3, sl, r3
 800473a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800473e:	464b      	mov	r3, r9
 8004740:	eb4b 0303 	adc.w	r3, fp, r3
 8004744:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004748:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	2200      	movs	r2, #0
 8004750:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004754:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004758:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800475c:	460b      	mov	r3, r1
 800475e:	18db      	adds	r3, r3, r3
 8004760:	643b      	str	r3, [r7, #64]	; 0x40
 8004762:	4613      	mov	r3, r2
 8004764:	eb42 0303 	adc.w	r3, r2, r3
 8004768:	647b      	str	r3, [r7, #68]	; 0x44
 800476a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800476e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004772:	f7fb fd85 	bl	8000280 <__aeabi_uldivmod>
 8004776:	4602      	mov	r2, r0
 8004778:	460b      	mov	r3, r1
 800477a:	4611      	mov	r1, r2
 800477c:	4b3b      	ldr	r3, [pc, #236]	; (800486c <UART_SetConfig+0x2d4>)
 800477e:	fba3 2301 	umull	r2, r3, r3, r1
 8004782:	095b      	lsrs	r3, r3, #5
 8004784:	2264      	movs	r2, #100	; 0x64
 8004786:	fb02 f303 	mul.w	r3, r2, r3
 800478a:	1acb      	subs	r3, r1, r3
 800478c:	00db      	lsls	r3, r3, #3
 800478e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004792:	4b36      	ldr	r3, [pc, #216]	; (800486c <UART_SetConfig+0x2d4>)
 8004794:	fba3 2302 	umull	r2, r3, r3, r2
 8004798:	095b      	lsrs	r3, r3, #5
 800479a:	005b      	lsls	r3, r3, #1
 800479c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80047a0:	441c      	add	r4, r3
 80047a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80047a6:	2200      	movs	r2, #0
 80047a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80047ac:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80047b0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80047b4:	4642      	mov	r2, r8
 80047b6:	464b      	mov	r3, r9
 80047b8:	1891      	adds	r1, r2, r2
 80047ba:	63b9      	str	r1, [r7, #56]	; 0x38
 80047bc:	415b      	adcs	r3, r3
 80047be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80047c4:	4641      	mov	r1, r8
 80047c6:	1851      	adds	r1, r2, r1
 80047c8:	6339      	str	r1, [r7, #48]	; 0x30
 80047ca:	4649      	mov	r1, r9
 80047cc:	414b      	adcs	r3, r1
 80047ce:	637b      	str	r3, [r7, #52]	; 0x34
 80047d0:	f04f 0200 	mov.w	r2, #0
 80047d4:	f04f 0300 	mov.w	r3, #0
 80047d8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80047dc:	4659      	mov	r1, fp
 80047de:	00cb      	lsls	r3, r1, #3
 80047e0:	4651      	mov	r1, sl
 80047e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80047e6:	4651      	mov	r1, sl
 80047e8:	00ca      	lsls	r2, r1, #3
 80047ea:	4610      	mov	r0, r2
 80047ec:	4619      	mov	r1, r3
 80047ee:	4603      	mov	r3, r0
 80047f0:	4642      	mov	r2, r8
 80047f2:	189b      	adds	r3, r3, r2
 80047f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80047f8:	464b      	mov	r3, r9
 80047fa:	460a      	mov	r2, r1
 80047fc:	eb42 0303 	adc.w	r3, r2, r3
 8004800:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004804:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	2200      	movs	r2, #0
 800480c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004810:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004814:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004818:	460b      	mov	r3, r1
 800481a:	18db      	adds	r3, r3, r3
 800481c:	62bb      	str	r3, [r7, #40]	; 0x28
 800481e:	4613      	mov	r3, r2
 8004820:	eb42 0303 	adc.w	r3, r2, r3
 8004824:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004826:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800482a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800482e:	f7fb fd27 	bl	8000280 <__aeabi_uldivmod>
 8004832:	4602      	mov	r2, r0
 8004834:	460b      	mov	r3, r1
 8004836:	4b0d      	ldr	r3, [pc, #52]	; (800486c <UART_SetConfig+0x2d4>)
 8004838:	fba3 1302 	umull	r1, r3, r3, r2
 800483c:	095b      	lsrs	r3, r3, #5
 800483e:	2164      	movs	r1, #100	; 0x64
 8004840:	fb01 f303 	mul.w	r3, r1, r3
 8004844:	1ad3      	subs	r3, r2, r3
 8004846:	00db      	lsls	r3, r3, #3
 8004848:	3332      	adds	r3, #50	; 0x32
 800484a:	4a08      	ldr	r2, [pc, #32]	; (800486c <UART_SetConfig+0x2d4>)
 800484c:	fba2 2303 	umull	r2, r3, r2, r3
 8004850:	095b      	lsrs	r3, r3, #5
 8004852:	f003 0207 	and.w	r2, r3, #7
 8004856:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4422      	add	r2, r4
 800485e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004860:	e105      	b.n	8004a6e <UART_SetConfig+0x4d6>
 8004862:	bf00      	nop
 8004864:	40011000 	.word	0x40011000
 8004868:	40011400 	.word	0x40011400
 800486c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004870:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004874:	2200      	movs	r2, #0
 8004876:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800487a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800487e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004882:	4642      	mov	r2, r8
 8004884:	464b      	mov	r3, r9
 8004886:	1891      	adds	r1, r2, r2
 8004888:	6239      	str	r1, [r7, #32]
 800488a:	415b      	adcs	r3, r3
 800488c:	627b      	str	r3, [r7, #36]	; 0x24
 800488e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004892:	4641      	mov	r1, r8
 8004894:	1854      	adds	r4, r2, r1
 8004896:	4649      	mov	r1, r9
 8004898:	eb43 0501 	adc.w	r5, r3, r1
 800489c:	f04f 0200 	mov.w	r2, #0
 80048a0:	f04f 0300 	mov.w	r3, #0
 80048a4:	00eb      	lsls	r3, r5, #3
 80048a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80048aa:	00e2      	lsls	r2, r4, #3
 80048ac:	4614      	mov	r4, r2
 80048ae:	461d      	mov	r5, r3
 80048b0:	4643      	mov	r3, r8
 80048b2:	18e3      	adds	r3, r4, r3
 80048b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80048b8:	464b      	mov	r3, r9
 80048ba:	eb45 0303 	adc.w	r3, r5, r3
 80048be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80048c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	2200      	movs	r2, #0
 80048ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80048ce:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80048d2:	f04f 0200 	mov.w	r2, #0
 80048d6:	f04f 0300 	mov.w	r3, #0
 80048da:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80048de:	4629      	mov	r1, r5
 80048e0:	008b      	lsls	r3, r1, #2
 80048e2:	4621      	mov	r1, r4
 80048e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80048e8:	4621      	mov	r1, r4
 80048ea:	008a      	lsls	r2, r1, #2
 80048ec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80048f0:	f7fb fcc6 	bl	8000280 <__aeabi_uldivmod>
 80048f4:	4602      	mov	r2, r0
 80048f6:	460b      	mov	r3, r1
 80048f8:	4b60      	ldr	r3, [pc, #384]	; (8004a7c <UART_SetConfig+0x4e4>)
 80048fa:	fba3 2302 	umull	r2, r3, r3, r2
 80048fe:	095b      	lsrs	r3, r3, #5
 8004900:	011c      	lsls	r4, r3, #4
 8004902:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004906:	2200      	movs	r2, #0
 8004908:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800490c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004910:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004914:	4642      	mov	r2, r8
 8004916:	464b      	mov	r3, r9
 8004918:	1891      	adds	r1, r2, r2
 800491a:	61b9      	str	r1, [r7, #24]
 800491c:	415b      	adcs	r3, r3
 800491e:	61fb      	str	r3, [r7, #28]
 8004920:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004924:	4641      	mov	r1, r8
 8004926:	1851      	adds	r1, r2, r1
 8004928:	6139      	str	r1, [r7, #16]
 800492a:	4649      	mov	r1, r9
 800492c:	414b      	adcs	r3, r1
 800492e:	617b      	str	r3, [r7, #20]
 8004930:	f04f 0200 	mov.w	r2, #0
 8004934:	f04f 0300 	mov.w	r3, #0
 8004938:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800493c:	4659      	mov	r1, fp
 800493e:	00cb      	lsls	r3, r1, #3
 8004940:	4651      	mov	r1, sl
 8004942:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004946:	4651      	mov	r1, sl
 8004948:	00ca      	lsls	r2, r1, #3
 800494a:	4610      	mov	r0, r2
 800494c:	4619      	mov	r1, r3
 800494e:	4603      	mov	r3, r0
 8004950:	4642      	mov	r2, r8
 8004952:	189b      	adds	r3, r3, r2
 8004954:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004958:	464b      	mov	r3, r9
 800495a:	460a      	mov	r2, r1
 800495c:	eb42 0303 	adc.w	r3, r2, r3
 8004960:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004964:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	2200      	movs	r2, #0
 800496c:	67bb      	str	r3, [r7, #120]	; 0x78
 800496e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004970:	f04f 0200 	mov.w	r2, #0
 8004974:	f04f 0300 	mov.w	r3, #0
 8004978:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800497c:	4649      	mov	r1, r9
 800497e:	008b      	lsls	r3, r1, #2
 8004980:	4641      	mov	r1, r8
 8004982:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004986:	4641      	mov	r1, r8
 8004988:	008a      	lsls	r2, r1, #2
 800498a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800498e:	f7fb fc77 	bl	8000280 <__aeabi_uldivmod>
 8004992:	4602      	mov	r2, r0
 8004994:	460b      	mov	r3, r1
 8004996:	4b39      	ldr	r3, [pc, #228]	; (8004a7c <UART_SetConfig+0x4e4>)
 8004998:	fba3 1302 	umull	r1, r3, r3, r2
 800499c:	095b      	lsrs	r3, r3, #5
 800499e:	2164      	movs	r1, #100	; 0x64
 80049a0:	fb01 f303 	mul.w	r3, r1, r3
 80049a4:	1ad3      	subs	r3, r2, r3
 80049a6:	011b      	lsls	r3, r3, #4
 80049a8:	3332      	adds	r3, #50	; 0x32
 80049aa:	4a34      	ldr	r2, [pc, #208]	; (8004a7c <UART_SetConfig+0x4e4>)
 80049ac:	fba2 2303 	umull	r2, r3, r2, r3
 80049b0:	095b      	lsrs	r3, r3, #5
 80049b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80049b6:	441c      	add	r4, r3
 80049b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049bc:	2200      	movs	r2, #0
 80049be:	673b      	str	r3, [r7, #112]	; 0x70
 80049c0:	677a      	str	r2, [r7, #116]	; 0x74
 80049c2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80049c6:	4642      	mov	r2, r8
 80049c8:	464b      	mov	r3, r9
 80049ca:	1891      	adds	r1, r2, r2
 80049cc:	60b9      	str	r1, [r7, #8]
 80049ce:	415b      	adcs	r3, r3
 80049d0:	60fb      	str	r3, [r7, #12]
 80049d2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80049d6:	4641      	mov	r1, r8
 80049d8:	1851      	adds	r1, r2, r1
 80049da:	6039      	str	r1, [r7, #0]
 80049dc:	4649      	mov	r1, r9
 80049de:	414b      	adcs	r3, r1
 80049e0:	607b      	str	r3, [r7, #4]
 80049e2:	f04f 0200 	mov.w	r2, #0
 80049e6:	f04f 0300 	mov.w	r3, #0
 80049ea:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80049ee:	4659      	mov	r1, fp
 80049f0:	00cb      	lsls	r3, r1, #3
 80049f2:	4651      	mov	r1, sl
 80049f4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80049f8:	4651      	mov	r1, sl
 80049fa:	00ca      	lsls	r2, r1, #3
 80049fc:	4610      	mov	r0, r2
 80049fe:	4619      	mov	r1, r3
 8004a00:	4603      	mov	r3, r0
 8004a02:	4642      	mov	r2, r8
 8004a04:	189b      	adds	r3, r3, r2
 8004a06:	66bb      	str	r3, [r7, #104]	; 0x68
 8004a08:	464b      	mov	r3, r9
 8004a0a:	460a      	mov	r2, r1
 8004a0c:	eb42 0303 	adc.w	r3, r2, r3
 8004a10:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004a12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	663b      	str	r3, [r7, #96]	; 0x60
 8004a1c:	667a      	str	r2, [r7, #100]	; 0x64
 8004a1e:	f04f 0200 	mov.w	r2, #0
 8004a22:	f04f 0300 	mov.w	r3, #0
 8004a26:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004a2a:	4649      	mov	r1, r9
 8004a2c:	008b      	lsls	r3, r1, #2
 8004a2e:	4641      	mov	r1, r8
 8004a30:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a34:	4641      	mov	r1, r8
 8004a36:	008a      	lsls	r2, r1, #2
 8004a38:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004a3c:	f7fb fc20 	bl	8000280 <__aeabi_uldivmod>
 8004a40:	4602      	mov	r2, r0
 8004a42:	460b      	mov	r3, r1
 8004a44:	4b0d      	ldr	r3, [pc, #52]	; (8004a7c <UART_SetConfig+0x4e4>)
 8004a46:	fba3 1302 	umull	r1, r3, r3, r2
 8004a4a:	095b      	lsrs	r3, r3, #5
 8004a4c:	2164      	movs	r1, #100	; 0x64
 8004a4e:	fb01 f303 	mul.w	r3, r1, r3
 8004a52:	1ad3      	subs	r3, r2, r3
 8004a54:	011b      	lsls	r3, r3, #4
 8004a56:	3332      	adds	r3, #50	; 0x32
 8004a58:	4a08      	ldr	r2, [pc, #32]	; (8004a7c <UART_SetConfig+0x4e4>)
 8004a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a5e:	095b      	lsrs	r3, r3, #5
 8004a60:	f003 020f 	and.w	r2, r3, #15
 8004a64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4422      	add	r2, r4
 8004a6c:	609a      	str	r2, [r3, #8]
}
 8004a6e:	bf00      	nop
 8004a70:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004a74:	46bd      	mov	sp, r7
 8004a76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a7a:	bf00      	nop
 8004a7c:	51eb851f 	.word	0x51eb851f

08004a80 <__errno>:
 8004a80:	4b01      	ldr	r3, [pc, #4]	; (8004a88 <__errno+0x8>)
 8004a82:	6818      	ldr	r0, [r3, #0]
 8004a84:	4770      	bx	lr
 8004a86:	bf00      	nop
 8004a88:	2000000c 	.word	0x2000000c

08004a8c <__libc_init_array>:
 8004a8c:	b570      	push	{r4, r5, r6, lr}
 8004a8e:	4d0d      	ldr	r5, [pc, #52]	; (8004ac4 <__libc_init_array+0x38>)
 8004a90:	4c0d      	ldr	r4, [pc, #52]	; (8004ac8 <__libc_init_array+0x3c>)
 8004a92:	1b64      	subs	r4, r4, r5
 8004a94:	10a4      	asrs	r4, r4, #2
 8004a96:	2600      	movs	r6, #0
 8004a98:	42a6      	cmp	r6, r4
 8004a9a:	d109      	bne.n	8004ab0 <__libc_init_array+0x24>
 8004a9c:	4d0b      	ldr	r5, [pc, #44]	; (8004acc <__libc_init_array+0x40>)
 8004a9e:	4c0c      	ldr	r4, [pc, #48]	; (8004ad0 <__libc_init_array+0x44>)
 8004aa0:	f001 f842 	bl	8005b28 <_init>
 8004aa4:	1b64      	subs	r4, r4, r5
 8004aa6:	10a4      	asrs	r4, r4, #2
 8004aa8:	2600      	movs	r6, #0
 8004aaa:	42a6      	cmp	r6, r4
 8004aac:	d105      	bne.n	8004aba <__libc_init_array+0x2e>
 8004aae:	bd70      	pop	{r4, r5, r6, pc}
 8004ab0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ab4:	4798      	blx	r3
 8004ab6:	3601      	adds	r6, #1
 8004ab8:	e7ee      	b.n	8004a98 <__libc_init_array+0xc>
 8004aba:	f855 3b04 	ldr.w	r3, [r5], #4
 8004abe:	4798      	blx	r3
 8004ac0:	3601      	adds	r6, #1
 8004ac2:	e7f2      	b.n	8004aaa <__libc_init_array+0x1e>
 8004ac4:	08006dfc 	.word	0x08006dfc
 8004ac8:	08006dfc 	.word	0x08006dfc
 8004acc:	08006dfc 	.word	0x08006dfc
 8004ad0:	08006e00 	.word	0x08006e00

08004ad4 <memcmp>:
 8004ad4:	b510      	push	{r4, lr}
 8004ad6:	3901      	subs	r1, #1
 8004ad8:	4402      	add	r2, r0
 8004ada:	4290      	cmp	r0, r2
 8004adc:	d101      	bne.n	8004ae2 <memcmp+0xe>
 8004ade:	2000      	movs	r0, #0
 8004ae0:	e005      	b.n	8004aee <memcmp+0x1a>
 8004ae2:	7803      	ldrb	r3, [r0, #0]
 8004ae4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8004ae8:	42a3      	cmp	r3, r4
 8004aea:	d001      	beq.n	8004af0 <memcmp+0x1c>
 8004aec:	1b18      	subs	r0, r3, r4
 8004aee:	bd10      	pop	{r4, pc}
 8004af0:	3001      	adds	r0, #1
 8004af2:	e7f2      	b.n	8004ada <memcmp+0x6>

08004af4 <memcpy>:
 8004af4:	440a      	add	r2, r1
 8004af6:	4291      	cmp	r1, r2
 8004af8:	f100 33ff 	add.w	r3, r0, #4294967295
 8004afc:	d100      	bne.n	8004b00 <memcpy+0xc>
 8004afe:	4770      	bx	lr
 8004b00:	b510      	push	{r4, lr}
 8004b02:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004b06:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004b0a:	4291      	cmp	r1, r2
 8004b0c:	d1f9      	bne.n	8004b02 <memcpy+0xe>
 8004b0e:	bd10      	pop	{r4, pc}

08004b10 <memset>:
 8004b10:	4402      	add	r2, r0
 8004b12:	4603      	mov	r3, r0
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d100      	bne.n	8004b1a <memset+0xa>
 8004b18:	4770      	bx	lr
 8004b1a:	f803 1b01 	strb.w	r1, [r3], #1
 8004b1e:	e7f9      	b.n	8004b14 <memset+0x4>

08004b20 <iprintf>:
 8004b20:	b40f      	push	{r0, r1, r2, r3}
 8004b22:	4b0a      	ldr	r3, [pc, #40]	; (8004b4c <iprintf+0x2c>)
 8004b24:	b513      	push	{r0, r1, r4, lr}
 8004b26:	681c      	ldr	r4, [r3, #0]
 8004b28:	b124      	cbz	r4, 8004b34 <iprintf+0x14>
 8004b2a:	69a3      	ldr	r3, [r4, #24]
 8004b2c:	b913      	cbnz	r3, 8004b34 <iprintf+0x14>
 8004b2e:	4620      	mov	r0, r4
 8004b30:	f000 fa5e 	bl	8004ff0 <__sinit>
 8004b34:	ab05      	add	r3, sp, #20
 8004b36:	9a04      	ldr	r2, [sp, #16]
 8004b38:	68a1      	ldr	r1, [r4, #8]
 8004b3a:	9301      	str	r3, [sp, #4]
 8004b3c:	4620      	mov	r0, r4
 8004b3e:	f000 fc67 	bl	8005410 <_vfiprintf_r>
 8004b42:	b002      	add	sp, #8
 8004b44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b48:	b004      	add	sp, #16
 8004b4a:	4770      	bx	lr
 8004b4c:	2000000c 	.word	0x2000000c

08004b50 <_puts_r>:
 8004b50:	b570      	push	{r4, r5, r6, lr}
 8004b52:	460e      	mov	r6, r1
 8004b54:	4605      	mov	r5, r0
 8004b56:	b118      	cbz	r0, 8004b60 <_puts_r+0x10>
 8004b58:	6983      	ldr	r3, [r0, #24]
 8004b5a:	b90b      	cbnz	r3, 8004b60 <_puts_r+0x10>
 8004b5c:	f000 fa48 	bl	8004ff0 <__sinit>
 8004b60:	69ab      	ldr	r3, [r5, #24]
 8004b62:	68ac      	ldr	r4, [r5, #8]
 8004b64:	b913      	cbnz	r3, 8004b6c <_puts_r+0x1c>
 8004b66:	4628      	mov	r0, r5
 8004b68:	f000 fa42 	bl	8004ff0 <__sinit>
 8004b6c:	4b2c      	ldr	r3, [pc, #176]	; (8004c20 <_puts_r+0xd0>)
 8004b6e:	429c      	cmp	r4, r3
 8004b70:	d120      	bne.n	8004bb4 <_puts_r+0x64>
 8004b72:	686c      	ldr	r4, [r5, #4]
 8004b74:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004b76:	07db      	lsls	r3, r3, #31
 8004b78:	d405      	bmi.n	8004b86 <_puts_r+0x36>
 8004b7a:	89a3      	ldrh	r3, [r4, #12]
 8004b7c:	0598      	lsls	r0, r3, #22
 8004b7e:	d402      	bmi.n	8004b86 <_puts_r+0x36>
 8004b80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b82:	f000 fad3 	bl	800512c <__retarget_lock_acquire_recursive>
 8004b86:	89a3      	ldrh	r3, [r4, #12]
 8004b88:	0719      	lsls	r1, r3, #28
 8004b8a:	d51d      	bpl.n	8004bc8 <_puts_r+0x78>
 8004b8c:	6923      	ldr	r3, [r4, #16]
 8004b8e:	b1db      	cbz	r3, 8004bc8 <_puts_r+0x78>
 8004b90:	3e01      	subs	r6, #1
 8004b92:	68a3      	ldr	r3, [r4, #8]
 8004b94:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004b98:	3b01      	subs	r3, #1
 8004b9a:	60a3      	str	r3, [r4, #8]
 8004b9c:	bb39      	cbnz	r1, 8004bee <_puts_r+0x9e>
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	da38      	bge.n	8004c14 <_puts_r+0xc4>
 8004ba2:	4622      	mov	r2, r4
 8004ba4:	210a      	movs	r1, #10
 8004ba6:	4628      	mov	r0, r5
 8004ba8:	f000 f848 	bl	8004c3c <__swbuf_r>
 8004bac:	3001      	adds	r0, #1
 8004bae:	d011      	beq.n	8004bd4 <_puts_r+0x84>
 8004bb0:	250a      	movs	r5, #10
 8004bb2:	e011      	b.n	8004bd8 <_puts_r+0x88>
 8004bb4:	4b1b      	ldr	r3, [pc, #108]	; (8004c24 <_puts_r+0xd4>)
 8004bb6:	429c      	cmp	r4, r3
 8004bb8:	d101      	bne.n	8004bbe <_puts_r+0x6e>
 8004bba:	68ac      	ldr	r4, [r5, #8]
 8004bbc:	e7da      	b.n	8004b74 <_puts_r+0x24>
 8004bbe:	4b1a      	ldr	r3, [pc, #104]	; (8004c28 <_puts_r+0xd8>)
 8004bc0:	429c      	cmp	r4, r3
 8004bc2:	bf08      	it	eq
 8004bc4:	68ec      	ldreq	r4, [r5, #12]
 8004bc6:	e7d5      	b.n	8004b74 <_puts_r+0x24>
 8004bc8:	4621      	mov	r1, r4
 8004bca:	4628      	mov	r0, r5
 8004bcc:	f000 f888 	bl	8004ce0 <__swsetup_r>
 8004bd0:	2800      	cmp	r0, #0
 8004bd2:	d0dd      	beq.n	8004b90 <_puts_r+0x40>
 8004bd4:	f04f 35ff 	mov.w	r5, #4294967295
 8004bd8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004bda:	07da      	lsls	r2, r3, #31
 8004bdc:	d405      	bmi.n	8004bea <_puts_r+0x9a>
 8004bde:	89a3      	ldrh	r3, [r4, #12]
 8004be0:	059b      	lsls	r3, r3, #22
 8004be2:	d402      	bmi.n	8004bea <_puts_r+0x9a>
 8004be4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004be6:	f000 faa2 	bl	800512e <__retarget_lock_release_recursive>
 8004bea:	4628      	mov	r0, r5
 8004bec:	bd70      	pop	{r4, r5, r6, pc}
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	da04      	bge.n	8004bfc <_puts_r+0xac>
 8004bf2:	69a2      	ldr	r2, [r4, #24]
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	dc06      	bgt.n	8004c06 <_puts_r+0xb6>
 8004bf8:	290a      	cmp	r1, #10
 8004bfa:	d004      	beq.n	8004c06 <_puts_r+0xb6>
 8004bfc:	6823      	ldr	r3, [r4, #0]
 8004bfe:	1c5a      	adds	r2, r3, #1
 8004c00:	6022      	str	r2, [r4, #0]
 8004c02:	7019      	strb	r1, [r3, #0]
 8004c04:	e7c5      	b.n	8004b92 <_puts_r+0x42>
 8004c06:	4622      	mov	r2, r4
 8004c08:	4628      	mov	r0, r5
 8004c0a:	f000 f817 	bl	8004c3c <__swbuf_r>
 8004c0e:	3001      	adds	r0, #1
 8004c10:	d1bf      	bne.n	8004b92 <_puts_r+0x42>
 8004c12:	e7df      	b.n	8004bd4 <_puts_r+0x84>
 8004c14:	6823      	ldr	r3, [r4, #0]
 8004c16:	250a      	movs	r5, #10
 8004c18:	1c5a      	adds	r2, r3, #1
 8004c1a:	6022      	str	r2, [r4, #0]
 8004c1c:	701d      	strb	r5, [r3, #0]
 8004c1e:	e7db      	b.n	8004bd8 <_puts_r+0x88>
 8004c20:	08006d80 	.word	0x08006d80
 8004c24:	08006da0 	.word	0x08006da0
 8004c28:	08006d60 	.word	0x08006d60

08004c2c <puts>:
 8004c2c:	4b02      	ldr	r3, [pc, #8]	; (8004c38 <puts+0xc>)
 8004c2e:	4601      	mov	r1, r0
 8004c30:	6818      	ldr	r0, [r3, #0]
 8004c32:	f7ff bf8d 	b.w	8004b50 <_puts_r>
 8004c36:	bf00      	nop
 8004c38:	2000000c 	.word	0x2000000c

08004c3c <__swbuf_r>:
 8004c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c3e:	460e      	mov	r6, r1
 8004c40:	4614      	mov	r4, r2
 8004c42:	4605      	mov	r5, r0
 8004c44:	b118      	cbz	r0, 8004c4e <__swbuf_r+0x12>
 8004c46:	6983      	ldr	r3, [r0, #24]
 8004c48:	b90b      	cbnz	r3, 8004c4e <__swbuf_r+0x12>
 8004c4a:	f000 f9d1 	bl	8004ff0 <__sinit>
 8004c4e:	4b21      	ldr	r3, [pc, #132]	; (8004cd4 <__swbuf_r+0x98>)
 8004c50:	429c      	cmp	r4, r3
 8004c52:	d12b      	bne.n	8004cac <__swbuf_r+0x70>
 8004c54:	686c      	ldr	r4, [r5, #4]
 8004c56:	69a3      	ldr	r3, [r4, #24]
 8004c58:	60a3      	str	r3, [r4, #8]
 8004c5a:	89a3      	ldrh	r3, [r4, #12]
 8004c5c:	071a      	lsls	r2, r3, #28
 8004c5e:	d52f      	bpl.n	8004cc0 <__swbuf_r+0x84>
 8004c60:	6923      	ldr	r3, [r4, #16]
 8004c62:	b36b      	cbz	r3, 8004cc0 <__swbuf_r+0x84>
 8004c64:	6923      	ldr	r3, [r4, #16]
 8004c66:	6820      	ldr	r0, [r4, #0]
 8004c68:	1ac0      	subs	r0, r0, r3
 8004c6a:	6963      	ldr	r3, [r4, #20]
 8004c6c:	b2f6      	uxtb	r6, r6
 8004c6e:	4283      	cmp	r3, r0
 8004c70:	4637      	mov	r7, r6
 8004c72:	dc04      	bgt.n	8004c7e <__swbuf_r+0x42>
 8004c74:	4621      	mov	r1, r4
 8004c76:	4628      	mov	r0, r5
 8004c78:	f000 f926 	bl	8004ec8 <_fflush_r>
 8004c7c:	bb30      	cbnz	r0, 8004ccc <__swbuf_r+0x90>
 8004c7e:	68a3      	ldr	r3, [r4, #8]
 8004c80:	3b01      	subs	r3, #1
 8004c82:	60a3      	str	r3, [r4, #8]
 8004c84:	6823      	ldr	r3, [r4, #0]
 8004c86:	1c5a      	adds	r2, r3, #1
 8004c88:	6022      	str	r2, [r4, #0]
 8004c8a:	701e      	strb	r6, [r3, #0]
 8004c8c:	6963      	ldr	r3, [r4, #20]
 8004c8e:	3001      	adds	r0, #1
 8004c90:	4283      	cmp	r3, r0
 8004c92:	d004      	beq.n	8004c9e <__swbuf_r+0x62>
 8004c94:	89a3      	ldrh	r3, [r4, #12]
 8004c96:	07db      	lsls	r3, r3, #31
 8004c98:	d506      	bpl.n	8004ca8 <__swbuf_r+0x6c>
 8004c9a:	2e0a      	cmp	r6, #10
 8004c9c:	d104      	bne.n	8004ca8 <__swbuf_r+0x6c>
 8004c9e:	4621      	mov	r1, r4
 8004ca0:	4628      	mov	r0, r5
 8004ca2:	f000 f911 	bl	8004ec8 <_fflush_r>
 8004ca6:	b988      	cbnz	r0, 8004ccc <__swbuf_r+0x90>
 8004ca8:	4638      	mov	r0, r7
 8004caa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004cac:	4b0a      	ldr	r3, [pc, #40]	; (8004cd8 <__swbuf_r+0x9c>)
 8004cae:	429c      	cmp	r4, r3
 8004cb0:	d101      	bne.n	8004cb6 <__swbuf_r+0x7a>
 8004cb2:	68ac      	ldr	r4, [r5, #8]
 8004cb4:	e7cf      	b.n	8004c56 <__swbuf_r+0x1a>
 8004cb6:	4b09      	ldr	r3, [pc, #36]	; (8004cdc <__swbuf_r+0xa0>)
 8004cb8:	429c      	cmp	r4, r3
 8004cba:	bf08      	it	eq
 8004cbc:	68ec      	ldreq	r4, [r5, #12]
 8004cbe:	e7ca      	b.n	8004c56 <__swbuf_r+0x1a>
 8004cc0:	4621      	mov	r1, r4
 8004cc2:	4628      	mov	r0, r5
 8004cc4:	f000 f80c 	bl	8004ce0 <__swsetup_r>
 8004cc8:	2800      	cmp	r0, #0
 8004cca:	d0cb      	beq.n	8004c64 <__swbuf_r+0x28>
 8004ccc:	f04f 37ff 	mov.w	r7, #4294967295
 8004cd0:	e7ea      	b.n	8004ca8 <__swbuf_r+0x6c>
 8004cd2:	bf00      	nop
 8004cd4:	08006d80 	.word	0x08006d80
 8004cd8:	08006da0 	.word	0x08006da0
 8004cdc:	08006d60 	.word	0x08006d60

08004ce0 <__swsetup_r>:
 8004ce0:	4b32      	ldr	r3, [pc, #200]	; (8004dac <__swsetup_r+0xcc>)
 8004ce2:	b570      	push	{r4, r5, r6, lr}
 8004ce4:	681d      	ldr	r5, [r3, #0]
 8004ce6:	4606      	mov	r6, r0
 8004ce8:	460c      	mov	r4, r1
 8004cea:	b125      	cbz	r5, 8004cf6 <__swsetup_r+0x16>
 8004cec:	69ab      	ldr	r3, [r5, #24]
 8004cee:	b913      	cbnz	r3, 8004cf6 <__swsetup_r+0x16>
 8004cf0:	4628      	mov	r0, r5
 8004cf2:	f000 f97d 	bl	8004ff0 <__sinit>
 8004cf6:	4b2e      	ldr	r3, [pc, #184]	; (8004db0 <__swsetup_r+0xd0>)
 8004cf8:	429c      	cmp	r4, r3
 8004cfa:	d10f      	bne.n	8004d1c <__swsetup_r+0x3c>
 8004cfc:	686c      	ldr	r4, [r5, #4]
 8004cfe:	89a3      	ldrh	r3, [r4, #12]
 8004d00:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004d04:	0719      	lsls	r1, r3, #28
 8004d06:	d42c      	bmi.n	8004d62 <__swsetup_r+0x82>
 8004d08:	06dd      	lsls	r5, r3, #27
 8004d0a:	d411      	bmi.n	8004d30 <__swsetup_r+0x50>
 8004d0c:	2309      	movs	r3, #9
 8004d0e:	6033      	str	r3, [r6, #0]
 8004d10:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004d14:	81a3      	strh	r3, [r4, #12]
 8004d16:	f04f 30ff 	mov.w	r0, #4294967295
 8004d1a:	e03e      	b.n	8004d9a <__swsetup_r+0xba>
 8004d1c:	4b25      	ldr	r3, [pc, #148]	; (8004db4 <__swsetup_r+0xd4>)
 8004d1e:	429c      	cmp	r4, r3
 8004d20:	d101      	bne.n	8004d26 <__swsetup_r+0x46>
 8004d22:	68ac      	ldr	r4, [r5, #8]
 8004d24:	e7eb      	b.n	8004cfe <__swsetup_r+0x1e>
 8004d26:	4b24      	ldr	r3, [pc, #144]	; (8004db8 <__swsetup_r+0xd8>)
 8004d28:	429c      	cmp	r4, r3
 8004d2a:	bf08      	it	eq
 8004d2c:	68ec      	ldreq	r4, [r5, #12]
 8004d2e:	e7e6      	b.n	8004cfe <__swsetup_r+0x1e>
 8004d30:	0758      	lsls	r0, r3, #29
 8004d32:	d512      	bpl.n	8004d5a <__swsetup_r+0x7a>
 8004d34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004d36:	b141      	cbz	r1, 8004d4a <__swsetup_r+0x6a>
 8004d38:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004d3c:	4299      	cmp	r1, r3
 8004d3e:	d002      	beq.n	8004d46 <__swsetup_r+0x66>
 8004d40:	4630      	mov	r0, r6
 8004d42:	f000 fa5b 	bl	80051fc <_free_r>
 8004d46:	2300      	movs	r3, #0
 8004d48:	6363      	str	r3, [r4, #52]	; 0x34
 8004d4a:	89a3      	ldrh	r3, [r4, #12]
 8004d4c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004d50:	81a3      	strh	r3, [r4, #12]
 8004d52:	2300      	movs	r3, #0
 8004d54:	6063      	str	r3, [r4, #4]
 8004d56:	6923      	ldr	r3, [r4, #16]
 8004d58:	6023      	str	r3, [r4, #0]
 8004d5a:	89a3      	ldrh	r3, [r4, #12]
 8004d5c:	f043 0308 	orr.w	r3, r3, #8
 8004d60:	81a3      	strh	r3, [r4, #12]
 8004d62:	6923      	ldr	r3, [r4, #16]
 8004d64:	b94b      	cbnz	r3, 8004d7a <__swsetup_r+0x9a>
 8004d66:	89a3      	ldrh	r3, [r4, #12]
 8004d68:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004d6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d70:	d003      	beq.n	8004d7a <__swsetup_r+0x9a>
 8004d72:	4621      	mov	r1, r4
 8004d74:	4630      	mov	r0, r6
 8004d76:	f000 fa01 	bl	800517c <__smakebuf_r>
 8004d7a:	89a0      	ldrh	r0, [r4, #12]
 8004d7c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004d80:	f010 0301 	ands.w	r3, r0, #1
 8004d84:	d00a      	beq.n	8004d9c <__swsetup_r+0xbc>
 8004d86:	2300      	movs	r3, #0
 8004d88:	60a3      	str	r3, [r4, #8]
 8004d8a:	6963      	ldr	r3, [r4, #20]
 8004d8c:	425b      	negs	r3, r3
 8004d8e:	61a3      	str	r3, [r4, #24]
 8004d90:	6923      	ldr	r3, [r4, #16]
 8004d92:	b943      	cbnz	r3, 8004da6 <__swsetup_r+0xc6>
 8004d94:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004d98:	d1ba      	bne.n	8004d10 <__swsetup_r+0x30>
 8004d9a:	bd70      	pop	{r4, r5, r6, pc}
 8004d9c:	0781      	lsls	r1, r0, #30
 8004d9e:	bf58      	it	pl
 8004da0:	6963      	ldrpl	r3, [r4, #20]
 8004da2:	60a3      	str	r3, [r4, #8]
 8004da4:	e7f4      	b.n	8004d90 <__swsetup_r+0xb0>
 8004da6:	2000      	movs	r0, #0
 8004da8:	e7f7      	b.n	8004d9a <__swsetup_r+0xba>
 8004daa:	bf00      	nop
 8004dac:	2000000c 	.word	0x2000000c
 8004db0:	08006d80 	.word	0x08006d80
 8004db4:	08006da0 	.word	0x08006da0
 8004db8:	08006d60 	.word	0x08006d60

08004dbc <__sflush_r>:
 8004dbc:	898a      	ldrh	r2, [r1, #12]
 8004dbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004dc2:	4605      	mov	r5, r0
 8004dc4:	0710      	lsls	r0, r2, #28
 8004dc6:	460c      	mov	r4, r1
 8004dc8:	d458      	bmi.n	8004e7c <__sflush_r+0xc0>
 8004dca:	684b      	ldr	r3, [r1, #4]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	dc05      	bgt.n	8004ddc <__sflush_r+0x20>
 8004dd0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	dc02      	bgt.n	8004ddc <__sflush_r+0x20>
 8004dd6:	2000      	movs	r0, #0
 8004dd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ddc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004dde:	2e00      	cmp	r6, #0
 8004de0:	d0f9      	beq.n	8004dd6 <__sflush_r+0x1a>
 8004de2:	2300      	movs	r3, #0
 8004de4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004de8:	682f      	ldr	r7, [r5, #0]
 8004dea:	602b      	str	r3, [r5, #0]
 8004dec:	d032      	beq.n	8004e54 <__sflush_r+0x98>
 8004dee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004df0:	89a3      	ldrh	r3, [r4, #12]
 8004df2:	075a      	lsls	r2, r3, #29
 8004df4:	d505      	bpl.n	8004e02 <__sflush_r+0x46>
 8004df6:	6863      	ldr	r3, [r4, #4]
 8004df8:	1ac0      	subs	r0, r0, r3
 8004dfa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004dfc:	b10b      	cbz	r3, 8004e02 <__sflush_r+0x46>
 8004dfe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004e00:	1ac0      	subs	r0, r0, r3
 8004e02:	2300      	movs	r3, #0
 8004e04:	4602      	mov	r2, r0
 8004e06:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004e08:	6a21      	ldr	r1, [r4, #32]
 8004e0a:	4628      	mov	r0, r5
 8004e0c:	47b0      	blx	r6
 8004e0e:	1c43      	adds	r3, r0, #1
 8004e10:	89a3      	ldrh	r3, [r4, #12]
 8004e12:	d106      	bne.n	8004e22 <__sflush_r+0x66>
 8004e14:	6829      	ldr	r1, [r5, #0]
 8004e16:	291d      	cmp	r1, #29
 8004e18:	d82c      	bhi.n	8004e74 <__sflush_r+0xb8>
 8004e1a:	4a2a      	ldr	r2, [pc, #168]	; (8004ec4 <__sflush_r+0x108>)
 8004e1c:	40ca      	lsrs	r2, r1
 8004e1e:	07d6      	lsls	r6, r2, #31
 8004e20:	d528      	bpl.n	8004e74 <__sflush_r+0xb8>
 8004e22:	2200      	movs	r2, #0
 8004e24:	6062      	str	r2, [r4, #4]
 8004e26:	04d9      	lsls	r1, r3, #19
 8004e28:	6922      	ldr	r2, [r4, #16]
 8004e2a:	6022      	str	r2, [r4, #0]
 8004e2c:	d504      	bpl.n	8004e38 <__sflush_r+0x7c>
 8004e2e:	1c42      	adds	r2, r0, #1
 8004e30:	d101      	bne.n	8004e36 <__sflush_r+0x7a>
 8004e32:	682b      	ldr	r3, [r5, #0]
 8004e34:	b903      	cbnz	r3, 8004e38 <__sflush_r+0x7c>
 8004e36:	6560      	str	r0, [r4, #84]	; 0x54
 8004e38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004e3a:	602f      	str	r7, [r5, #0]
 8004e3c:	2900      	cmp	r1, #0
 8004e3e:	d0ca      	beq.n	8004dd6 <__sflush_r+0x1a>
 8004e40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004e44:	4299      	cmp	r1, r3
 8004e46:	d002      	beq.n	8004e4e <__sflush_r+0x92>
 8004e48:	4628      	mov	r0, r5
 8004e4a:	f000 f9d7 	bl	80051fc <_free_r>
 8004e4e:	2000      	movs	r0, #0
 8004e50:	6360      	str	r0, [r4, #52]	; 0x34
 8004e52:	e7c1      	b.n	8004dd8 <__sflush_r+0x1c>
 8004e54:	6a21      	ldr	r1, [r4, #32]
 8004e56:	2301      	movs	r3, #1
 8004e58:	4628      	mov	r0, r5
 8004e5a:	47b0      	blx	r6
 8004e5c:	1c41      	adds	r1, r0, #1
 8004e5e:	d1c7      	bne.n	8004df0 <__sflush_r+0x34>
 8004e60:	682b      	ldr	r3, [r5, #0]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d0c4      	beq.n	8004df0 <__sflush_r+0x34>
 8004e66:	2b1d      	cmp	r3, #29
 8004e68:	d001      	beq.n	8004e6e <__sflush_r+0xb2>
 8004e6a:	2b16      	cmp	r3, #22
 8004e6c:	d101      	bne.n	8004e72 <__sflush_r+0xb6>
 8004e6e:	602f      	str	r7, [r5, #0]
 8004e70:	e7b1      	b.n	8004dd6 <__sflush_r+0x1a>
 8004e72:	89a3      	ldrh	r3, [r4, #12]
 8004e74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e78:	81a3      	strh	r3, [r4, #12]
 8004e7a:	e7ad      	b.n	8004dd8 <__sflush_r+0x1c>
 8004e7c:	690f      	ldr	r7, [r1, #16]
 8004e7e:	2f00      	cmp	r7, #0
 8004e80:	d0a9      	beq.n	8004dd6 <__sflush_r+0x1a>
 8004e82:	0793      	lsls	r3, r2, #30
 8004e84:	680e      	ldr	r6, [r1, #0]
 8004e86:	bf08      	it	eq
 8004e88:	694b      	ldreq	r3, [r1, #20]
 8004e8a:	600f      	str	r7, [r1, #0]
 8004e8c:	bf18      	it	ne
 8004e8e:	2300      	movne	r3, #0
 8004e90:	eba6 0807 	sub.w	r8, r6, r7
 8004e94:	608b      	str	r3, [r1, #8]
 8004e96:	f1b8 0f00 	cmp.w	r8, #0
 8004e9a:	dd9c      	ble.n	8004dd6 <__sflush_r+0x1a>
 8004e9c:	6a21      	ldr	r1, [r4, #32]
 8004e9e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004ea0:	4643      	mov	r3, r8
 8004ea2:	463a      	mov	r2, r7
 8004ea4:	4628      	mov	r0, r5
 8004ea6:	47b0      	blx	r6
 8004ea8:	2800      	cmp	r0, #0
 8004eaa:	dc06      	bgt.n	8004eba <__sflush_r+0xfe>
 8004eac:	89a3      	ldrh	r3, [r4, #12]
 8004eae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004eb2:	81a3      	strh	r3, [r4, #12]
 8004eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8004eb8:	e78e      	b.n	8004dd8 <__sflush_r+0x1c>
 8004eba:	4407      	add	r7, r0
 8004ebc:	eba8 0800 	sub.w	r8, r8, r0
 8004ec0:	e7e9      	b.n	8004e96 <__sflush_r+0xda>
 8004ec2:	bf00      	nop
 8004ec4:	20400001 	.word	0x20400001

08004ec8 <_fflush_r>:
 8004ec8:	b538      	push	{r3, r4, r5, lr}
 8004eca:	690b      	ldr	r3, [r1, #16]
 8004ecc:	4605      	mov	r5, r0
 8004ece:	460c      	mov	r4, r1
 8004ed0:	b913      	cbnz	r3, 8004ed8 <_fflush_r+0x10>
 8004ed2:	2500      	movs	r5, #0
 8004ed4:	4628      	mov	r0, r5
 8004ed6:	bd38      	pop	{r3, r4, r5, pc}
 8004ed8:	b118      	cbz	r0, 8004ee2 <_fflush_r+0x1a>
 8004eda:	6983      	ldr	r3, [r0, #24]
 8004edc:	b90b      	cbnz	r3, 8004ee2 <_fflush_r+0x1a>
 8004ede:	f000 f887 	bl	8004ff0 <__sinit>
 8004ee2:	4b14      	ldr	r3, [pc, #80]	; (8004f34 <_fflush_r+0x6c>)
 8004ee4:	429c      	cmp	r4, r3
 8004ee6:	d11b      	bne.n	8004f20 <_fflush_r+0x58>
 8004ee8:	686c      	ldr	r4, [r5, #4]
 8004eea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d0ef      	beq.n	8004ed2 <_fflush_r+0xa>
 8004ef2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004ef4:	07d0      	lsls	r0, r2, #31
 8004ef6:	d404      	bmi.n	8004f02 <_fflush_r+0x3a>
 8004ef8:	0599      	lsls	r1, r3, #22
 8004efa:	d402      	bmi.n	8004f02 <_fflush_r+0x3a>
 8004efc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004efe:	f000 f915 	bl	800512c <__retarget_lock_acquire_recursive>
 8004f02:	4628      	mov	r0, r5
 8004f04:	4621      	mov	r1, r4
 8004f06:	f7ff ff59 	bl	8004dbc <__sflush_r>
 8004f0a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004f0c:	07da      	lsls	r2, r3, #31
 8004f0e:	4605      	mov	r5, r0
 8004f10:	d4e0      	bmi.n	8004ed4 <_fflush_r+0xc>
 8004f12:	89a3      	ldrh	r3, [r4, #12]
 8004f14:	059b      	lsls	r3, r3, #22
 8004f16:	d4dd      	bmi.n	8004ed4 <_fflush_r+0xc>
 8004f18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004f1a:	f000 f908 	bl	800512e <__retarget_lock_release_recursive>
 8004f1e:	e7d9      	b.n	8004ed4 <_fflush_r+0xc>
 8004f20:	4b05      	ldr	r3, [pc, #20]	; (8004f38 <_fflush_r+0x70>)
 8004f22:	429c      	cmp	r4, r3
 8004f24:	d101      	bne.n	8004f2a <_fflush_r+0x62>
 8004f26:	68ac      	ldr	r4, [r5, #8]
 8004f28:	e7df      	b.n	8004eea <_fflush_r+0x22>
 8004f2a:	4b04      	ldr	r3, [pc, #16]	; (8004f3c <_fflush_r+0x74>)
 8004f2c:	429c      	cmp	r4, r3
 8004f2e:	bf08      	it	eq
 8004f30:	68ec      	ldreq	r4, [r5, #12]
 8004f32:	e7da      	b.n	8004eea <_fflush_r+0x22>
 8004f34:	08006d80 	.word	0x08006d80
 8004f38:	08006da0 	.word	0x08006da0
 8004f3c:	08006d60 	.word	0x08006d60

08004f40 <std>:
 8004f40:	2300      	movs	r3, #0
 8004f42:	b510      	push	{r4, lr}
 8004f44:	4604      	mov	r4, r0
 8004f46:	e9c0 3300 	strd	r3, r3, [r0]
 8004f4a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004f4e:	6083      	str	r3, [r0, #8]
 8004f50:	8181      	strh	r1, [r0, #12]
 8004f52:	6643      	str	r3, [r0, #100]	; 0x64
 8004f54:	81c2      	strh	r2, [r0, #14]
 8004f56:	6183      	str	r3, [r0, #24]
 8004f58:	4619      	mov	r1, r3
 8004f5a:	2208      	movs	r2, #8
 8004f5c:	305c      	adds	r0, #92	; 0x5c
 8004f5e:	f7ff fdd7 	bl	8004b10 <memset>
 8004f62:	4b05      	ldr	r3, [pc, #20]	; (8004f78 <std+0x38>)
 8004f64:	6263      	str	r3, [r4, #36]	; 0x24
 8004f66:	4b05      	ldr	r3, [pc, #20]	; (8004f7c <std+0x3c>)
 8004f68:	62a3      	str	r3, [r4, #40]	; 0x28
 8004f6a:	4b05      	ldr	r3, [pc, #20]	; (8004f80 <std+0x40>)
 8004f6c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004f6e:	4b05      	ldr	r3, [pc, #20]	; (8004f84 <std+0x44>)
 8004f70:	6224      	str	r4, [r4, #32]
 8004f72:	6323      	str	r3, [r4, #48]	; 0x30
 8004f74:	bd10      	pop	{r4, pc}
 8004f76:	bf00      	nop
 8004f78:	080059b9 	.word	0x080059b9
 8004f7c:	080059db 	.word	0x080059db
 8004f80:	08005a13 	.word	0x08005a13
 8004f84:	08005a37 	.word	0x08005a37

08004f88 <_cleanup_r>:
 8004f88:	4901      	ldr	r1, [pc, #4]	; (8004f90 <_cleanup_r+0x8>)
 8004f8a:	f000 b8af 	b.w	80050ec <_fwalk_reent>
 8004f8e:	bf00      	nop
 8004f90:	08004ec9 	.word	0x08004ec9

08004f94 <__sfmoreglue>:
 8004f94:	b570      	push	{r4, r5, r6, lr}
 8004f96:	2268      	movs	r2, #104	; 0x68
 8004f98:	1e4d      	subs	r5, r1, #1
 8004f9a:	4355      	muls	r5, r2
 8004f9c:	460e      	mov	r6, r1
 8004f9e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004fa2:	f000 f997 	bl	80052d4 <_malloc_r>
 8004fa6:	4604      	mov	r4, r0
 8004fa8:	b140      	cbz	r0, 8004fbc <__sfmoreglue+0x28>
 8004faa:	2100      	movs	r1, #0
 8004fac:	e9c0 1600 	strd	r1, r6, [r0]
 8004fb0:	300c      	adds	r0, #12
 8004fb2:	60a0      	str	r0, [r4, #8]
 8004fb4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004fb8:	f7ff fdaa 	bl	8004b10 <memset>
 8004fbc:	4620      	mov	r0, r4
 8004fbe:	bd70      	pop	{r4, r5, r6, pc}

08004fc0 <__sfp_lock_acquire>:
 8004fc0:	4801      	ldr	r0, [pc, #4]	; (8004fc8 <__sfp_lock_acquire+0x8>)
 8004fc2:	f000 b8b3 	b.w	800512c <__retarget_lock_acquire_recursive>
 8004fc6:	bf00      	nop
 8004fc8:	20000109 	.word	0x20000109

08004fcc <__sfp_lock_release>:
 8004fcc:	4801      	ldr	r0, [pc, #4]	; (8004fd4 <__sfp_lock_release+0x8>)
 8004fce:	f000 b8ae 	b.w	800512e <__retarget_lock_release_recursive>
 8004fd2:	bf00      	nop
 8004fd4:	20000109 	.word	0x20000109

08004fd8 <__sinit_lock_acquire>:
 8004fd8:	4801      	ldr	r0, [pc, #4]	; (8004fe0 <__sinit_lock_acquire+0x8>)
 8004fda:	f000 b8a7 	b.w	800512c <__retarget_lock_acquire_recursive>
 8004fde:	bf00      	nop
 8004fe0:	2000010a 	.word	0x2000010a

08004fe4 <__sinit_lock_release>:
 8004fe4:	4801      	ldr	r0, [pc, #4]	; (8004fec <__sinit_lock_release+0x8>)
 8004fe6:	f000 b8a2 	b.w	800512e <__retarget_lock_release_recursive>
 8004fea:	bf00      	nop
 8004fec:	2000010a 	.word	0x2000010a

08004ff0 <__sinit>:
 8004ff0:	b510      	push	{r4, lr}
 8004ff2:	4604      	mov	r4, r0
 8004ff4:	f7ff fff0 	bl	8004fd8 <__sinit_lock_acquire>
 8004ff8:	69a3      	ldr	r3, [r4, #24]
 8004ffa:	b11b      	cbz	r3, 8005004 <__sinit+0x14>
 8004ffc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005000:	f7ff bff0 	b.w	8004fe4 <__sinit_lock_release>
 8005004:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005008:	6523      	str	r3, [r4, #80]	; 0x50
 800500a:	4b13      	ldr	r3, [pc, #76]	; (8005058 <__sinit+0x68>)
 800500c:	4a13      	ldr	r2, [pc, #76]	; (800505c <__sinit+0x6c>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	62a2      	str	r2, [r4, #40]	; 0x28
 8005012:	42a3      	cmp	r3, r4
 8005014:	bf04      	itt	eq
 8005016:	2301      	moveq	r3, #1
 8005018:	61a3      	streq	r3, [r4, #24]
 800501a:	4620      	mov	r0, r4
 800501c:	f000 f820 	bl	8005060 <__sfp>
 8005020:	6060      	str	r0, [r4, #4]
 8005022:	4620      	mov	r0, r4
 8005024:	f000 f81c 	bl	8005060 <__sfp>
 8005028:	60a0      	str	r0, [r4, #8]
 800502a:	4620      	mov	r0, r4
 800502c:	f000 f818 	bl	8005060 <__sfp>
 8005030:	2200      	movs	r2, #0
 8005032:	60e0      	str	r0, [r4, #12]
 8005034:	2104      	movs	r1, #4
 8005036:	6860      	ldr	r0, [r4, #4]
 8005038:	f7ff ff82 	bl	8004f40 <std>
 800503c:	68a0      	ldr	r0, [r4, #8]
 800503e:	2201      	movs	r2, #1
 8005040:	2109      	movs	r1, #9
 8005042:	f7ff ff7d 	bl	8004f40 <std>
 8005046:	68e0      	ldr	r0, [r4, #12]
 8005048:	2202      	movs	r2, #2
 800504a:	2112      	movs	r1, #18
 800504c:	f7ff ff78 	bl	8004f40 <std>
 8005050:	2301      	movs	r3, #1
 8005052:	61a3      	str	r3, [r4, #24]
 8005054:	e7d2      	b.n	8004ffc <__sinit+0xc>
 8005056:	bf00      	nop
 8005058:	08006d5c 	.word	0x08006d5c
 800505c:	08004f89 	.word	0x08004f89

08005060 <__sfp>:
 8005060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005062:	4607      	mov	r7, r0
 8005064:	f7ff ffac 	bl	8004fc0 <__sfp_lock_acquire>
 8005068:	4b1e      	ldr	r3, [pc, #120]	; (80050e4 <__sfp+0x84>)
 800506a:	681e      	ldr	r6, [r3, #0]
 800506c:	69b3      	ldr	r3, [r6, #24]
 800506e:	b913      	cbnz	r3, 8005076 <__sfp+0x16>
 8005070:	4630      	mov	r0, r6
 8005072:	f7ff ffbd 	bl	8004ff0 <__sinit>
 8005076:	3648      	adds	r6, #72	; 0x48
 8005078:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800507c:	3b01      	subs	r3, #1
 800507e:	d503      	bpl.n	8005088 <__sfp+0x28>
 8005080:	6833      	ldr	r3, [r6, #0]
 8005082:	b30b      	cbz	r3, 80050c8 <__sfp+0x68>
 8005084:	6836      	ldr	r6, [r6, #0]
 8005086:	e7f7      	b.n	8005078 <__sfp+0x18>
 8005088:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800508c:	b9d5      	cbnz	r5, 80050c4 <__sfp+0x64>
 800508e:	4b16      	ldr	r3, [pc, #88]	; (80050e8 <__sfp+0x88>)
 8005090:	60e3      	str	r3, [r4, #12]
 8005092:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005096:	6665      	str	r5, [r4, #100]	; 0x64
 8005098:	f000 f847 	bl	800512a <__retarget_lock_init_recursive>
 800509c:	f7ff ff96 	bl	8004fcc <__sfp_lock_release>
 80050a0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80050a4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80050a8:	6025      	str	r5, [r4, #0]
 80050aa:	61a5      	str	r5, [r4, #24]
 80050ac:	2208      	movs	r2, #8
 80050ae:	4629      	mov	r1, r5
 80050b0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80050b4:	f7ff fd2c 	bl	8004b10 <memset>
 80050b8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80050bc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80050c0:	4620      	mov	r0, r4
 80050c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80050c4:	3468      	adds	r4, #104	; 0x68
 80050c6:	e7d9      	b.n	800507c <__sfp+0x1c>
 80050c8:	2104      	movs	r1, #4
 80050ca:	4638      	mov	r0, r7
 80050cc:	f7ff ff62 	bl	8004f94 <__sfmoreglue>
 80050d0:	4604      	mov	r4, r0
 80050d2:	6030      	str	r0, [r6, #0]
 80050d4:	2800      	cmp	r0, #0
 80050d6:	d1d5      	bne.n	8005084 <__sfp+0x24>
 80050d8:	f7ff ff78 	bl	8004fcc <__sfp_lock_release>
 80050dc:	230c      	movs	r3, #12
 80050de:	603b      	str	r3, [r7, #0]
 80050e0:	e7ee      	b.n	80050c0 <__sfp+0x60>
 80050e2:	bf00      	nop
 80050e4:	08006d5c 	.word	0x08006d5c
 80050e8:	ffff0001 	.word	0xffff0001

080050ec <_fwalk_reent>:
 80050ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80050f0:	4606      	mov	r6, r0
 80050f2:	4688      	mov	r8, r1
 80050f4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80050f8:	2700      	movs	r7, #0
 80050fa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80050fe:	f1b9 0901 	subs.w	r9, r9, #1
 8005102:	d505      	bpl.n	8005110 <_fwalk_reent+0x24>
 8005104:	6824      	ldr	r4, [r4, #0]
 8005106:	2c00      	cmp	r4, #0
 8005108:	d1f7      	bne.n	80050fa <_fwalk_reent+0xe>
 800510a:	4638      	mov	r0, r7
 800510c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005110:	89ab      	ldrh	r3, [r5, #12]
 8005112:	2b01      	cmp	r3, #1
 8005114:	d907      	bls.n	8005126 <_fwalk_reent+0x3a>
 8005116:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800511a:	3301      	adds	r3, #1
 800511c:	d003      	beq.n	8005126 <_fwalk_reent+0x3a>
 800511e:	4629      	mov	r1, r5
 8005120:	4630      	mov	r0, r6
 8005122:	47c0      	blx	r8
 8005124:	4307      	orrs	r7, r0
 8005126:	3568      	adds	r5, #104	; 0x68
 8005128:	e7e9      	b.n	80050fe <_fwalk_reent+0x12>

0800512a <__retarget_lock_init_recursive>:
 800512a:	4770      	bx	lr

0800512c <__retarget_lock_acquire_recursive>:
 800512c:	4770      	bx	lr

0800512e <__retarget_lock_release_recursive>:
 800512e:	4770      	bx	lr

08005130 <__swhatbuf_r>:
 8005130:	b570      	push	{r4, r5, r6, lr}
 8005132:	460e      	mov	r6, r1
 8005134:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005138:	2900      	cmp	r1, #0
 800513a:	b096      	sub	sp, #88	; 0x58
 800513c:	4614      	mov	r4, r2
 800513e:	461d      	mov	r5, r3
 8005140:	da08      	bge.n	8005154 <__swhatbuf_r+0x24>
 8005142:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005146:	2200      	movs	r2, #0
 8005148:	602a      	str	r2, [r5, #0]
 800514a:	061a      	lsls	r2, r3, #24
 800514c:	d410      	bmi.n	8005170 <__swhatbuf_r+0x40>
 800514e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005152:	e00e      	b.n	8005172 <__swhatbuf_r+0x42>
 8005154:	466a      	mov	r2, sp
 8005156:	f000 fc95 	bl	8005a84 <_fstat_r>
 800515a:	2800      	cmp	r0, #0
 800515c:	dbf1      	blt.n	8005142 <__swhatbuf_r+0x12>
 800515e:	9a01      	ldr	r2, [sp, #4]
 8005160:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005164:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005168:	425a      	negs	r2, r3
 800516a:	415a      	adcs	r2, r3
 800516c:	602a      	str	r2, [r5, #0]
 800516e:	e7ee      	b.n	800514e <__swhatbuf_r+0x1e>
 8005170:	2340      	movs	r3, #64	; 0x40
 8005172:	2000      	movs	r0, #0
 8005174:	6023      	str	r3, [r4, #0]
 8005176:	b016      	add	sp, #88	; 0x58
 8005178:	bd70      	pop	{r4, r5, r6, pc}
	...

0800517c <__smakebuf_r>:
 800517c:	898b      	ldrh	r3, [r1, #12]
 800517e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005180:	079d      	lsls	r5, r3, #30
 8005182:	4606      	mov	r6, r0
 8005184:	460c      	mov	r4, r1
 8005186:	d507      	bpl.n	8005198 <__smakebuf_r+0x1c>
 8005188:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800518c:	6023      	str	r3, [r4, #0]
 800518e:	6123      	str	r3, [r4, #16]
 8005190:	2301      	movs	r3, #1
 8005192:	6163      	str	r3, [r4, #20]
 8005194:	b002      	add	sp, #8
 8005196:	bd70      	pop	{r4, r5, r6, pc}
 8005198:	ab01      	add	r3, sp, #4
 800519a:	466a      	mov	r2, sp
 800519c:	f7ff ffc8 	bl	8005130 <__swhatbuf_r>
 80051a0:	9900      	ldr	r1, [sp, #0]
 80051a2:	4605      	mov	r5, r0
 80051a4:	4630      	mov	r0, r6
 80051a6:	f000 f895 	bl	80052d4 <_malloc_r>
 80051aa:	b948      	cbnz	r0, 80051c0 <__smakebuf_r+0x44>
 80051ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80051b0:	059a      	lsls	r2, r3, #22
 80051b2:	d4ef      	bmi.n	8005194 <__smakebuf_r+0x18>
 80051b4:	f023 0303 	bic.w	r3, r3, #3
 80051b8:	f043 0302 	orr.w	r3, r3, #2
 80051bc:	81a3      	strh	r3, [r4, #12]
 80051be:	e7e3      	b.n	8005188 <__smakebuf_r+0xc>
 80051c0:	4b0d      	ldr	r3, [pc, #52]	; (80051f8 <__smakebuf_r+0x7c>)
 80051c2:	62b3      	str	r3, [r6, #40]	; 0x28
 80051c4:	89a3      	ldrh	r3, [r4, #12]
 80051c6:	6020      	str	r0, [r4, #0]
 80051c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051cc:	81a3      	strh	r3, [r4, #12]
 80051ce:	9b00      	ldr	r3, [sp, #0]
 80051d0:	6163      	str	r3, [r4, #20]
 80051d2:	9b01      	ldr	r3, [sp, #4]
 80051d4:	6120      	str	r0, [r4, #16]
 80051d6:	b15b      	cbz	r3, 80051f0 <__smakebuf_r+0x74>
 80051d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80051dc:	4630      	mov	r0, r6
 80051de:	f000 fc63 	bl	8005aa8 <_isatty_r>
 80051e2:	b128      	cbz	r0, 80051f0 <__smakebuf_r+0x74>
 80051e4:	89a3      	ldrh	r3, [r4, #12]
 80051e6:	f023 0303 	bic.w	r3, r3, #3
 80051ea:	f043 0301 	orr.w	r3, r3, #1
 80051ee:	81a3      	strh	r3, [r4, #12]
 80051f0:	89a0      	ldrh	r0, [r4, #12]
 80051f2:	4305      	orrs	r5, r0
 80051f4:	81a5      	strh	r5, [r4, #12]
 80051f6:	e7cd      	b.n	8005194 <__smakebuf_r+0x18>
 80051f8:	08004f89 	.word	0x08004f89

080051fc <_free_r>:
 80051fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80051fe:	2900      	cmp	r1, #0
 8005200:	d044      	beq.n	800528c <_free_r+0x90>
 8005202:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005206:	9001      	str	r0, [sp, #4]
 8005208:	2b00      	cmp	r3, #0
 800520a:	f1a1 0404 	sub.w	r4, r1, #4
 800520e:	bfb8      	it	lt
 8005210:	18e4      	addlt	r4, r4, r3
 8005212:	f000 fc6b 	bl	8005aec <__malloc_lock>
 8005216:	4a1e      	ldr	r2, [pc, #120]	; (8005290 <_free_r+0x94>)
 8005218:	9801      	ldr	r0, [sp, #4]
 800521a:	6813      	ldr	r3, [r2, #0]
 800521c:	b933      	cbnz	r3, 800522c <_free_r+0x30>
 800521e:	6063      	str	r3, [r4, #4]
 8005220:	6014      	str	r4, [r2, #0]
 8005222:	b003      	add	sp, #12
 8005224:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005228:	f000 bc66 	b.w	8005af8 <__malloc_unlock>
 800522c:	42a3      	cmp	r3, r4
 800522e:	d908      	bls.n	8005242 <_free_r+0x46>
 8005230:	6825      	ldr	r5, [r4, #0]
 8005232:	1961      	adds	r1, r4, r5
 8005234:	428b      	cmp	r3, r1
 8005236:	bf01      	itttt	eq
 8005238:	6819      	ldreq	r1, [r3, #0]
 800523a:	685b      	ldreq	r3, [r3, #4]
 800523c:	1949      	addeq	r1, r1, r5
 800523e:	6021      	streq	r1, [r4, #0]
 8005240:	e7ed      	b.n	800521e <_free_r+0x22>
 8005242:	461a      	mov	r2, r3
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	b10b      	cbz	r3, 800524c <_free_r+0x50>
 8005248:	42a3      	cmp	r3, r4
 800524a:	d9fa      	bls.n	8005242 <_free_r+0x46>
 800524c:	6811      	ldr	r1, [r2, #0]
 800524e:	1855      	adds	r5, r2, r1
 8005250:	42a5      	cmp	r5, r4
 8005252:	d10b      	bne.n	800526c <_free_r+0x70>
 8005254:	6824      	ldr	r4, [r4, #0]
 8005256:	4421      	add	r1, r4
 8005258:	1854      	adds	r4, r2, r1
 800525a:	42a3      	cmp	r3, r4
 800525c:	6011      	str	r1, [r2, #0]
 800525e:	d1e0      	bne.n	8005222 <_free_r+0x26>
 8005260:	681c      	ldr	r4, [r3, #0]
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	6053      	str	r3, [r2, #4]
 8005266:	4421      	add	r1, r4
 8005268:	6011      	str	r1, [r2, #0]
 800526a:	e7da      	b.n	8005222 <_free_r+0x26>
 800526c:	d902      	bls.n	8005274 <_free_r+0x78>
 800526e:	230c      	movs	r3, #12
 8005270:	6003      	str	r3, [r0, #0]
 8005272:	e7d6      	b.n	8005222 <_free_r+0x26>
 8005274:	6825      	ldr	r5, [r4, #0]
 8005276:	1961      	adds	r1, r4, r5
 8005278:	428b      	cmp	r3, r1
 800527a:	bf04      	itt	eq
 800527c:	6819      	ldreq	r1, [r3, #0]
 800527e:	685b      	ldreq	r3, [r3, #4]
 8005280:	6063      	str	r3, [r4, #4]
 8005282:	bf04      	itt	eq
 8005284:	1949      	addeq	r1, r1, r5
 8005286:	6021      	streq	r1, [r4, #0]
 8005288:	6054      	str	r4, [r2, #4]
 800528a:	e7ca      	b.n	8005222 <_free_r+0x26>
 800528c:	b003      	add	sp, #12
 800528e:	bd30      	pop	{r4, r5, pc}
 8005290:	2000010c 	.word	0x2000010c

08005294 <sbrk_aligned>:
 8005294:	b570      	push	{r4, r5, r6, lr}
 8005296:	4e0e      	ldr	r6, [pc, #56]	; (80052d0 <sbrk_aligned+0x3c>)
 8005298:	460c      	mov	r4, r1
 800529a:	6831      	ldr	r1, [r6, #0]
 800529c:	4605      	mov	r5, r0
 800529e:	b911      	cbnz	r1, 80052a6 <sbrk_aligned+0x12>
 80052a0:	f000 fb7a 	bl	8005998 <_sbrk_r>
 80052a4:	6030      	str	r0, [r6, #0]
 80052a6:	4621      	mov	r1, r4
 80052a8:	4628      	mov	r0, r5
 80052aa:	f000 fb75 	bl	8005998 <_sbrk_r>
 80052ae:	1c43      	adds	r3, r0, #1
 80052b0:	d00a      	beq.n	80052c8 <sbrk_aligned+0x34>
 80052b2:	1cc4      	adds	r4, r0, #3
 80052b4:	f024 0403 	bic.w	r4, r4, #3
 80052b8:	42a0      	cmp	r0, r4
 80052ba:	d007      	beq.n	80052cc <sbrk_aligned+0x38>
 80052bc:	1a21      	subs	r1, r4, r0
 80052be:	4628      	mov	r0, r5
 80052c0:	f000 fb6a 	bl	8005998 <_sbrk_r>
 80052c4:	3001      	adds	r0, #1
 80052c6:	d101      	bne.n	80052cc <sbrk_aligned+0x38>
 80052c8:	f04f 34ff 	mov.w	r4, #4294967295
 80052cc:	4620      	mov	r0, r4
 80052ce:	bd70      	pop	{r4, r5, r6, pc}
 80052d0:	20000110 	.word	0x20000110

080052d4 <_malloc_r>:
 80052d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052d8:	1ccd      	adds	r5, r1, #3
 80052da:	f025 0503 	bic.w	r5, r5, #3
 80052de:	3508      	adds	r5, #8
 80052e0:	2d0c      	cmp	r5, #12
 80052e2:	bf38      	it	cc
 80052e4:	250c      	movcc	r5, #12
 80052e6:	2d00      	cmp	r5, #0
 80052e8:	4607      	mov	r7, r0
 80052ea:	db01      	blt.n	80052f0 <_malloc_r+0x1c>
 80052ec:	42a9      	cmp	r1, r5
 80052ee:	d905      	bls.n	80052fc <_malloc_r+0x28>
 80052f0:	230c      	movs	r3, #12
 80052f2:	603b      	str	r3, [r7, #0]
 80052f4:	2600      	movs	r6, #0
 80052f6:	4630      	mov	r0, r6
 80052f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80052fc:	4e2e      	ldr	r6, [pc, #184]	; (80053b8 <_malloc_r+0xe4>)
 80052fe:	f000 fbf5 	bl	8005aec <__malloc_lock>
 8005302:	6833      	ldr	r3, [r6, #0]
 8005304:	461c      	mov	r4, r3
 8005306:	bb34      	cbnz	r4, 8005356 <_malloc_r+0x82>
 8005308:	4629      	mov	r1, r5
 800530a:	4638      	mov	r0, r7
 800530c:	f7ff ffc2 	bl	8005294 <sbrk_aligned>
 8005310:	1c43      	adds	r3, r0, #1
 8005312:	4604      	mov	r4, r0
 8005314:	d14d      	bne.n	80053b2 <_malloc_r+0xde>
 8005316:	6834      	ldr	r4, [r6, #0]
 8005318:	4626      	mov	r6, r4
 800531a:	2e00      	cmp	r6, #0
 800531c:	d140      	bne.n	80053a0 <_malloc_r+0xcc>
 800531e:	6823      	ldr	r3, [r4, #0]
 8005320:	4631      	mov	r1, r6
 8005322:	4638      	mov	r0, r7
 8005324:	eb04 0803 	add.w	r8, r4, r3
 8005328:	f000 fb36 	bl	8005998 <_sbrk_r>
 800532c:	4580      	cmp	r8, r0
 800532e:	d13a      	bne.n	80053a6 <_malloc_r+0xd2>
 8005330:	6821      	ldr	r1, [r4, #0]
 8005332:	3503      	adds	r5, #3
 8005334:	1a6d      	subs	r5, r5, r1
 8005336:	f025 0503 	bic.w	r5, r5, #3
 800533a:	3508      	adds	r5, #8
 800533c:	2d0c      	cmp	r5, #12
 800533e:	bf38      	it	cc
 8005340:	250c      	movcc	r5, #12
 8005342:	4629      	mov	r1, r5
 8005344:	4638      	mov	r0, r7
 8005346:	f7ff ffa5 	bl	8005294 <sbrk_aligned>
 800534a:	3001      	adds	r0, #1
 800534c:	d02b      	beq.n	80053a6 <_malloc_r+0xd2>
 800534e:	6823      	ldr	r3, [r4, #0]
 8005350:	442b      	add	r3, r5
 8005352:	6023      	str	r3, [r4, #0]
 8005354:	e00e      	b.n	8005374 <_malloc_r+0xa0>
 8005356:	6822      	ldr	r2, [r4, #0]
 8005358:	1b52      	subs	r2, r2, r5
 800535a:	d41e      	bmi.n	800539a <_malloc_r+0xc6>
 800535c:	2a0b      	cmp	r2, #11
 800535e:	d916      	bls.n	800538e <_malloc_r+0xba>
 8005360:	1961      	adds	r1, r4, r5
 8005362:	42a3      	cmp	r3, r4
 8005364:	6025      	str	r5, [r4, #0]
 8005366:	bf18      	it	ne
 8005368:	6059      	strne	r1, [r3, #4]
 800536a:	6863      	ldr	r3, [r4, #4]
 800536c:	bf08      	it	eq
 800536e:	6031      	streq	r1, [r6, #0]
 8005370:	5162      	str	r2, [r4, r5]
 8005372:	604b      	str	r3, [r1, #4]
 8005374:	4638      	mov	r0, r7
 8005376:	f104 060b 	add.w	r6, r4, #11
 800537a:	f000 fbbd 	bl	8005af8 <__malloc_unlock>
 800537e:	f026 0607 	bic.w	r6, r6, #7
 8005382:	1d23      	adds	r3, r4, #4
 8005384:	1af2      	subs	r2, r6, r3
 8005386:	d0b6      	beq.n	80052f6 <_malloc_r+0x22>
 8005388:	1b9b      	subs	r3, r3, r6
 800538a:	50a3      	str	r3, [r4, r2]
 800538c:	e7b3      	b.n	80052f6 <_malloc_r+0x22>
 800538e:	6862      	ldr	r2, [r4, #4]
 8005390:	42a3      	cmp	r3, r4
 8005392:	bf0c      	ite	eq
 8005394:	6032      	streq	r2, [r6, #0]
 8005396:	605a      	strne	r2, [r3, #4]
 8005398:	e7ec      	b.n	8005374 <_malloc_r+0xa0>
 800539a:	4623      	mov	r3, r4
 800539c:	6864      	ldr	r4, [r4, #4]
 800539e:	e7b2      	b.n	8005306 <_malloc_r+0x32>
 80053a0:	4634      	mov	r4, r6
 80053a2:	6876      	ldr	r6, [r6, #4]
 80053a4:	e7b9      	b.n	800531a <_malloc_r+0x46>
 80053a6:	230c      	movs	r3, #12
 80053a8:	603b      	str	r3, [r7, #0]
 80053aa:	4638      	mov	r0, r7
 80053ac:	f000 fba4 	bl	8005af8 <__malloc_unlock>
 80053b0:	e7a1      	b.n	80052f6 <_malloc_r+0x22>
 80053b2:	6025      	str	r5, [r4, #0]
 80053b4:	e7de      	b.n	8005374 <_malloc_r+0xa0>
 80053b6:	bf00      	nop
 80053b8:	2000010c 	.word	0x2000010c

080053bc <__sfputc_r>:
 80053bc:	6893      	ldr	r3, [r2, #8]
 80053be:	3b01      	subs	r3, #1
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	b410      	push	{r4}
 80053c4:	6093      	str	r3, [r2, #8]
 80053c6:	da08      	bge.n	80053da <__sfputc_r+0x1e>
 80053c8:	6994      	ldr	r4, [r2, #24]
 80053ca:	42a3      	cmp	r3, r4
 80053cc:	db01      	blt.n	80053d2 <__sfputc_r+0x16>
 80053ce:	290a      	cmp	r1, #10
 80053d0:	d103      	bne.n	80053da <__sfputc_r+0x1e>
 80053d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80053d6:	f7ff bc31 	b.w	8004c3c <__swbuf_r>
 80053da:	6813      	ldr	r3, [r2, #0]
 80053dc:	1c58      	adds	r0, r3, #1
 80053de:	6010      	str	r0, [r2, #0]
 80053e0:	7019      	strb	r1, [r3, #0]
 80053e2:	4608      	mov	r0, r1
 80053e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80053e8:	4770      	bx	lr

080053ea <__sfputs_r>:
 80053ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053ec:	4606      	mov	r6, r0
 80053ee:	460f      	mov	r7, r1
 80053f0:	4614      	mov	r4, r2
 80053f2:	18d5      	adds	r5, r2, r3
 80053f4:	42ac      	cmp	r4, r5
 80053f6:	d101      	bne.n	80053fc <__sfputs_r+0x12>
 80053f8:	2000      	movs	r0, #0
 80053fa:	e007      	b.n	800540c <__sfputs_r+0x22>
 80053fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005400:	463a      	mov	r2, r7
 8005402:	4630      	mov	r0, r6
 8005404:	f7ff ffda 	bl	80053bc <__sfputc_r>
 8005408:	1c43      	adds	r3, r0, #1
 800540a:	d1f3      	bne.n	80053f4 <__sfputs_r+0xa>
 800540c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005410 <_vfiprintf_r>:
 8005410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005414:	460d      	mov	r5, r1
 8005416:	b09d      	sub	sp, #116	; 0x74
 8005418:	4614      	mov	r4, r2
 800541a:	4698      	mov	r8, r3
 800541c:	4606      	mov	r6, r0
 800541e:	b118      	cbz	r0, 8005428 <_vfiprintf_r+0x18>
 8005420:	6983      	ldr	r3, [r0, #24]
 8005422:	b90b      	cbnz	r3, 8005428 <_vfiprintf_r+0x18>
 8005424:	f7ff fde4 	bl	8004ff0 <__sinit>
 8005428:	4b89      	ldr	r3, [pc, #548]	; (8005650 <_vfiprintf_r+0x240>)
 800542a:	429d      	cmp	r5, r3
 800542c:	d11b      	bne.n	8005466 <_vfiprintf_r+0x56>
 800542e:	6875      	ldr	r5, [r6, #4]
 8005430:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005432:	07d9      	lsls	r1, r3, #31
 8005434:	d405      	bmi.n	8005442 <_vfiprintf_r+0x32>
 8005436:	89ab      	ldrh	r3, [r5, #12]
 8005438:	059a      	lsls	r2, r3, #22
 800543a:	d402      	bmi.n	8005442 <_vfiprintf_r+0x32>
 800543c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800543e:	f7ff fe75 	bl	800512c <__retarget_lock_acquire_recursive>
 8005442:	89ab      	ldrh	r3, [r5, #12]
 8005444:	071b      	lsls	r3, r3, #28
 8005446:	d501      	bpl.n	800544c <_vfiprintf_r+0x3c>
 8005448:	692b      	ldr	r3, [r5, #16]
 800544a:	b9eb      	cbnz	r3, 8005488 <_vfiprintf_r+0x78>
 800544c:	4629      	mov	r1, r5
 800544e:	4630      	mov	r0, r6
 8005450:	f7ff fc46 	bl	8004ce0 <__swsetup_r>
 8005454:	b1c0      	cbz	r0, 8005488 <_vfiprintf_r+0x78>
 8005456:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005458:	07dc      	lsls	r4, r3, #31
 800545a:	d50e      	bpl.n	800547a <_vfiprintf_r+0x6a>
 800545c:	f04f 30ff 	mov.w	r0, #4294967295
 8005460:	b01d      	add	sp, #116	; 0x74
 8005462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005466:	4b7b      	ldr	r3, [pc, #492]	; (8005654 <_vfiprintf_r+0x244>)
 8005468:	429d      	cmp	r5, r3
 800546a:	d101      	bne.n	8005470 <_vfiprintf_r+0x60>
 800546c:	68b5      	ldr	r5, [r6, #8]
 800546e:	e7df      	b.n	8005430 <_vfiprintf_r+0x20>
 8005470:	4b79      	ldr	r3, [pc, #484]	; (8005658 <_vfiprintf_r+0x248>)
 8005472:	429d      	cmp	r5, r3
 8005474:	bf08      	it	eq
 8005476:	68f5      	ldreq	r5, [r6, #12]
 8005478:	e7da      	b.n	8005430 <_vfiprintf_r+0x20>
 800547a:	89ab      	ldrh	r3, [r5, #12]
 800547c:	0598      	lsls	r0, r3, #22
 800547e:	d4ed      	bmi.n	800545c <_vfiprintf_r+0x4c>
 8005480:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005482:	f7ff fe54 	bl	800512e <__retarget_lock_release_recursive>
 8005486:	e7e9      	b.n	800545c <_vfiprintf_r+0x4c>
 8005488:	2300      	movs	r3, #0
 800548a:	9309      	str	r3, [sp, #36]	; 0x24
 800548c:	2320      	movs	r3, #32
 800548e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005492:	f8cd 800c 	str.w	r8, [sp, #12]
 8005496:	2330      	movs	r3, #48	; 0x30
 8005498:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800565c <_vfiprintf_r+0x24c>
 800549c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80054a0:	f04f 0901 	mov.w	r9, #1
 80054a4:	4623      	mov	r3, r4
 80054a6:	469a      	mov	sl, r3
 80054a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80054ac:	b10a      	cbz	r2, 80054b2 <_vfiprintf_r+0xa2>
 80054ae:	2a25      	cmp	r2, #37	; 0x25
 80054b0:	d1f9      	bne.n	80054a6 <_vfiprintf_r+0x96>
 80054b2:	ebba 0b04 	subs.w	fp, sl, r4
 80054b6:	d00b      	beq.n	80054d0 <_vfiprintf_r+0xc0>
 80054b8:	465b      	mov	r3, fp
 80054ba:	4622      	mov	r2, r4
 80054bc:	4629      	mov	r1, r5
 80054be:	4630      	mov	r0, r6
 80054c0:	f7ff ff93 	bl	80053ea <__sfputs_r>
 80054c4:	3001      	adds	r0, #1
 80054c6:	f000 80aa 	beq.w	800561e <_vfiprintf_r+0x20e>
 80054ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80054cc:	445a      	add	r2, fp
 80054ce:	9209      	str	r2, [sp, #36]	; 0x24
 80054d0:	f89a 3000 	ldrb.w	r3, [sl]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	f000 80a2 	beq.w	800561e <_vfiprintf_r+0x20e>
 80054da:	2300      	movs	r3, #0
 80054dc:	f04f 32ff 	mov.w	r2, #4294967295
 80054e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80054e4:	f10a 0a01 	add.w	sl, sl, #1
 80054e8:	9304      	str	r3, [sp, #16]
 80054ea:	9307      	str	r3, [sp, #28]
 80054ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80054f0:	931a      	str	r3, [sp, #104]	; 0x68
 80054f2:	4654      	mov	r4, sl
 80054f4:	2205      	movs	r2, #5
 80054f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80054fa:	4858      	ldr	r0, [pc, #352]	; (800565c <_vfiprintf_r+0x24c>)
 80054fc:	f7fa fe70 	bl	80001e0 <memchr>
 8005500:	9a04      	ldr	r2, [sp, #16]
 8005502:	b9d8      	cbnz	r0, 800553c <_vfiprintf_r+0x12c>
 8005504:	06d1      	lsls	r1, r2, #27
 8005506:	bf44      	itt	mi
 8005508:	2320      	movmi	r3, #32
 800550a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800550e:	0713      	lsls	r3, r2, #28
 8005510:	bf44      	itt	mi
 8005512:	232b      	movmi	r3, #43	; 0x2b
 8005514:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005518:	f89a 3000 	ldrb.w	r3, [sl]
 800551c:	2b2a      	cmp	r3, #42	; 0x2a
 800551e:	d015      	beq.n	800554c <_vfiprintf_r+0x13c>
 8005520:	9a07      	ldr	r2, [sp, #28]
 8005522:	4654      	mov	r4, sl
 8005524:	2000      	movs	r0, #0
 8005526:	f04f 0c0a 	mov.w	ip, #10
 800552a:	4621      	mov	r1, r4
 800552c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005530:	3b30      	subs	r3, #48	; 0x30
 8005532:	2b09      	cmp	r3, #9
 8005534:	d94e      	bls.n	80055d4 <_vfiprintf_r+0x1c4>
 8005536:	b1b0      	cbz	r0, 8005566 <_vfiprintf_r+0x156>
 8005538:	9207      	str	r2, [sp, #28]
 800553a:	e014      	b.n	8005566 <_vfiprintf_r+0x156>
 800553c:	eba0 0308 	sub.w	r3, r0, r8
 8005540:	fa09 f303 	lsl.w	r3, r9, r3
 8005544:	4313      	orrs	r3, r2
 8005546:	9304      	str	r3, [sp, #16]
 8005548:	46a2      	mov	sl, r4
 800554a:	e7d2      	b.n	80054f2 <_vfiprintf_r+0xe2>
 800554c:	9b03      	ldr	r3, [sp, #12]
 800554e:	1d19      	adds	r1, r3, #4
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	9103      	str	r1, [sp, #12]
 8005554:	2b00      	cmp	r3, #0
 8005556:	bfbb      	ittet	lt
 8005558:	425b      	neglt	r3, r3
 800555a:	f042 0202 	orrlt.w	r2, r2, #2
 800555e:	9307      	strge	r3, [sp, #28]
 8005560:	9307      	strlt	r3, [sp, #28]
 8005562:	bfb8      	it	lt
 8005564:	9204      	strlt	r2, [sp, #16]
 8005566:	7823      	ldrb	r3, [r4, #0]
 8005568:	2b2e      	cmp	r3, #46	; 0x2e
 800556a:	d10c      	bne.n	8005586 <_vfiprintf_r+0x176>
 800556c:	7863      	ldrb	r3, [r4, #1]
 800556e:	2b2a      	cmp	r3, #42	; 0x2a
 8005570:	d135      	bne.n	80055de <_vfiprintf_r+0x1ce>
 8005572:	9b03      	ldr	r3, [sp, #12]
 8005574:	1d1a      	adds	r2, r3, #4
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	9203      	str	r2, [sp, #12]
 800557a:	2b00      	cmp	r3, #0
 800557c:	bfb8      	it	lt
 800557e:	f04f 33ff 	movlt.w	r3, #4294967295
 8005582:	3402      	adds	r4, #2
 8005584:	9305      	str	r3, [sp, #20]
 8005586:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800566c <_vfiprintf_r+0x25c>
 800558a:	7821      	ldrb	r1, [r4, #0]
 800558c:	2203      	movs	r2, #3
 800558e:	4650      	mov	r0, sl
 8005590:	f7fa fe26 	bl	80001e0 <memchr>
 8005594:	b140      	cbz	r0, 80055a8 <_vfiprintf_r+0x198>
 8005596:	2340      	movs	r3, #64	; 0x40
 8005598:	eba0 000a 	sub.w	r0, r0, sl
 800559c:	fa03 f000 	lsl.w	r0, r3, r0
 80055a0:	9b04      	ldr	r3, [sp, #16]
 80055a2:	4303      	orrs	r3, r0
 80055a4:	3401      	adds	r4, #1
 80055a6:	9304      	str	r3, [sp, #16]
 80055a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055ac:	482c      	ldr	r0, [pc, #176]	; (8005660 <_vfiprintf_r+0x250>)
 80055ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80055b2:	2206      	movs	r2, #6
 80055b4:	f7fa fe14 	bl	80001e0 <memchr>
 80055b8:	2800      	cmp	r0, #0
 80055ba:	d03f      	beq.n	800563c <_vfiprintf_r+0x22c>
 80055bc:	4b29      	ldr	r3, [pc, #164]	; (8005664 <_vfiprintf_r+0x254>)
 80055be:	bb1b      	cbnz	r3, 8005608 <_vfiprintf_r+0x1f8>
 80055c0:	9b03      	ldr	r3, [sp, #12]
 80055c2:	3307      	adds	r3, #7
 80055c4:	f023 0307 	bic.w	r3, r3, #7
 80055c8:	3308      	adds	r3, #8
 80055ca:	9303      	str	r3, [sp, #12]
 80055cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055ce:	443b      	add	r3, r7
 80055d0:	9309      	str	r3, [sp, #36]	; 0x24
 80055d2:	e767      	b.n	80054a4 <_vfiprintf_r+0x94>
 80055d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80055d8:	460c      	mov	r4, r1
 80055da:	2001      	movs	r0, #1
 80055dc:	e7a5      	b.n	800552a <_vfiprintf_r+0x11a>
 80055de:	2300      	movs	r3, #0
 80055e0:	3401      	adds	r4, #1
 80055e2:	9305      	str	r3, [sp, #20]
 80055e4:	4619      	mov	r1, r3
 80055e6:	f04f 0c0a 	mov.w	ip, #10
 80055ea:	4620      	mov	r0, r4
 80055ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80055f0:	3a30      	subs	r2, #48	; 0x30
 80055f2:	2a09      	cmp	r2, #9
 80055f4:	d903      	bls.n	80055fe <_vfiprintf_r+0x1ee>
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d0c5      	beq.n	8005586 <_vfiprintf_r+0x176>
 80055fa:	9105      	str	r1, [sp, #20]
 80055fc:	e7c3      	b.n	8005586 <_vfiprintf_r+0x176>
 80055fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8005602:	4604      	mov	r4, r0
 8005604:	2301      	movs	r3, #1
 8005606:	e7f0      	b.n	80055ea <_vfiprintf_r+0x1da>
 8005608:	ab03      	add	r3, sp, #12
 800560a:	9300      	str	r3, [sp, #0]
 800560c:	462a      	mov	r2, r5
 800560e:	4b16      	ldr	r3, [pc, #88]	; (8005668 <_vfiprintf_r+0x258>)
 8005610:	a904      	add	r1, sp, #16
 8005612:	4630      	mov	r0, r6
 8005614:	f3af 8000 	nop.w
 8005618:	4607      	mov	r7, r0
 800561a:	1c78      	adds	r0, r7, #1
 800561c:	d1d6      	bne.n	80055cc <_vfiprintf_r+0x1bc>
 800561e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005620:	07d9      	lsls	r1, r3, #31
 8005622:	d405      	bmi.n	8005630 <_vfiprintf_r+0x220>
 8005624:	89ab      	ldrh	r3, [r5, #12]
 8005626:	059a      	lsls	r2, r3, #22
 8005628:	d402      	bmi.n	8005630 <_vfiprintf_r+0x220>
 800562a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800562c:	f7ff fd7f 	bl	800512e <__retarget_lock_release_recursive>
 8005630:	89ab      	ldrh	r3, [r5, #12]
 8005632:	065b      	lsls	r3, r3, #25
 8005634:	f53f af12 	bmi.w	800545c <_vfiprintf_r+0x4c>
 8005638:	9809      	ldr	r0, [sp, #36]	; 0x24
 800563a:	e711      	b.n	8005460 <_vfiprintf_r+0x50>
 800563c:	ab03      	add	r3, sp, #12
 800563e:	9300      	str	r3, [sp, #0]
 8005640:	462a      	mov	r2, r5
 8005642:	4b09      	ldr	r3, [pc, #36]	; (8005668 <_vfiprintf_r+0x258>)
 8005644:	a904      	add	r1, sp, #16
 8005646:	4630      	mov	r0, r6
 8005648:	f000 f880 	bl	800574c <_printf_i>
 800564c:	e7e4      	b.n	8005618 <_vfiprintf_r+0x208>
 800564e:	bf00      	nop
 8005650:	08006d80 	.word	0x08006d80
 8005654:	08006da0 	.word	0x08006da0
 8005658:	08006d60 	.word	0x08006d60
 800565c:	08006dc0 	.word	0x08006dc0
 8005660:	08006dca 	.word	0x08006dca
 8005664:	00000000 	.word	0x00000000
 8005668:	080053eb 	.word	0x080053eb
 800566c:	08006dc6 	.word	0x08006dc6

08005670 <_printf_common>:
 8005670:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005674:	4616      	mov	r6, r2
 8005676:	4699      	mov	r9, r3
 8005678:	688a      	ldr	r2, [r1, #8]
 800567a:	690b      	ldr	r3, [r1, #16]
 800567c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005680:	4293      	cmp	r3, r2
 8005682:	bfb8      	it	lt
 8005684:	4613      	movlt	r3, r2
 8005686:	6033      	str	r3, [r6, #0]
 8005688:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800568c:	4607      	mov	r7, r0
 800568e:	460c      	mov	r4, r1
 8005690:	b10a      	cbz	r2, 8005696 <_printf_common+0x26>
 8005692:	3301      	adds	r3, #1
 8005694:	6033      	str	r3, [r6, #0]
 8005696:	6823      	ldr	r3, [r4, #0]
 8005698:	0699      	lsls	r1, r3, #26
 800569a:	bf42      	ittt	mi
 800569c:	6833      	ldrmi	r3, [r6, #0]
 800569e:	3302      	addmi	r3, #2
 80056a0:	6033      	strmi	r3, [r6, #0]
 80056a2:	6825      	ldr	r5, [r4, #0]
 80056a4:	f015 0506 	ands.w	r5, r5, #6
 80056a8:	d106      	bne.n	80056b8 <_printf_common+0x48>
 80056aa:	f104 0a19 	add.w	sl, r4, #25
 80056ae:	68e3      	ldr	r3, [r4, #12]
 80056b0:	6832      	ldr	r2, [r6, #0]
 80056b2:	1a9b      	subs	r3, r3, r2
 80056b4:	42ab      	cmp	r3, r5
 80056b6:	dc26      	bgt.n	8005706 <_printf_common+0x96>
 80056b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80056bc:	1e13      	subs	r3, r2, #0
 80056be:	6822      	ldr	r2, [r4, #0]
 80056c0:	bf18      	it	ne
 80056c2:	2301      	movne	r3, #1
 80056c4:	0692      	lsls	r2, r2, #26
 80056c6:	d42b      	bmi.n	8005720 <_printf_common+0xb0>
 80056c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80056cc:	4649      	mov	r1, r9
 80056ce:	4638      	mov	r0, r7
 80056d0:	47c0      	blx	r8
 80056d2:	3001      	adds	r0, #1
 80056d4:	d01e      	beq.n	8005714 <_printf_common+0xa4>
 80056d6:	6823      	ldr	r3, [r4, #0]
 80056d8:	68e5      	ldr	r5, [r4, #12]
 80056da:	6832      	ldr	r2, [r6, #0]
 80056dc:	f003 0306 	and.w	r3, r3, #6
 80056e0:	2b04      	cmp	r3, #4
 80056e2:	bf08      	it	eq
 80056e4:	1aad      	subeq	r5, r5, r2
 80056e6:	68a3      	ldr	r3, [r4, #8]
 80056e8:	6922      	ldr	r2, [r4, #16]
 80056ea:	bf0c      	ite	eq
 80056ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80056f0:	2500      	movne	r5, #0
 80056f2:	4293      	cmp	r3, r2
 80056f4:	bfc4      	itt	gt
 80056f6:	1a9b      	subgt	r3, r3, r2
 80056f8:	18ed      	addgt	r5, r5, r3
 80056fa:	2600      	movs	r6, #0
 80056fc:	341a      	adds	r4, #26
 80056fe:	42b5      	cmp	r5, r6
 8005700:	d11a      	bne.n	8005738 <_printf_common+0xc8>
 8005702:	2000      	movs	r0, #0
 8005704:	e008      	b.n	8005718 <_printf_common+0xa8>
 8005706:	2301      	movs	r3, #1
 8005708:	4652      	mov	r2, sl
 800570a:	4649      	mov	r1, r9
 800570c:	4638      	mov	r0, r7
 800570e:	47c0      	blx	r8
 8005710:	3001      	adds	r0, #1
 8005712:	d103      	bne.n	800571c <_printf_common+0xac>
 8005714:	f04f 30ff 	mov.w	r0, #4294967295
 8005718:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800571c:	3501      	adds	r5, #1
 800571e:	e7c6      	b.n	80056ae <_printf_common+0x3e>
 8005720:	18e1      	adds	r1, r4, r3
 8005722:	1c5a      	adds	r2, r3, #1
 8005724:	2030      	movs	r0, #48	; 0x30
 8005726:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800572a:	4422      	add	r2, r4
 800572c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005730:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005734:	3302      	adds	r3, #2
 8005736:	e7c7      	b.n	80056c8 <_printf_common+0x58>
 8005738:	2301      	movs	r3, #1
 800573a:	4622      	mov	r2, r4
 800573c:	4649      	mov	r1, r9
 800573e:	4638      	mov	r0, r7
 8005740:	47c0      	blx	r8
 8005742:	3001      	adds	r0, #1
 8005744:	d0e6      	beq.n	8005714 <_printf_common+0xa4>
 8005746:	3601      	adds	r6, #1
 8005748:	e7d9      	b.n	80056fe <_printf_common+0x8e>
	...

0800574c <_printf_i>:
 800574c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005750:	7e0f      	ldrb	r7, [r1, #24]
 8005752:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005754:	2f78      	cmp	r7, #120	; 0x78
 8005756:	4691      	mov	r9, r2
 8005758:	4680      	mov	r8, r0
 800575a:	460c      	mov	r4, r1
 800575c:	469a      	mov	sl, r3
 800575e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005762:	d807      	bhi.n	8005774 <_printf_i+0x28>
 8005764:	2f62      	cmp	r7, #98	; 0x62
 8005766:	d80a      	bhi.n	800577e <_printf_i+0x32>
 8005768:	2f00      	cmp	r7, #0
 800576a:	f000 80d8 	beq.w	800591e <_printf_i+0x1d2>
 800576e:	2f58      	cmp	r7, #88	; 0x58
 8005770:	f000 80a3 	beq.w	80058ba <_printf_i+0x16e>
 8005774:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005778:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800577c:	e03a      	b.n	80057f4 <_printf_i+0xa8>
 800577e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005782:	2b15      	cmp	r3, #21
 8005784:	d8f6      	bhi.n	8005774 <_printf_i+0x28>
 8005786:	a101      	add	r1, pc, #4	; (adr r1, 800578c <_printf_i+0x40>)
 8005788:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800578c:	080057e5 	.word	0x080057e5
 8005790:	080057f9 	.word	0x080057f9
 8005794:	08005775 	.word	0x08005775
 8005798:	08005775 	.word	0x08005775
 800579c:	08005775 	.word	0x08005775
 80057a0:	08005775 	.word	0x08005775
 80057a4:	080057f9 	.word	0x080057f9
 80057a8:	08005775 	.word	0x08005775
 80057ac:	08005775 	.word	0x08005775
 80057b0:	08005775 	.word	0x08005775
 80057b4:	08005775 	.word	0x08005775
 80057b8:	08005905 	.word	0x08005905
 80057bc:	08005829 	.word	0x08005829
 80057c0:	080058e7 	.word	0x080058e7
 80057c4:	08005775 	.word	0x08005775
 80057c8:	08005775 	.word	0x08005775
 80057cc:	08005927 	.word	0x08005927
 80057d0:	08005775 	.word	0x08005775
 80057d4:	08005829 	.word	0x08005829
 80057d8:	08005775 	.word	0x08005775
 80057dc:	08005775 	.word	0x08005775
 80057e0:	080058ef 	.word	0x080058ef
 80057e4:	682b      	ldr	r3, [r5, #0]
 80057e6:	1d1a      	adds	r2, r3, #4
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	602a      	str	r2, [r5, #0]
 80057ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80057f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80057f4:	2301      	movs	r3, #1
 80057f6:	e0a3      	b.n	8005940 <_printf_i+0x1f4>
 80057f8:	6820      	ldr	r0, [r4, #0]
 80057fa:	6829      	ldr	r1, [r5, #0]
 80057fc:	0606      	lsls	r6, r0, #24
 80057fe:	f101 0304 	add.w	r3, r1, #4
 8005802:	d50a      	bpl.n	800581a <_printf_i+0xce>
 8005804:	680e      	ldr	r6, [r1, #0]
 8005806:	602b      	str	r3, [r5, #0]
 8005808:	2e00      	cmp	r6, #0
 800580a:	da03      	bge.n	8005814 <_printf_i+0xc8>
 800580c:	232d      	movs	r3, #45	; 0x2d
 800580e:	4276      	negs	r6, r6
 8005810:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005814:	485e      	ldr	r0, [pc, #376]	; (8005990 <_printf_i+0x244>)
 8005816:	230a      	movs	r3, #10
 8005818:	e019      	b.n	800584e <_printf_i+0x102>
 800581a:	680e      	ldr	r6, [r1, #0]
 800581c:	602b      	str	r3, [r5, #0]
 800581e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005822:	bf18      	it	ne
 8005824:	b236      	sxthne	r6, r6
 8005826:	e7ef      	b.n	8005808 <_printf_i+0xbc>
 8005828:	682b      	ldr	r3, [r5, #0]
 800582a:	6820      	ldr	r0, [r4, #0]
 800582c:	1d19      	adds	r1, r3, #4
 800582e:	6029      	str	r1, [r5, #0]
 8005830:	0601      	lsls	r1, r0, #24
 8005832:	d501      	bpl.n	8005838 <_printf_i+0xec>
 8005834:	681e      	ldr	r6, [r3, #0]
 8005836:	e002      	b.n	800583e <_printf_i+0xf2>
 8005838:	0646      	lsls	r6, r0, #25
 800583a:	d5fb      	bpl.n	8005834 <_printf_i+0xe8>
 800583c:	881e      	ldrh	r6, [r3, #0]
 800583e:	4854      	ldr	r0, [pc, #336]	; (8005990 <_printf_i+0x244>)
 8005840:	2f6f      	cmp	r7, #111	; 0x6f
 8005842:	bf0c      	ite	eq
 8005844:	2308      	moveq	r3, #8
 8005846:	230a      	movne	r3, #10
 8005848:	2100      	movs	r1, #0
 800584a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800584e:	6865      	ldr	r5, [r4, #4]
 8005850:	60a5      	str	r5, [r4, #8]
 8005852:	2d00      	cmp	r5, #0
 8005854:	bfa2      	ittt	ge
 8005856:	6821      	ldrge	r1, [r4, #0]
 8005858:	f021 0104 	bicge.w	r1, r1, #4
 800585c:	6021      	strge	r1, [r4, #0]
 800585e:	b90e      	cbnz	r6, 8005864 <_printf_i+0x118>
 8005860:	2d00      	cmp	r5, #0
 8005862:	d04d      	beq.n	8005900 <_printf_i+0x1b4>
 8005864:	4615      	mov	r5, r2
 8005866:	fbb6 f1f3 	udiv	r1, r6, r3
 800586a:	fb03 6711 	mls	r7, r3, r1, r6
 800586e:	5dc7      	ldrb	r7, [r0, r7]
 8005870:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005874:	4637      	mov	r7, r6
 8005876:	42bb      	cmp	r3, r7
 8005878:	460e      	mov	r6, r1
 800587a:	d9f4      	bls.n	8005866 <_printf_i+0x11a>
 800587c:	2b08      	cmp	r3, #8
 800587e:	d10b      	bne.n	8005898 <_printf_i+0x14c>
 8005880:	6823      	ldr	r3, [r4, #0]
 8005882:	07de      	lsls	r6, r3, #31
 8005884:	d508      	bpl.n	8005898 <_printf_i+0x14c>
 8005886:	6923      	ldr	r3, [r4, #16]
 8005888:	6861      	ldr	r1, [r4, #4]
 800588a:	4299      	cmp	r1, r3
 800588c:	bfde      	ittt	le
 800588e:	2330      	movle	r3, #48	; 0x30
 8005890:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005894:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005898:	1b52      	subs	r2, r2, r5
 800589a:	6122      	str	r2, [r4, #16]
 800589c:	f8cd a000 	str.w	sl, [sp]
 80058a0:	464b      	mov	r3, r9
 80058a2:	aa03      	add	r2, sp, #12
 80058a4:	4621      	mov	r1, r4
 80058a6:	4640      	mov	r0, r8
 80058a8:	f7ff fee2 	bl	8005670 <_printf_common>
 80058ac:	3001      	adds	r0, #1
 80058ae:	d14c      	bne.n	800594a <_printf_i+0x1fe>
 80058b0:	f04f 30ff 	mov.w	r0, #4294967295
 80058b4:	b004      	add	sp, #16
 80058b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058ba:	4835      	ldr	r0, [pc, #212]	; (8005990 <_printf_i+0x244>)
 80058bc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80058c0:	6829      	ldr	r1, [r5, #0]
 80058c2:	6823      	ldr	r3, [r4, #0]
 80058c4:	f851 6b04 	ldr.w	r6, [r1], #4
 80058c8:	6029      	str	r1, [r5, #0]
 80058ca:	061d      	lsls	r5, r3, #24
 80058cc:	d514      	bpl.n	80058f8 <_printf_i+0x1ac>
 80058ce:	07df      	lsls	r7, r3, #31
 80058d0:	bf44      	itt	mi
 80058d2:	f043 0320 	orrmi.w	r3, r3, #32
 80058d6:	6023      	strmi	r3, [r4, #0]
 80058d8:	b91e      	cbnz	r6, 80058e2 <_printf_i+0x196>
 80058da:	6823      	ldr	r3, [r4, #0]
 80058dc:	f023 0320 	bic.w	r3, r3, #32
 80058e0:	6023      	str	r3, [r4, #0]
 80058e2:	2310      	movs	r3, #16
 80058e4:	e7b0      	b.n	8005848 <_printf_i+0xfc>
 80058e6:	6823      	ldr	r3, [r4, #0]
 80058e8:	f043 0320 	orr.w	r3, r3, #32
 80058ec:	6023      	str	r3, [r4, #0]
 80058ee:	2378      	movs	r3, #120	; 0x78
 80058f0:	4828      	ldr	r0, [pc, #160]	; (8005994 <_printf_i+0x248>)
 80058f2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80058f6:	e7e3      	b.n	80058c0 <_printf_i+0x174>
 80058f8:	0659      	lsls	r1, r3, #25
 80058fa:	bf48      	it	mi
 80058fc:	b2b6      	uxthmi	r6, r6
 80058fe:	e7e6      	b.n	80058ce <_printf_i+0x182>
 8005900:	4615      	mov	r5, r2
 8005902:	e7bb      	b.n	800587c <_printf_i+0x130>
 8005904:	682b      	ldr	r3, [r5, #0]
 8005906:	6826      	ldr	r6, [r4, #0]
 8005908:	6961      	ldr	r1, [r4, #20]
 800590a:	1d18      	adds	r0, r3, #4
 800590c:	6028      	str	r0, [r5, #0]
 800590e:	0635      	lsls	r5, r6, #24
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	d501      	bpl.n	8005918 <_printf_i+0x1cc>
 8005914:	6019      	str	r1, [r3, #0]
 8005916:	e002      	b.n	800591e <_printf_i+0x1d2>
 8005918:	0670      	lsls	r0, r6, #25
 800591a:	d5fb      	bpl.n	8005914 <_printf_i+0x1c8>
 800591c:	8019      	strh	r1, [r3, #0]
 800591e:	2300      	movs	r3, #0
 8005920:	6123      	str	r3, [r4, #16]
 8005922:	4615      	mov	r5, r2
 8005924:	e7ba      	b.n	800589c <_printf_i+0x150>
 8005926:	682b      	ldr	r3, [r5, #0]
 8005928:	1d1a      	adds	r2, r3, #4
 800592a:	602a      	str	r2, [r5, #0]
 800592c:	681d      	ldr	r5, [r3, #0]
 800592e:	6862      	ldr	r2, [r4, #4]
 8005930:	2100      	movs	r1, #0
 8005932:	4628      	mov	r0, r5
 8005934:	f7fa fc54 	bl	80001e0 <memchr>
 8005938:	b108      	cbz	r0, 800593e <_printf_i+0x1f2>
 800593a:	1b40      	subs	r0, r0, r5
 800593c:	6060      	str	r0, [r4, #4]
 800593e:	6863      	ldr	r3, [r4, #4]
 8005940:	6123      	str	r3, [r4, #16]
 8005942:	2300      	movs	r3, #0
 8005944:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005948:	e7a8      	b.n	800589c <_printf_i+0x150>
 800594a:	6923      	ldr	r3, [r4, #16]
 800594c:	462a      	mov	r2, r5
 800594e:	4649      	mov	r1, r9
 8005950:	4640      	mov	r0, r8
 8005952:	47d0      	blx	sl
 8005954:	3001      	adds	r0, #1
 8005956:	d0ab      	beq.n	80058b0 <_printf_i+0x164>
 8005958:	6823      	ldr	r3, [r4, #0]
 800595a:	079b      	lsls	r3, r3, #30
 800595c:	d413      	bmi.n	8005986 <_printf_i+0x23a>
 800595e:	68e0      	ldr	r0, [r4, #12]
 8005960:	9b03      	ldr	r3, [sp, #12]
 8005962:	4298      	cmp	r0, r3
 8005964:	bfb8      	it	lt
 8005966:	4618      	movlt	r0, r3
 8005968:	e7a4      	b.n	80058b4 <_printf_i+0x168>
 800596a:	2301      	movs	r3, #1
 800596c:	4632      	mov	r2, r6
 800596e:	4649      	mov	r1, r9
 8005970:	4640      	mov	r0, r8
 8005972:	47d0      	blx	sl
 8005974:	3001      	adds	r0, #1
 8005976:	d09b      	beq.n	80058b0 <_printf_i+0x164>
 8005978:	3501      	adds	r5, #1
 800597a:	68e3      	ldr	r3, [r4, #12]
 800597c:	9903      	ldr	r1, [sp, #12]
 800597e:	1a5b      	subs	r3, r3, r1
 8005980:	42ab      	cmp	r3, r5
 8005982:	dcf2      	bgt.n	800596a <_printf_i+0x21e>
 8005984:	e7eb      	b.n	800595e <_printf_i+0x212>
 8005986:	2500      	movs	r5, #0
 8005988:	f104 0619 	add.w	r6, r4, #25
 800598c:	e7f5      	b.n	800597a <_printf_i+0x22e>
 800598e:	bf00      	nop
 8005990:	08006dd1 	.word	0x08006dd1
 8005994:	08006de2 	.word	0x08006de2

08005998 <_sbrk_r>:
 8005998:	b538      	push	{r3, r4, r5, lr}
 800599a:	4d06      	ldr	r5, [pc, #24]	; (80059b4 <_sbrk_r+0x1c>)
 800599c:	2300      	movs	r3, #0
 800599e:	4604      	mov	r4, r0
 80059a0:	4608      	mov	r0, r1
 80059a2:	602b      	str	r3, [r5, #0]
 80059a4:	f7fc fa1a 	bl	8001ddc <_sbrk>
 80059a8:	1c43      	adds	r3, r0, #1
 80059aa:	d102      	bne.n	80059b2 <_sbrk_r+0x1a>
 80059ac:	682b      	ldr	r3, [r5, #0]
 80059ae:	b103      	cbz	r3, 80059b2 <_sbrk_r+0x1a>
 80059b0:	6023      	str	r3, [r4, #0]
 80059b2:	bd38      	pop	{r3, r4, r5, pc}
 80059b4:	20000114 	.word	0x20000114

080059b8 <__sread>:
 80059b8:	b510      	push	{r4, lr}
 80059ba:	460c      	mov	r4, r1
 80059bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059c0:	f000 f8a0 	bl	8005b04 <_read_r>
 80059c4:	2800      	cmp	r0, #0
 80059c6:	bfab      	itete	ge
 80059c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80059ca:	89a3      	ldrhlt	r3, [r4, #12]
 80059cc:	181b      	addge	r3, r3, r0
 80059ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80059d2:	bfac      	ite	ge
 80059d4:	6563      	strge	r3, [r4, #84]	; 0x54
 80059d6:	81a3      	strhlt	r3, [r4, #12]
 80059d8:	bd10      	pop	{r4, pc}

080059da <__swrite>:
 80059da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059de:	461f      	mov	r7, r3
 80059e0:	898b      	ldrh	r3, [r1, #12]
 80059e2:	05db      	lsls	r3, r3, #23
 80059e4:	4605      	mov	r5, r0
 80059e6:	460c      	mov	r4, r1
 80059e8:	4616      	mov	r6, r2
 80059ea:	d505      	bpl.n	80059f8 <__swrite+0x1e>
 80059ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059f0:	2302      	movs	r3, #2
 80059f2:	2200      	movs	r2, #0
 80059f4:	f000 f868 	bl	8005ac8 <_lseek_r>
 80059f8:	89a3      	ldrh	r3, [r4, #12]
 80059fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80059fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005a02:	81a3      	strh	r3, [r4, #12]
 8005a04:	4632      	mov	r2, r6
 8005a06:	463b      	mov	r3, r7
 8005a08:	4628      	mov	r0, r5
 8005a0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a0e:	f000 b817 	b.w	8005a40 <_write_r>

08005a12 <__sseek>:
 8005a12:	b510      	push	{r4, lr}
 8005a14:	460c      	mov	r4, r1
 8005a16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a1a:	f000 f855 	bl	8005ac8 <_lseek_r>
 8005a1e:	1c43      	adds	r3, r0, #1
 8005a20:	89a3      	ldrh	r3, [r4, #12]
 8005a22:	bf15      	itete	ne
 8005a24:	6560      	strne	r0, [r4, #84]	; 0x54
 8005a26:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005a2a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005a2e:	81a3      	strheq	r3, [r4, #12]
 8005a30:	bf18      	it	ne
 8005a32:	81a3      	strhne	r3, [r4, #12]
 8005a34:	bd10      	pop	{r4, pc}

08005a36 <__sclose>:
 8005a36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a3a:	f000 b813 	b.w	8005a64 <_close_r>
	...

08005a40 <_write_r>:
 8005a40:	b538      	push	{r3, r4, r5, lr}
 8005a42:	4d07      	ldr	r5, [pc, #28]	; (8005a60 <_write_r+0x20>)
 8005a44:	4604      	mov	r4, r0
 8005a46:	4608      	mov	r0, r1
 8005a48:	4611      	mov	r1, r2
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	602a      	str	r2, [r5, #0]
 8005a4e:	461a      	mov	r2, r3
 8005a50:	f7fc f85a 	bl	8001b08 <_write>
 8005a54:	1c43      	adds	r3, r0, #1
 8005a56:	d102      	bne.n	8005a5e <_write_r+0x1e>
 8005a58:	682b      	ldr	r3, [r5, #0]
 8005a5a:	b103      	cbz	r3, 8005a5e <_write_r+0x1e>
 8005a5c:	6023      	str	r3, [r4, #0]
 8005a5e:	bd38      	pop	{r3, r4, r5, pc}
 8005a60:	20000114 	.word	0x20000114

08005a64 <_close_r>:
 8005a64:	b538      	push	{r3, r4, r5, lr}
 8005a66:	4d06      	ldr	r5, [pc, #24]	; (8005a80 <_close_r+0x1c>)
 8005a68:	2300      	movs	r3, #0
 8005a6a:	4604      	mov	r4, r0
 8005a6c:	4608      	mov	r0, r1
 8005a6e:	602b      	str	r3, [r5, #0]
 8005a70:	f7fc f97f 	bl	8001d72 <_close>
 8005a74:	1c43      	adds	r3, r0, #1
 8005a76:	d102      	bne.n	8005a7e <_close_r+0x1a>
 8005a78:	682b      	ldr	r3, [r5, #0]
 8005a7a:	b103      	cbz	r3, 8005a7e <_close_r+0x1a>
 8005a7c:	6023      	str	r3, [r4, #0]
 8005a7e:	bd38      	pop	{r3, r4, r5, pc}
 8005a80:	20000114 	.word	0x20000114

08005a84 <_fstat_r>:
 8005a84:	b538      	push	{r3, r4, r5, lr}
 8005a86:	4d07      	ldr	r5, [pc, #28]	; (8005aa4 <_fstat_r+0x20>)
 8005a88:	2300      	movs	r3, #0
 8005a8a:	4604      	mov	r4, r0
 8005a8c:	4608      	mov	r0, r1
 8005a8e:	4611      	mov	r1, r2
 8005a90:	602b      	str	r3, [r5, #0]
 8005a92:	f7fc f97a 	bl	8001d8a <_fstat>
 8005a96:	1c43      	adds	r3, r0, #1
 8005a98:	d102      	bne.n	8005aa0 <_fstat_r+0x1c>
 8005a9a:	682b      	ldr	r3, [r5, #0]
 8005a9c:	b103      	cbz	r3, 8005aa0 <_fstat_r+0x1c>
 8005a9e:	6023      	str	r3, [r4, #0]
 8005aa0:	bd38      	pop	{r3, r4, r5, pc}
 8005aa2:	bf00      	nop
 8005aa4:	20000114 	.word	0x20000114

08005aa8 <_isatty_r>:
 8005aa8:	b538      	push	{r3, r4, r5, lr}
 8005aaa:	4d06      	ldr	r5, [pc, #24]	; (8005ac4 <_isatty_r+0x1c>)
 8005aac:	2300      	movs	r3, #0
 8005aae:	4604      	mov	r4, r0
 8005ab0:	4608      	mov	r0, r1
 8005ab2:	602b      	str	r3, [r5, #0]
 8005ab4:	f7fc f979 	bl	8001daa <_isatty>
 8005ab8:	1c43      	adds	r3, r0, #1
 8005aba:	d102      	bne.n	8005ac2 <_isatty_r+0x1a>
 8005abc:	682b      	ldr	r3, [r5, #0]
 8005abe:	b103      	cbz	r3, 8005ac2 <_isatty_r+0x1a>
 8005ac0:	6023      	str	r3, [r4, #0]
 8005ac2:	bd38      	pop	{r3, r4, r5, pc}
 8005ac4:	20000114 	.word	0x20000114

08005ac8 <_lseek_r>:
 8005ac8:	b538      	push	{r3, r4, r5, lr}
 8005aca:	4d07      	ldr	r5, [pc, #28]	; (8005ae8 <_lseek_r+0x20>)
 8005acc:	4604      	mov	r4, r0
 8005ace:	4608      	mov	r0, r1
 8005ad0:	4611      	mov	r1, r2
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	602a      	str	r2, [r5, #0]
 8005ad6:	461a      	mov	r2, r3
 8005ad8:	f7fc f972 	bl	8001dc0 <_lseek>
 8005adc:	1c43      	adds	r3, r0, #1
 8005ade:	d102      	bne.n	8005ae6 <_lseek_r+0x1e>
 8005ae0:	682b      	ldr	r3, [r5, #0]
 8005ae2:	b103      	cbz	r3, 8005ae6 <_lseek_r+0x1e>
 8005ae4:	6023      	str	r3, [r4, #0]
 8005ae6:	bd38      	pop	{r3, r4, r5, pc}
 8005ae8:	20000114 	.word	0x20000114

08005aec <__malloc_lock>:
 8005aec:	4801      	ldr	r0, [pc, #4]	; (8005af4 <__malloc_lock+0x8>)
 8005aee:	f7ff bb1d 	b.w	800512c <__retarget_lock_acquire_recursive>
 8005af2:	bf00      	nop
 8005af4:	20000108 	.word	0x20000108

08005af8 <__malloc_unlock>:
 8005af8:	4801      	ldr	r0, [pc, #4]	; (8005b00 <__malloc_unlock+0x8>)
 8005afa:	f7ff bb18 	b.w	800512e <__retarget_lock_release_recursive>
 8005afe:	bf00      	nop
 8005b00:	20000108 	.word	0x20000108

08005b04 <_read_r>:
 8005b04:	b538      	push	{r3, r4, r5, lr}
 8005b06:	4d07      	ldr	r5, [pc, #28]	; (8005b24 <_read_r+0x20>)
 8005b08:	4604      	mov	r4, r0
 8005b0a:	4608      	mov	r0, r1
 8005b0c:	4611      	mov	r1, r2
 8005b0e:	2200      	movs	r2, #0
 8005b10:	602a      	str	r2, [r5, #0]
 8005b12:	461a      	mov	r2, r3
 8005b14:	f7fc f910 	bl	8001d38 <_read>
 8005b18:	1c43      	adds	r3, r0, #1
 8005b1a:	d102      	bne.n	8005b22 <_read_r+0x1e>
 8005b1c:	682b      	ldr	r3, [r5, #0]
 8005b1e:	b103      	cbz	r3, 8005b22 <_read_r+0x1e>
 8005b20:	6023      	str	r3, [r4, #0]
 8005b22:	bd38      	pop	{r3, r4, r5, pc}
 8005b24:	20000114 	.word	0x20000114

08005b28 <_init>:
 8005b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b2a:	bf00      	nop
 8005b2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b2e:	bc08      	pop	{r3}
 8005b30:	469e      	mov	lr, r3
 8005b32:	4770      	bx	lr

08005b34 <_fini>:
 8005b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b36:	bf00      	nop
 8005b38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b3a:	bc08      	pop	{r3}
 8005b3c:	469e      	mov	lr, r3
 8005b3e:	4770      	bx	lr
